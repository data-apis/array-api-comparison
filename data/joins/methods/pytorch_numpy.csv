name,numpy
"torch.Tensor","numpy.ndarray"
"torch.Tensor.T","numpy.ndarray.T"
"torch.Tensor.__abs__","numpy.ndarray.__abs__"
"torch.Tensor.__add__","numpy.ndarray.__add__"
"torch.Tensor.__and__","numpy.ndarray.__and__"
"torch.Tensor.__array__","numpy.ndarray.__array__"
"torch.Tensor.__array_priority__","numpy.ndarray.__array_priority__"
"torch.Tensor.__array_wrap__","numpy.ndarray.__array_wrap__"
"torch.Tensor.__bool__","numpy.ndarray.__bool__"
"torch.Tensor.__class__","numpy.ndarray.__class__"
"torch.Tensor.__contains__","numpy.ndarray.__contains__"
"torch.Tensor.__cuda_array_interface__",""
"torch.Tensor.__deepcopy__","numpy.ndarray.__deepcopy__"
"torch.Tensor.__delattr__","numpy.ndarray.__delattr__"
"torch.Tensor.__delitem__","numpy.ndarray.__delitem__"
"torch.Tensor.__dict__",""
"torch.Tensor.__dir__","numpy.ndarray.__dir__"
"torch.Tensor.__div__",""
"torch.Tensor.__doc__","numpy.ndarray.__doc__"
"torch.Tensor.__eq__","numpy.ndarray.__eq__"
"torch.Tensor.__float__","numpy.ndarray.__float__"
"torch.Tensor.__floordiv__","numpy.ndarray.__floordiv__"
"torch.Tensor.__format__","numpy.ndarray.__format__"
"torch.Tensor.__ge__","numpy.ndarray.__ge__"
"torch.Tensor.__getattribute__","numpy.ndarray.__getattribute__"
"torch.Tensor.__getitem__","numpy.ndarray.__getitem__"
"torch.Tensor.__gt__","numpy.ndarray.__gt__"
"torch.Tensor.__hash__","numpy.ndarray.__hash__"
"torch.Tensor.__iadd__","numpy.ndarray.__iadd__"
"torch.Tensor.__iand__","numpy.ndarray.__iand__"
"torch.Tensor.__idiv__",""
"torch.Tensor.__ifloordiv__","numpy.ndarray.__ifloordiv__"
"torch.Tensor.__ilshift__","numpy.ndarray.__ilshift__"
"torch.Tensor.__imul__","numpy.ndarray.__imul__"
"torch.Tensor.__index__","numpy.ndarray.__index__"
"torch.Tensor.__init__","numpy.ndarray.__init__"
"torch.Tensor.__init_subclass__","numpy.ndarray.__init_subclass__"
"torch.Tensor.__int__","numpy.ndarray.__int__"
"torch.Tensor.__invert__","numpy.ndarray.__invert__"
"torch.Tensor.__ior__","numpy.ndarray.__ior__"
"torch.Tensor.__ipow__","numpy.ndarray.__ipow__"
"torch.Tensor.__irshift__","numpy.ndarray.__irshift__"
"torch.Tensor.__isub__","numpy.ndarray.__isub__"
"torch.Tensor.__iter__","numpy.ndarray.__iter__"
"torch.Tensor.__itruediv__","numpy.ndarray.__itruediv__"
"torch.Tensor.__ixor__","numpy.ndarray.__ixor__"
"torch.Tensor.__le__","numpy.ndarray.__le__"
"torch.Tensor.__len__","numpy.ndarray.__len__"
"torch.Tensor.__long__",""
"torch.Tensor.__lshift__","numpy.ndarray.__lshift__"
"torch.Tensor.__lt__","numpy.ndarray.__lt__"
"torch.Tensor.__matmul__","numpy.ndarray.__matmul__"
"torch.Tensor.__mod__","numpy.ndarray.__mod__"
"torch.Tensor.__module__",""
"torch.Tensor.__mul__","numpy.ndarray.__mul__"
"torch.Tensor.__ne__","numpy.ndarray.__ne__"
"torch.Tensor.__neg__","numpy.ndarray.__neg__"
"torch.Tensor.__new__","numpy.ndarray.__new__"
"torch.Tensor.__nonzero__",""
"torch.Tensor.__or__","numpy.ndarray.__or__"
"torch.Tensor.__pow__","numpy.ndarray.__pow__"
"torch.Tensor.__radd__","numpy.ndarray.__radd__"
"torch.Tensor.__rdiv__",""
"torch.Tensor.__reduce__","numpy.ndarray.__reduce__"
"torch.Tensor.__reduce_ex__","numpy.ndarray.__reduce_ex__"
"torch.Tensor.__repr__","numpy.ndarray.__repr__"
"torch.Tensor.__reversed__",""
"torch.Tensor.__rfloordiv__","numpy.ndarray.__rfloordiv__"
"torch.Tensor.__rmul__","numpy.ndarray.__rmul__"
"torch.Tensor.__rpow__","numpy.ndarray.__rpow__"
"torch.Tensor.__rshift__","numpy.ndarray.__rshift__"
"torch.Tensor.__rsub__","numpy.ndarray.__rsub__"
"torch.Tensor.__rtruediv__","numpy.ndarray.__rtruediv__"
"torch.Tensor.__setattr__","numpy.ndarray.__setattr__"
"torch.Tensor.__setitem__","numpy.ndarray.__setitem__"
"torch.Tensor.__setstate__","numpy.ndarray.__setstate__"
"torch.Tensor.__sizeof__","numpy.ndarray.__sizeof__"
"torch.Tensor.__str__","numpy.ndarray.__str__"
"torch.Tensor.__sub__","numpy.ndarray.__sub__"
"torch.Tensor.__subclasshook__","numpy.ndarray.__subclasshook__"
"torch.Tensor.__truediv__","numpy.ndarray.__truediv__"
"torch.Tensor.__weakref__",""
"torch.Tensor.__xor__","numpy.ndarray.__xor__"
"torch.Tensor._backward_hooks",""
"torch.Tensor._base","numpy.ndarray.base"
"torch.Tensor._cdata",""
"torch.Tensor._coalesced_",""
"torch.Tensor._dimI",""
"torch.Tensor._dimV",""
"torch.Tensor._grad",""
"torch.Tensor._grad_fn",""
"torch.Tensor._indices",""
"torch.Tensor._is_view",""
"torch.Tensor._make_subclass",""
"torch.Tensor._nnz",""
"torch.Tensor._update_names",""
"torch.Tensor._values",""
"torch.Tensor._version",""
"torch.Tensor.abs",""
"torch.Tensor.abs_",""
"torch.Tensor.absolute",""
"torch.Tensor.absolute_",""
"torch.Tensor.acos",""
"torch.Tensor.acos_",""
"torch.Tensor.acosh",""
"torch.Tensor.acosh_",""
"torch.Tensor.add",""
"torch.Tensor.add_",""
"torch.Tensor.addbmm",""
"torch.Tensor.addbmm_",""
"torch.Tensor.addcdiv",""
"torch.Tensor.addcdiv_",""
"torch.Tensor.addcmul",""
"torch.Tensor.addcmul_",""
"torch.Tensor.addmm",""
"torch.Tensor.addmm_",""
"torch.Tensor.addmv",""
"torch.Tensor.addmv_",""
"torch.Tensor.addr",""
"torch.Tensor.addr_",""
"torch.Tensor.align_as",""
"torch.Tensor.align_to",""
"torch.Tensor.all","numpy.ndarray.all"
"torch.Tensor.allclose",""
"torch.Tensor.angle",""
"torch.Tensor.any","numpy.ndarray.any"
"torch.Tensor.apply_",""
"torch.Tensor.argmax","numpy.ndarray.argmax"
"torch.Tensor.argmin","numpy.ndarray.argmin"
"torch.Tensor.argsort","numpy.ndarray.argsort"
"torch.Tensor.as_strided",""
"torch.Tensor.as_strided_",""
"torch.Tensor.as_subclass",""
"torch.Tensor.asin",""
"torch.Tensor.asin_",""
"torch.Tensor.asinh",""
"torch.Tensor.asinh_",""
"torch.Tensor.atan",""
"torch.Tensor.atan2",""
"torch.Tensor.atan2_",""
"torch.Tensor.atan_",""
"torch.Tensor.atanh",""
"torch.Tensor.atanh_",""
"torch.Tensor.backward",""
"torch.Tensor.baddbmm",""
"torch.Tensor.baddbmm_",""
"torch.Tensor.bernoulli",""
"torch.Tensor.bernoulli_",""
"torch.Tensor.bfloat16",""
"torch.Tensor.bincount",""
"torch.Tensor.bitwise_and",""
"torch.Tensor.bitwise_and_",""
"torch.Tensor.bitwise_not",""
"torch.Tensor.bitwise_not_",""
"torch.Tensor.bitwise_or",""
"torch.Tensor.bitwise_or_",""
"torch.Tensor.bitwise_xor",""
"torch.Tensor.bitwise_xor_",""
"torch.Tensor.bmm",""
"torch.Tensor.bool",""
"torch.Tensor.byte",""
"torch.Tensor.cauchy_",""
"torch.Tensor.ceil",""
"torch.Tensor.ceil_",""
"torch.Tensor.char",""
"torch.Tensor.cholesky",""
"torch.Tensor.cholesky_inverse",""
"torch.Tensor.cholesky_solve",""
"torch.Tensor.chunk",""
"torch.Tensor.clamp","numpy.ndarray.clip"
"torch.Tensor.clamp_","numpy.ndarray.clip"
"torch.Tensor.clamp_max",""
"torch.Tensor.clamp_max_",""
"torch.Tensor.clamp_min",""
"torch.Tensor.clamp_min_",""
"torch.Tensor.clone",""
"torch.Tensor.coalesce",""
"torch.Tensor.conj","numpy.ndarray.conj"
"torch.Tensor.contiguous",""
"torch.Tensor.copy_",""
"torch.Tensor.cos",""
"torch.Tensor.cos_",""
"torch.Tensor.cosh",""
"torch.Tensor.cosh_",""
"torch.Tensor.cpu",""
"torch.Tensor.cross",""
"torch.Tensor.cuda",""
"torch.Tensor.cummax",""
"torch.Tensor.cummin",""
"torch.Tensor.cumprod","numpy.ndarray.cumprod"
"torch.Tensor.cumsum","numpy.ndarray.cumsum"
"torch.Tensor.data","numpy.ndarray.data"
"torch.Tensor.data_ptr",""
"torch.Tensor.deg2rad",""
"torch.Tensor.deg2rad_",""
"torch.Tensor.dense_dim",""
"torch.Tensor.dequantize",""
"torch.Tensor.det",""
"torch.Tensor.detach",""
"torch.Tensor.detach_",""
"torch.Tensor.device",""
"torch.Tensor.diag",""
"torch.Tensor.diag_embed",""
"torch.Tensor.diagflat",""
"torch.Tensor.diagonal","numpy.ndarray.diagonal"
"torch.Tensor.digamma",""
"torch.Tensor.digamma_",""
"torch.Tensor.dim",""
"torch.Tensor.dist",""
"torch.Tensor.div",""
"torch.Tensor.div_",""
"torch.Tensor.dot",""
"torch.Tensor.double",""
"torch.Tensor.dtype","numpy.ndarray.dtype"
"torch.Tensor.eig",""
"torch.Tensor.element_size",""
"torch.Tensor.eq",""
"torch.Tensor.eq_",""
"torch.Tensor.equal",""
"torch.Tensor.erf",""
"torch.Tensor.erf_",""
"torch.Tensor.erfc",""
"torch.Tensor.erfc_",""
"torch.Tensor.erfinv",""
"torch.Tensor.erfinv_",""
"torch.Tensor.exp",""
"torch.Tensor.exp_",""
"torch.Tensor.expand",""
"torch.Tensor.expand_as",""
"torch.Tensor.expm1",""
"torch.Tensor.expm1_",""
"torch.Tensor.exponential_",""
"torch.Tensor.fft",""
"torch.Tensor.fill_","numpy.ndarray.fill"
"torch.Tensor.fill_diagonal_",""
"torch.Tensor.flatten","numpy.ndarray.flatten"
"torch.Tensor.flip",""
"torch.Tensor.fliplr",""
"torch.Tensor.flipud",""
"torch.Tensor.float",""
"torch.Tensor.floor",""
"torch.Tensor.floor_",""
"torch.Tensor.floor_divide",""
"torch.Tensor.floor_divide_",""
"torch.Tensor.fmod",""
"torch.Tensor.fmod_",""
"torch.Tensor.frac",""
"torch.Tensor.frac_",""
"torch.Tensor.gather",""
"torch.Tensor.ge",""
"torch.Tensor.ge_",""
"torch.Tensor.geometric_",""
"torch.Tensor.geqrf",""
"torch.Tensor.ger",""
"torch.Tensor.get_device",""
"torch.Tensor.grad",""
"torch.Tensor.grad_fn",""
"torch.Tensor.gt",""
"torch.Tensor.gt_",""
"torch.Tensor.half",""
"torch.Tensor.hardshrink",""
"torch.Tensor.has_names",""
"torch.Tensor.histc",""
"torch.Tensor.ifft",""
"torch.Tensor.imag","numpy.ndarray.imag"
"torch.Tensor.index_add",""
"torch.Tensor.index_add_",""
"torch.Tensor.index_copy",""
"torch.Tensor.index_copy_",""
"torch.Tensor.index_fill",""
"torch.Tensor.index_fill_",""
"torch.Tensor.index_put",""
"torch.Tensor.index_put_",""
"torch.Tensor.index_select",""
"torch.Tensor.indices",""
"torch.Tensor.int",""
"torch.Tensor.int_repr",""
"torch.Tensor.inverse",""
"torch.Tensor.irfft",""
"torch.Tensor.is_coalesced",""
"torch.Tensor.is_complex",""
"torch.Tensor.is_contiguous",""
"torch.Tensor.is_cuda",""
"torch.Tensor.is_distributed",""
"torch.Tensor.is_floating_point",""
"torch.Tensor.is_leaf",""
"torch.Tensor.is_meta",""
"torch.Tensor.is_mkldnn",""
"torch.Tensor.is_nonzero",""
"torch.Tensor.is_pinned",""
"torch.Tensor.is_quantized",""
"torch.Tensor.is_same_size",""
"torch.Tensor.is_set_to",""
"torch.Tensor.is_shared",""
"torch.Tensor.is_signed",""
"torch.Tensor.is_sparse",""
"torch.Tensor.isclose",""
"torch.Tensor.isfinite",""
"torch.Tensor.isinf",""
"torch.Tensor.isnan",""
"torch.Tensor.istft",""
"torch.Tensor.item","numpy.ndarray.item"
"torch.Tensor.kthvalue",""
"torch.Tensor.layout",""
"torch.Tensor.le",""
"torch.Tensor.le_",""
"torch.Tensor.lerp",""
"torch.Tensor.lerp_",""
"torch.Tensor.lgamma",""
"torch.Tensor.lgamma_",""
"torch.Tensor.log",""
"torch.Tensor.log10",""
"torch.Tensor.log10_",""
"torch.Tensor.log1p",""
"torch.Tensor.log1p_",""
"torch.Tensor.log2",""
"torch.Tensor.log2_",""
"torch.Tensor.log_",""
"torch.Tensor.log_normal_",""
"torch.Tensor.log_softmax",""
"torch.Tensor.logaddexp",""
"torch.Tensor.logaddexp2",""
"torch.Tensor.logcumsumexp",""
"torch.Tensor.logdet",""
"torch.Tensor.logical_and",""
"torch.Tensor.logical_and_",""
"torch.Tensor.logical_not",""
"torch.Tensor.logical_not_",""
"torch.Tensor.logical_or",""
"torch.Tensor.logical_or_",""
"torch.Tensor.logical_xor",""
"torch.Tensor.logical_xor_",""
"torch.Tensor.logsumexp",""
"torch.Tensor.long",""
"torch.Tensor.lstsq",""
"torch.Tensor.lt",""
"torch.Tensor.lt_",""
"torch.Tensor.lu",""
"torch.Tensor.lu_solve",""
"torch.Tensor.map2_",""
"torch.Tensor.map_",""
"torch.Tensor.masked_fill",""
"torch.Tensor.masked_fill_",""
"torch.Tensor.masked_scatter",""
"torch.Tensor.masked_scatter_",""
"torch.Tensor.masked_select",""
"torch.Tensor.matmul",""
"torch.Tensor.matrix_power",""
"torch.Tensor.max","numpy.ndarray.max"
"torch.Tensor.mean","numpy.ndarray.mean"
"torch.Tensor.median",""
"torch.Tensor.min","numpy.ndarray.min"
"torch.Tensor.mm",""
"torch.Tensor.mode",""
"torch.Tensor.mul",""
"torch.Tensor.mul_",""
"torch.Tensor.multinomial",""
"torch.Tensor.mv",""
"torch.Tensor.mvlgamma",""
"torch.Tensor.mvlgamma_",""
"torch.Tensor.name",""
"torch.Tensor.names",""
"torch.Tensor.narrow",""
"torch.Tensor.narrow_copy",""
"torch.Tensor.ndim",""
"torch.Tensor.ndimension",""
"torch.Tensor.ne",""
"torch.Tensor.ne_",""
"torch.Tensor.neg",""
"torch.Tensor.neg_",""
"torch.Tensor.nelement",""
"torch.Tensor.new",""
"torch.Tensor.new_empty",""
"torch.Tensor.new_full",""
"torch.Tensor.new_ones",""
"torch.Tensor.new_tensor",""
"torch.Tensor.new_zeros",""
"torch.Tensor.nonzero","numpy.ndarray.nonzero"
"torch.Tensor.norm",""
"torch.Tensor.normal_",""
"torch.Tensor.numel",""
"torch.Tensor.numpy",""
"torch.Tensor.orgqr",""
"torch.Tensor.ormqr",""
"torch.Tensor.output_nr",""
"torch.Tensor.permute",""
"torch.Tensor.pin_memory",""
"torch.Tensor.pinverse",""
"torch.Tensor.polygamma",""
"torch.Tensor.polygamma_",""
"torch.Tensor.pow",""
"torch.Tensor.pow_",""
"torch.Tensor.prelu",""
"torch.Tensor.prod","numpy.ndarray.prod"
"torch.Tensor.put_","numpy.ndarray.put"
"torch.Tensor.q_per_channel_axis",""
"torch.Tensor.q_per_channel_scales",""
"torch.Tensor.q_per_channel_zero_points",""
"torch.Tensor.q_scale",""
"torch.Tensor.q_zero_point",""
"torch.Tensor.qr",""
"torch.Tensor.qscheme",""
"torch.Tensor.rad2deg",""
"torch.Tensor.rad2deg_",""
"torch.Tensor.random_",""
"torch.Tensor.real","numpy.ndarray.real"
"torch.Tensor.reciprocal",""
"torch.Tensor.reciprocal_",""
"torch.Tensor.record_stream",""
"torch.Tensor.refine_names",""
"torch.Tensor.register_hook",""
"torch.Tensor.reinforce",""
"torch.Tensor.relu",""
"torch.Tensor.relu_",""
"torch.Tensor.remainder",""
"torch.Tensor.remainder_",""
"torch.Tensor.rename",""
"torch.Tensor.rename_",""
"torch.Tensor.renorm",""
"torch.Tensor.renorm_",""
"torch.Tensor.repeat",""
"torch.Tensor.repeat_interleave",""
"torch.Tensor.requires_grad",""
"torch.Tensor.requires_grad_",""
"torch.Tensor.reshape","numpy.ndarray.reshape"
"torch.Tensor.reshape_as",""
"torch.Tensor.resize",""
"torch.Tensor.resize_","numpy.ndarray.resize"
"torch.Tensor.resize_as",""
"torch.Tensor.resize_as_",""
"torch.Tensor.retain_grad",""
"torch.Tensor.rfft",""
"torch.Tensor.roll",""
"torch.Tensor.rot90",""
"torch.Tensor.round","numpy.ndarray.round"
"torch.Tensor.round_","numpy.ndarray.round"
"torch.Tensor.rsqrt",""
"torch.Tensor.rsqrt_",""
"torch.Tensor.scatter",""
"torch.Tensor.scatter_",""
"torch.Tensor.scatter_add",""
"torch.Tensor.scatter_add_",""
"torch.Tensor.select",""
"torch.Tensor.set_",""
"torch.Tensor.shape","numpy.ndarray.shape"
"torch.Tensor.share_memory_",""
"torch.Tensor.short",""
"torch.Tensor.sigmoid",""
"torch.Tensor.sigmoid_",""
"torch.Tensor.sign",""
"torch.Tensor.sign_",""
"torch.Tensor.sin",""
"torch.Tensor.sin_",""
"torch.Tensor.sinh",""
"torch.Tensor.sinh_",""
"torch.Tensor.size",""
"torch.Tensor.slogdet",""
"torch.Tensor.smm",""
"torch.Tensor.softmax",""
"torch.Tensor.solve",""
"torch.Tensor.sort","numpy.ndarray.sort"
"torch.Tensor.sparse_dim",""
"torch.Tensor.sparse_mask",""
"torch.Tensor.sparse_resize_",""
"torch.Tensor.sparse_resize_and_clear_",""
"torch.Tensor.split",""
"torch.Tensor.split_with_sizes",""
"torch.Tensor.sqrt",""
"torch.Tensor.sqrt_",""
"torch.Tensor.square",""
"torch.Tensor.square_",""
"torch.Tensor.squeeze",""
"torch.Tensor.squeeze_","numpy.ndarray.squeeze"
"torch.Tensor.sspaddmm",""
"torch.Tensor.std","numpy.ndarray.std"
"torch.Tensor.stft",""
"torch.Tensor.storage",""
"torch.Tensor.storage_offset",""
"torch.Tensor.storage_type",""
"torch.Tensor.stride",""
"torch.Tensor.sub",""
"torch.Tensor.sub_",""
"torch.Tensor.sum","numpy.ndarray.sum"
"torch.Tensor.sum_to_size",""
"torch.Tensor.svd",""
"torch.Tensor.symeig",""
"torch.Tensor.t",""
"torch.Tensor.t_",""
"torch.Tensor.take","numpy.ndarray.take"
"torch.Tensor.tan",""
"torch.Tensor.tan_",""
"torch.Tensor.tanh",""
"torch.Tensor.tanh_",""
"torch.Tensor.to",""
"torch.Tensor.to_dense",""
"torch.Tensor.to_mkldnn",""
"torch.Tensor.to_sparse",""
"torch.Tensor.tolist","numpy.ndarray.tolist"
"torch.Tensor.topk",""
"torch.Tensor.trace","numpy.ndarray.trace"
"torch.Tensor.transpose","numpy.ndarray.transpose"
"torch.Tensor.transpose_",""
"torch.Tensor.triangular_solve",""
"torch.Tensor.tril",""
"torch.Tensor.tril_",""
"torch.Tensor.triu",""
"torch.Tensor.triu_",""
"torch.Tensor.true_divide",""
"torch.Tensor.true_divide_",""
"torch.Tensor.trunc",""
"torch.Tensor.trunc_",""
"torch.Tensor.type",""
"torch.Tensor.type_as",""
"torch.Tensor.unbind",""
"torch.Tensor.unflatten",""
"torch.Tensor.unfold",""
"torch.Tensor.uniform_",""
"torch.Tensor.unique",""
"torch.Tensor.unique_consecutive",""
"torch.Tensor.unsqueeze",""
"torch.Tensor.unsqueeze_",""
"torch.Tensor.values",""
"torch.Tensor.var","numpy.ndarray.var"
"torch.Tensor.view","numpy.ndarray.view"
"torch.Tensor.view_as",""
"torch.Tensor.volatile",""
"torch.Tensor.where",""
"torch.Tensor.zero_",""
