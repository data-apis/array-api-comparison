[{"name":"numpy.Inf","description":"IEEE 754 floating point representation of (positive) infinity.","signature":"numpy.Inf","url":"https://docs.scipy.org/doc/numpy/reference/constants.html#numpy.e"},{"name":"numpy.Inf","description":"IEEE 754 floating point representation of (positive) infinity.","signature":"numpy.Inf","url":"https://docs.scipy.org/doc/numpy/reference/constants.html#numpy.euler_gamma"},{"name":"numpy.Inf","description":"IEEE 754 floating point representation of (positive) infinity.","signature":"numpy.Inf","url":"https://docs.scipy.org/doc/numpy/reference/constants.html#numpy.Inf"},{"name":"numpy.Inf","description":"IEEE 754 floating point representation of (positive) infinity.","signature":"numpy.Inf","url":"https://docs.scipy.org/doc/numpy/reference/constants.html#numpy.inf"},{"name":"numpy.Inf","description":"IEEE 754 floating point representation of (positive) infinity.","signature":"numpy.Inf","url":"https://docs.scipy.org/doc/numpy/reference/constants.html#numpy.Infinity"},{"name":"numpy.Inf","description":"IEEE 754 floating point representation of (positive) infinity.","signature":"numpy.Inf","url":"https://docs.scipy.org/doc/numpy/reference/constants.html#numpy.infty"},{"name":"numpy.Inf","description":"IEEE 754 floating point representation of (positive) infinity.","signature":"numpy.Inf","url":"https://docs.scipy.org/doc/numpy/reference/constants.html#numpy.NAN"},{"name":"numpy.Inf","description":"IEEE 754 floating point representation of (positive) infinity.","signature":"numpy.Inf","url":"https://docs.scipy.org/doc/numpy/reference/constants.html#numpy.NaN"},{"name":"numpy.Inf","description":"IEEE 754 floating point representation of (positive) infinity.","signature":"numpy.Inf","url":"https://docs.scipy.org/doc/numpy/reference/constants.html#numpy.nan"},{"name":"numpy.Inf","description":"IEEE 754 floating point representation of (positive) infinity.","signature":"numpy.Inf","url":"https://docs.scipy.org/doc/numpy/reference/constants.html#numpy.newaxis"},{"name":"numpy.Inf","description":"IEEE 754 floating point representation of (positive) infinity.","signature":"numpy.Inf","url":"https://docs.scipy.org/doc/numpy/reference/constants.html#numpy.NINF"},{"name":"numpy.Inf","description":"IEEE 754 floating point representation of (positive) infinity.","signature":"numpy.Inf","url":"https://docs.scipy.org/doc/numpy/reference/constants.html#numpy.NZERO"},{"name":"numpy.Inf","description":"IEEE 754 floating point representation of (positive) infinity.","signature":"numpy.Inf","url":"https://docs.scipy.org/doc/numpy/reference/constants.html#numpy.pi"},{"name":"numpy.Inf","description":"IEEE 754 floating point representation of (positive) infinity.","signature":"numpy.Inf","url":"https://docs.scipy.org/doc/numpy/reference/constants.html#numpy.PINF"},{"name":"numpy.Inf","description":"IEEE 754 floating point representation of (positive) infinity.","signature":"numpy.Inf","url":"https://docs.scipy.org/doc/numpy/reference/constants.html#numpy.PZERO"},{"name":"numpy.absolute","description":"Calculate the absolute value element-wise.","signature":"numpy.absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'absolute'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.absolute.html#numpy.absolute"},{"name":"numpy.add","description":"Add arguments element-wise.","signature":"numpy.add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'add'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.add.html#numpy.add"},{"name":"numpy.all","description":"Test whether all array elements along a given axis evaluate to True.","signature":"numpy.all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.all.html#numpy.all"},{"name":"numpy.allclose","description":"Returns True if two arrays are element-wise equal within a tolerance.","signature":"numpy.allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.allclose.html#numpy.allclose"},{"name":"numpy.amax","description":"Return the maximum of an array or maximum along an axis.","signature":"numpy.amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html#numpy.amax"},{"name":"numpy.amin","description":"Return the minimum of an array or minimum along an axis.","signature":"numpy.amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.amin.html#numpy.amin"},{"name":"numpy.angle","description":"Return the angle of the complex argument.","signature":"numpy.angle(z, deg=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.angle.html#numpy.angle"},{"name":"numpy.any","description":"Test whether any array element along a given axis evaluates to True.","signature":"numpy.any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.any.html#numpy.any"},{"name":"numpy.append","description":"Append values to the end of an array.","signature":"numpy.append(arr, values, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.append.html#numpy.append"},{"name":"numpy.apply_along_axis","description":"Apply a function to 1-D slices along the given axis.","signature":"numpy.apply_along_axis(func1d, axis, arr, *args, **kwargs)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.apply_along_axis.html#numpy.apply_along_axis"},{"name":"numpy.apply_over_axes","description":"Apply a function repeatedly over multiple axes.","signature":"numpy.apply_over_axes(func, a, axes)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.apply_over_axes.html#numpy.apply_over_axes"},{"name":"numpy.arange","description":"Return evenly spaced values within a given interval.","signature":"numpy.arange([start, ]stop, [step, ]dtype=None, *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html#numpy.arange"},{"name":"numpy.arccos","description":"Trigonometric inverse cosine, element-wise.","signature":"numpy.arccos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arccos'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arccos.html#numpy.arccos"},{"name":"numpy.arccosh","description":"Inverse hyperbolic cosine, element-wise.","signature":"numpy.arccosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arccosh'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arccosh.html#numpy.arccosh"},{"name":"numpy.arcsin","description":"Inverse sine, element-wise.","signature":"numpy.arcsin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arcsin'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arcsin.html#numpy.arcsin"},{"name":"numpy.arcsinh","description":"Inverse hyperbolic sine element-wise.","signature":"numpy.arcsinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arcsinh'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arcsinh.html#numpy.arcsinh"},{"name":"numpy.arctan","description":"Trigonometric inverse tangent, element-wise.","signature":"numpy.arctan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arctan'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arctan.html#numpy.arctan"},{"name":"numpy.arctan2","description":"Element-wise arc tangent of x1/x2 choosing the quadrant correctly.","signature":"numpy.arctan2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arctan2'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arctan2.html#numpy.arctan2"},{"name":"numpy.arctanh","description":"Inverse hyperbolic tangent element-wise.","signature":"numpy.arctanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arctanh'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arctanh.html#numpy.arctanh"},{"name":"numpy.argmax","description":"Returns the indices of the maximum values along an axis.","signature":"numpy.argmax(a, axis=None, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmax.html#numpy.argmax"},{"name":"numpy.argmin","description":"Returns the indices of the minimum values along an axis.","signature":"numpy.argmin(a, axis=None, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmin.html#numpy.argmin"},{"name":"numpy.argpartition","description":"Perform an indirect partition along the given axis using the algorithm specified by the kind keyword. It returns an array of indices of the same shape as a that index data along the given axis in partitioned order.","signature":"numpy.argpartition(a, kth, axis=-1, kind='introselect', order=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.argpartition.html#numpy.argpartition"},{"name":"numpy.argsort","description":"Returns the indices that would sort an array.","signature":"numpy.argsort(a, axis=-1, kind=None, order=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.argsort.html#numpy.argsort"},{"name":"numpy.argwhere","description":"Find the indices of array elements that are non-zero, grouped by element.","signature":"numpy.argwhere(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.argwhere.html#numpy.argwhere"},{"name":"numpy.around","description":"Evenly round to the given number of decimals.","signature":"numpy.around(a, decimals=0, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.around.html#numpy.around"},{"name":"numpy.array","description":"Create an array.","signature":"numpy.array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html#numpy.array"},{"name":"numpy.array2string","description":"Return a string representation of an array.","signature":"numpy.array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.array2string.html#numpy.array2string"},{"name":"numpy.array_equal","description":"True if two arrays have the same shape and elements, False otherwise.","signature":"numpy.array_equal(a1, a2, equal_nan=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.array_equal.html#numpy.array_equal"},{"name":"numpy.array_equiv","description":"Returns True if input arrays are shape consistent and all elements equal.","signature":"numpy.array_equiv(a1, a2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.array_equiv.html#numpy.array_equiv"},{"name":"numpy.array_repr","description":"Return the string representation of an array.","signature":"numpy.array_repr(arr, max_line_width=None, precision=None, suppress_small=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.array_repr.html#numpy.array_repr"},{"name":"numpy.array_split","description":"Split an array into multiple sub-arrays.","signature":"numpy.array_split(ary, indices_or_sections, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.array_split.html#numpy.array_split"},{"name":"numpy.array_str","description":"Return a string representation of the data in an array.","signature":"numpy.array_str(a, max_line_width=None, precision=None, suppress_small=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.array_str.html#numpy.array_str"},{"name":"numpy.asanyarray","description":"Convert the input to an ndarray, but pass ndarray subclasses through.","signature":"numpy.asanyarray(a, dtype=None, order=None, *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.asanyarray.html#numpy.asanyarray"},{"name":"numpy.asarray","description":"Convert the input to an array.","signature":"numpy.asarray(a, dtype=None, order=None, *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.asarray.html#numpy.asarray"},{"name":"numpy.asarray_chkfinite","description":"Convert the input to an array, checking for NaNs or Infs.","signature":"numpy.asarray_chkfinite(a, dtype=None, order=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.asarray_chkfinite.html#numpy.asarray_chkfinite"},{"name":"numpy.ascontiguousarray","description":"Return a contiguous array (ndim >= 1) in memory (C order).","signature":"numpy.ascontiguousarray(a, dtype=None, *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ascontiguousarray.html#numpy.ascontiguousarray"},{"name":"numpy.asfarray","description":"Return an array converted to a float type.","signature":"numpy.asfarray(a, dtype=<class 'numpy.double'>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.asfarray.html#numpy.asfarray"},{"name":"numpy.asfortranarray","description":"Return an array (ndim >= 1) laid out in Fortran order in memory.","signature":"numpy.asfortranarray(a, dtype=None, *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.asfortranarray.html#numpy.asfortranarray"},{"name":"numpy.asmatrix","description":"Interpret the input as a matrix.","signature":"numpy.asmatrix(data, dtype=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.asmatrix.html#numpy.asmatrix"},{"name":"numpy.asscalar","description":"Convert an array of size 1 to its scalar equivalent.","signature":"numpy.asscalar(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.asscalar.html#numpy.asscalar"},{"name":"numpy.atleast_1d","description":"Convert inputs to arrays with at least one dimension.","signature":"numpy.atleast_1d(*arys)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_1d.html#numpy.atleast_1d"},{"name":"numpy.atleast_2d","description":"View inputs as arrays with at least two dimensions.","signature":"numpy.atleast_2d(*arys)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_2d.html#numpy.atleast_2d"},{"name":"numpy.atleast_3d","description":"View inputs as arrays with at least three dimensions.","signature":"numpy.atleast_3d(*arys)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_3d.html#numpy.atleast_3d"},{"name":"numpy.average","description":"Compute the weighted average along the specified axis.","signature":"numpy.average(a, axis=None, weights=None, returned=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.average.html#numpy.average"},{"name":"numpy.bartlett","description":"Return the Bartlett window.","signature":"numpy.bartlett(M)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.bartlett.html#numpy.bartlett"},{"name":"numpy.base_repr","description":"Return a string representation of a number in the given base system.","signature":"numpy.base_repr(number, base=2, padding=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.base_repr.html#numpy.base_repr"},{"name":"numpy.binary_repr","description":"Return the binary representation of the input number as a string.","signature":"numpy.binary_repr(num, width=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.binary_repr.html#numpy.binary_repr"},{"name":"numpy.bincount","description":"Count number of occurrences of each value in array of non-negative ints.","signature":"numpy.bincount(x, weights=None, minlength=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.bincount.html#numpy.bincount"},{"name":"numpy.bitwise_and","description":"Compute the bit-wise AND of two arrays element-wise.","signature":"numpy.bitwise_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'bitwise_and'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.bitwise_and.html#numpy.bitwise_and"},{"name":"numpy.bitwise_or","description":"Compute the bit-wise OR of two arrays element-wise.","signature":"numpy.bitwise_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'bitwise_or'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.bitwise_or.html#numpy.bitwise_or"},{"name":"numpy.bitwise_xor","description":"Compute the bit-wise XOR of two arrays element-wise.","signature":"numpy.bitwise_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'bitwise_xor'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.bitwise_xor.html#numpy.bitwise_xor"},{"name":"numpy.blackman","description":"Return the Blackman window.","signature":"numpy.blackman(M)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.blackman.html#numpy.blackman"},{"name":"numpy.block","description":"Assemble an nd-array from nested lists of blocks.","signature":"numpy.block(arrays)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.block.html#numpy.block"},{"name":"numpy.bmat","description":"Build a matrix object from a string, nested sequence, or array.","signature":"numpy.bmat(obj, ldict=None, gdict=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.bmat.html#numpy.bmat"},{"name":"numpy.broadcast_arrays","description":"Broadcast any number of arrays against each other.","signature":"numpy.broadcast_arrays(*args, subok=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays"},{"name":"numpy.broadcast_shapes","description":"Broadcast the input shapes into a single shape.","signature":"numpy.broadcast_shapes(*args)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_shapes.html#numpy.broadcast_shapes"},{"name":"numpy.broadcast_to","description":"Broadcast an array to a new shape.","signature":"numpy.broadcast_to(array, shape, subok=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_to.html#numpy.broadcast_to"},{"name":"numpy.busday_count","description":"Counts the number of valid days between begindates and enddates, not including the day of enddates.","signature":"numpy.busday_count(begindates, enddates, weekmask='1111100', holidays=[], busdaycal=None, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.busday_count.html#numpy.busday_count"},{"name":"numpy.busday_offset","description":"First adjusts the date to fall on a valid day according to the roll rule, then applies offsets to the given dates counted in valid days.","signature":"numpy.busday_offset(dates, offsets, roll='raise', weekmask='1111100', holidays=None, busdaycal=None, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.busday_offset.html#numpy.busday_offset"},{"name":"numpy.byte_bounds","description":"Returns pointers to the end-points of an array.","signature":"numpy.byte_bounds(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.byte_bounds.html#numpy.byte_bounds"},{"name":"numpy.c_ = <numpy.lib.index_tricks.CClass object>","description":"Translates slice objects to concatenation along the second axis.","signature":"numpy.c_ = <numpy.lib.index_tricks.CClass object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.c_.html#numpy.c_"},{"name":"numpy.can_cast","description":"Returns True if cast between data types can occur according to the casting rule.  If from is a scalar or array scalar, also returns True if the scalar value can be cast without overflow or truncation to an integer.","signature":"numpy.can_cast(from_, to, casting='safe')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.can_cast.html#numpy.can_cast"},{"name":"numpy.cbrt","description":"Return the cube-root of an array, element-wise.","signature":"numpy.cbrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'cbrt'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.cbrt.html#numpy.cbrt"},{"name":"numpy.ceil","description":"Return the ceiling of the input, element-wise.","signature":"numpy.ceil(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'ceil'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ceil.html#numpy.ceil"},{"name":"numpy.char.add","description":"Return element-wise string concatenation for two arrays of str or unicode.","signature":"numpy.char.add(x1, x2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.add.html#numpy.char.add"},{"name":"numpy.char.array","description":"Create a chararray.","signature":"numpy.char.array(obj, itemsize=None, copy=True, unicode=None, order=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.array.html#numpy.char.array"},{"name":"numpy.char.asarray","description":"Convert the input to a chararray, copying the data only if necessary.","signature":"numpy.char.asarray(obj, itemsize=None, unicode=None, order=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.asarray.html#numpy.char.asarray"},{"name":"numpy.char.capitalize","description":"Return a copy of a with only the first character of each element capitalized.","signature":"numpy.char.capitalize(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.capitalize.html#numpy.char.capitalize"},{"name":"numpy.char.center","description":"Return a copy of a with its elements centered in a string of length width.","signature":"numpy.char.center(a, width, fillchar=' ')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.center.html#numpy.char.center"},{"name":"numpy.char.compare_chararrays","description":"Performs element-wise comparison of two string arrays using the comparison operator specified by cmp_op.","signature":"numpy.char.compare_chararrays(a, b, cmp_op, rstrip)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.compare_chararrays.html#numpy.char.compare_chararrays"},{"name":"numpy.char.count","description":"Returns an array with the number of non-overlapping occurrences of substring sub in the range [start, end].","signature":"numpy.char.count(a, sub, start=0, end=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.count.html#numpy.char.count"},{"name":"numpy.char.decode","description":"Calls str.decode element-wise.","signature":"numpy.char.decode(a, encoding=None, errors=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.decode.html#numpy.char.decode"},{"name":"numpy.char.encode","description":"Calls str.encode element-wise.","signature":"numpy.char.encode(a, encoding=None, errors=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.encode.html#numpy.char.encode"},{"name":"numpy.char.endswith","description":"Returns a boolean array which is True where the string element in a ends with suffix, otherwise False.","signature":"numpy.char.endswith(a, suffix, start=0, end=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.endswith.html#numpy.char.endswith"},{"name":"numpy.char.equal","description":"Return (x1 == x2) element-wise.","signature":"numpy.char.equal(x1, x2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.equal.html#numpy.char.equal"},{"name":"numpy.char.expandtabs","description":"Return a copy of each string element where all tab characters are replaced by one or more spaces.","signature":"numpy.char.expandtabs(a, tabsize=8)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.expandtabs.html#numpy.char.expandtabs"},{"name":"numpy.char.find","description":"For each element, return the lowest index in the string where substring sub is found.","signature":"numpy.char.find(a, sub, start=0, end=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.find.html#numpy.char.find"},{"name":"numpy.char.greater","description":"Return (x1 > x2) element-wise.","signature":"numpy.char.greater(x1, x2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.greater.html#numpy.char.greater"},{"name":"numpy.char.greater_equal","description":"Return (x1 >= x2) element-wise.","signature":"numpy.char.greater_equal(x1, x2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.greater_equal.html#numpy.char.greater_equal"},{"name":"numpy.char.index","description":"Like find, but raises ValueError when the substring is not found.","signature":"numpy.char.index(a, sub, start=0, end=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.index.html#numpy.char.index"},{"name":"numpy.char.isalnum","description":"Returns true for each element if all characters in the string are alphanumeric and there is at least one character, false otherwise.","signature":"numpy.char.isalnum(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.isalnum.html#numpy.char.isalnum"},{"name":"numpy.char.isalpha","description":"Returns true for each element if all characters in the string are alphabetic and there is at least one character, false otherwise.","signature":"numpy.char.isalpha(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.isalpha.html#numpy.char.isalpha"},{"name":"numpy.char.isdecimal","description":"For each element, return True if there are only decimal characters in the element.","signature":"numpy.char.isdecimal(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.isdecimal.html#numpy.char.isdecimal"},{"name":"numpy.char.isdigit","description":"Returns true for each element if all characters in the string are digits and there is at least one character, false otherwise.","signature":"numpy.char.isdigit(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.isdigit.html#numpy.char.isdigit"},{"name":"numpy.char.islower","description":"Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise.","signature":"numpy.char.islower(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.islower.html#numpy.char.islower"},{"name":"numpy.char.isnumeric","description":"For each element, return True if there are only numeric characters in the element.","signature":"numpy.char.isnumeric(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.isnumeric.html#numpy.char.isnumeric"},{"name":"numpy.char.isspace","description":"Returns true for each element if there are only whitespace characters in the string and there is at least one character, false otherwise.","signature":"numpy.char.isspace(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.isspace.html#numpy.char.isspace"},{"name":"numpy.char.istitle","description":"Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise.","signature":"numpy.char.istitle(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.istitle.html#numpy.char.istitle"},{"name":"numpy.char.isupper","description":"Returns true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise.","signature":"numpy.char.isupper(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.isupper.html#numpy.char.isupper"},{"name":"numpy.char.join","description":"Return a string which is the concatenation of the strings in the sequence seq.","signature":"numpy.char.join(sep, seq)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.join.html#numpy.char.join"},{"name":"numpy.char.less","description":"Return (x1 < x2) element-wise.","signature":"numpy.char.less(x1, x2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.less.html#numpy.char.less"},{"name":"numpy.char.less_equal","description":"Return (x1 <= x2) element-wise.","signature":"numpy.char.less_equal(x1, x2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.less_equal.html#numpy.char.less_equal"},{"name":"numpy.char.ljust","description":"Return an array with the elements of a left-justified in a string of length width.","signature":"numpy.char.ljust(a, width, fillchar=' ')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.ljust.html#numpy.char.ljust"},{"name":"numpy.char.lower","description":"Return an array with the elements converted to lowercase.","signature":"numpy.char.lower(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.lower.html#numpy.char.lower"},{"name":"numpy.char.lstrip","description":"For each element in a, return a copy with the leading characters removed.","signature":"numpy.char.lstrip(a, chars=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.lstrip.html#numpy.char.lstrip"},{"name":"numpy.char.mod","description":"Return (a % i), that is pre-Python 2.6 string formatting (interpolation), element-wise for a pair of array_likes of str or unicode.","signature":"numpy.char.mod(a, values)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.mod.html#numpy.char.mod"},{"name":"numpy.char.multiply","description":"Return (a * i), that is string multiple concatenation, element-wise.","signature":"numpy.char.multiply(a, i)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.multiply.html#numpy.char.multiply"},{"name":"numpy.char.not_equal","description":"Return (x1 != x2) element-wise.","signature":"numpy.char.not_equal(x1, x2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.not_equal.html#numpy.char.not_equal"},{"name":"numpy.char.partition","description":"Partition each element in a around sep.","signature":"numpy.char.partition(a, sep)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.partition.html#numpy.char.partition"},{"name":"numpy.char.replace","description":"For each element in a, return a copy of the string with all occurrences of substring old replaced by new.","signature":"numpy.char.replace(a, old, new, count=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.replace.html#numpy.char.replace"},{"name":"numpy.char.rfind","description":"For each element in a, return the highest index in the string where substring sub is found, such that sub is contained within [start, end].","signature":"numpy.char.rfind(a, sub, start=0, end=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.rfind.html#numpy.char.rfind"},{"name":"numpy.char.rindex","description":"Like rfind, but raises ValueError when the substring sub is not found.","signature":"numpy.char.rindex(a, sub, start=0, end=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.rindex.html#numpy.char.rindex"},{"name":"numpy.char.rjust","description":"Return an array with the elements of a right-justified in a string of length width.","signature":"numpy.char.rjust(a, width, fillchar=' ')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.rjust.html#numpy.char.rjust"},{"name":"numpy.char.rpartition","description":"Partition (split) each element around the right-most separator.","signature":"numpy.char.rpartition(a, sep)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.rpartition.html#numpy.char.rpartition"},{"name":"numpy.char.rsplit","description":"For each element in a, return a list of the words in the string, using sep as the delimiter string.","signature":"numpy.char.rsplit(a, sep=None, maxsplit=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.rsplit.html#numpy.char.rsplit"},{"name":"numpy.char.rstrip","description":"For each element in a, return a copy with the trailing characters removed.","signature":"numpy.char.rstrip(a, chars=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.rstrip.html#numpy.char.rstrip"},{"name":"numpy.char.split","description":"For each element in a, return a list of the words in the string, using sep as the delimiter string.","signature":"numpy.char.split(a, sep=None, maxsplit=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.split.html#numpy.char.split"},{"name":"numpy.char.splitlines","description":"For each element in a, return a list of the lines in the element, breaking at line boundaries.","signature":"numpy.char.splitlines(a, keepends=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.splitlines.html#numpy.char.splitlines"},{"name":"numpy.char.startswith","description":"Returns a boolean array which is True where the string element in a starts with prefix, otherwise False.","signature":"numpy.char.startswith(a, prefix, start=0, end=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.startswith.html#numpy.char.startswith"},{"name":"numpy.char.str_len","description":"Return len(a) element-wise.","signature":"numpy.char.str_len(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.str_len.html#numpy.char.str_len"},{"name":"numpy.char.strip","description":"For each element in a, return a copy with the leading and trailing characters removed.","signature":"numpy.char.strip(a, chars=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.strip.html#numpy.char.strip"},{"name":"numpy.char.swapcase","description":"Return element-wise a copy of the string with uppercase characters converted to lowercase and vice versa.","signature":"numpy.char.swapcase(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.swapcase.html#numpy.char.swapcase"},{"name":"numpy.char.title","description":"Return element-wise title cased version of string or unicode.","signature":"numpy.char.title(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.title.html#numpy.char.title"},{"name":"numpy.char.translate","description":"For each element in a, return a copy of the string where all characters occurring in the optional argument deletechars are removed, and the remaining characters have been mapped through the given translation table.","signature":"numpy.char.translate(a, table, deletechars=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.translate.html#numpy.char.translate"},{"name":"numpy.char.upper","description":"Return an array with the elements converted to uppercase.","signature":"numpy.char.upper(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.upper.html#numpy.char.upper"},{"name":"numpy.char.zfill","description":"Return the numeric string left-filled with zeros","signature":"numpy.char.zfill(a, width)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.zfill.html#numpy.char.zfill"},{"name":"numpy.choose","description":"Construct an array from an index array and a set of arrays to choose from.","signature":"numpy.choose(a, choices, out=None, mode='raise')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.choose.html#numpy.choose"},{"name":"numpy.class numpy.DataSource","description":"A generic data source file (file, http, ftp, …).","signature":"numpy.class numpy.DataSource(destpath='.')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.DataSource.html#numpy.DataSource"},{"name":"numpy.class numpy.MachAr","description":"Diagnosing machine parameters.","signature":"numpy.class numpy.MachAr(float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda>>, title='Python floating point number')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.MachAr.html#numpy.MachAr"},{"name":"numpy.class numpy.broadcast","description":"Produce an object that mimics broadcasting.","signature":"numpy.class numpy.broadcast","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast.html#numpy.broadcast"},{"name":"numpy.class numpy.busdaycalendar","description":"A business day calendar object that efficiently stores information defining valid days for the busday family of functions.","signature":"numpy.class numpy.busdaycalendar(weekmask='1111100', holidays=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.busdaycalendar.html#numpy.busdaycalendar"},{"name":"numpy.class numpy.char.chararray","description":"Provides a convenient view on arrays of string and unicode values.","signature":"numpy.class numpy.char.chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.chararray.html#numpy.char.chararray"},{"name":"numpy.class numpy.chararray","description":"Provides a convenient view on arrays of string and unicode values.","signature":"numpy.class numpy.chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.chararray.html#numpy.chararray"},{"name":"numpy.class numpy.distutils.core.Extension","description":" Parameters  namestrExtension name.  sourceslist of strList of source file locations relative to the top directory of the package.  extra_compile_argslist of strExtra command line arguments to pass to the compiler.  extra_f77_compile_argslist of strExtra command line arguments to pass to the fortran77 compiler.  extra_f90_compile_argslist of strExtra command line arguments to pass to the fortran90 compiler.    ","signature":"numpy.class numpy.distutils.core.Extension(name, sources, include_dirs=None, define_macros=None, undef_macros=None, library_dirs=None, libraries=None, runtime_library_dirs=None, extra_objects=None, extra_compile_args=None, extra_link_args=None, export_symbols=None, swig_opts=None, depends=None, language=None, f2py_options=None, module_dirs=None, extra_f77_compile_args=None, extra_f90_compile_args=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.core.Extension.html#numpy.distutils.core.Extension"},{"name":"numpy.class numpy.distutils.misc_util.Configuration","description":"Construct a configuration instance for the given package name. If parent_name is not None, then construct the package as a sub-package of the parent_name package. If top_path and package_path are None then they are assumed equal to the path of the file this instance was created in. The setup.py files in the numpy distribution are good examples of how to use the Configuration instance.","signature":"numpy.class numpy.distutils.misc_util.Configuration(package_name=None, parent_name=None, top_path=None, package_path=None, **attrs)","url":"https://docs.scipy.org/doc/numpy/reference/distutils.html#numpy.distutils.misc_util.Configuration"},{"name":"numpy.class numpy.dtype","description":" Attributes  alignmentThe required alignment (bytes) of this data-type according to the compiler.  baseReturns dtype for the base element of the subarrays, regardless of their dimension or shape.  byteorderA character indicating the byte-order of this data-type object.  charA unique character code for each of the 21 different built-in types.  descr__array_interface__ description of the data-type.  fieldsDictionary of named fields defined for this data type, or None.  flagsBit-flags describing how this data type is to be interpreted.  hasobjectBoolean indicating whether this dtype contains any reference-counted objects in any fields or sub-dtypes.  isalignedstructBoolean indicating whether the dtype is a struct which maintains field alignment.  isbuiltinInteger indicating how this dtype relates to the built-in dtypes.  isnativeBoolean indicating whether the byte order of this dtype is native to the platform.  itemsizeThe element size of this data-type object.  kindA character code (one of ‘biufcmMOSUV’) identifying the general kind of data.  metadataEither None or a readonly dictionary of metadata (mappingproxy).  nameA bit-width name for this data-type.  namesOrdered list of field names, or None if there are no fields.  ndimNumber of dimensions of the sub-array if this data type describes a sub-array, and 0 otherwise.  numA unique number for each of the 21 different built-in types.  shapeShape tuple of the sub-array if this data type describes a sub-array, and () otherwise.  strThe array-protocol typestring of this data-type object.  subdtypeTuple (item_dtype, shape) if this dtype describes a sub-array, and None otherwise.  type   ","signature":"numpy.class numpy.dtype","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.dtype.html#numpy.dtype"},{"name":"numpy.class numpy.errstate","description":"Context manager for floating-point error handling.","signature":"numpy.class numpy.errstate(**kwargs)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.errstate.html#numpy.errstate"},{"name":"numpy.class numpy.finfo","description":"Machine limits for floating point types.","signature":"numpy.class numpy.finfo(dtype)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.finfo.html#numpy.finfo"},{"name":"numpy.class numpy.flatiter","description":"Flat iterator object to iterate over arrays.","signature":"numpy.class numpy.flatiter","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.flatiter.html#numpy.flatiter"},{"name":"numpy.class numpy.format_parser","description":"Class to convert formats, names, titles description to a dtype.","signature":"numpy.class numpy.format_parser(formats, names, titles, aligned=False, byteorder=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.format_parser.html#numpy.format_parser"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.bool8"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.bool_"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.byte"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.bytes_"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.cdouble"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.cfloat"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.clongdouble"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.clongfloat"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.complex128"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.complex192"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.complex256"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.complex64"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.complex_"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.complexfloating"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.csingle"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.datetime64"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.double"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.flexible"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.float128"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.float16"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.float32"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.float64"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.float96"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.float_"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.floating"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.generic"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.half"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.inexact"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.int16"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.int32"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.int64"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.int8"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.int_"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.intc"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.integer"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.intp"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.longcomplex"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.longdouble"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.longfloat"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.longlong"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.number"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.object_"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.short"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.signedinteger"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.single"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.singlecomplex"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.str_"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.string_"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.timedelta64"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.ubyte"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.uint"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.uint16"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.uint32"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.uint64"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.uint8"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.uintc"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.uintp"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.ulonglong"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.unicode_"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.unsignedinteger"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.ushort"},{"name":"numpy.class numpy.generic","description":"Base class for numpy scalar types.","signature":"numpy.class numpy.generic","url":"https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#numpy.void"},{"name":"numpy.class numpy.iinfo","description":"Machine limits for integer types.","signature":"numpy.class numpy.iinfo(type)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.iinfo.html#numpy.iinfo"},{"name":"numpy.class numpy.lib.Arrayterator","description":"Buffered iterator for big arrays.","signature":"numpy.class numpy.lib.Arrayterator(var, buf_size=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.Arrayterator.html#numpy.lib.Arrayterator"},{"name":"numpy.class numpy.lib.NumpyVersion","description":"Parse and compare numpy version strings.","signature":"numpy.class numpy.lib.NumpyVersion(vstring)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.NumpyVersion.html#numpy.lib.NumpyVersion"},{"name":"numpy.class numpy.lib.mixins.NDArrayOperatorsMixin","description":"Mixin defining all operator special methods using __array_ufunc__.","signature":"numpy.class numpy.lib.mixins.NDArrayOperatorsMixin","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.mixins.NDArrayOperatorsMixin.html#numpy.lib.mixins.NDArrayOperatorsMixin"},{"name":"numpy.class numpy.lib.user_array.container","description":"Standard container-class for easy multiple-inheritance.","signature":"numpy.class numpy.lib.user_array.container(data, dtype=None, copy=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.user_array.container.html#numpy.lib.user_array.container"},{"name":"numpy.class numpy.matrix","description":" Note It is no longer recommended to use this class, even for linear algebra. Instead use regular arrays. The class may be removed in the future. ","signature":"numpy.class numpy.matrix(data, dtype=None, copy=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matrix.html#numpy.matrix"},{"name":"numpy.class numpy.memmap","description":"Create a memory-map to an array stored in a binary file on disk.","signature":"numpy.class numpy.memmap","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.memmap.html#numpy.memmap"},{"name":"numpy.class numpy.ndarray","description":"An array object represents a multidimensional, homogeneous array of fixed-size items.  An associated data-type object describes the format of each element in the array (its byte-order, how many bytes it occupies in memory, whether it is an integer, a floating point number, or something else, etc.)","signature":"numpy.class numpy.ndarray(shape, dtype=float, buffer=None, offset=0, strides=None, order=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.html#numpy.ndarray"},{"name":"numpy.class numpy.ndenumerate","description":"Multidimensional index iterator.","signature":"numpy.class numpy.ndenumerate(arr)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndenumerate.html#numpy.ndenumerate"},{"name":"numpy.class numpy.ndindex","description":"An N-dimensional iterator object to index arrays.","signature":"numpy.class numpy.ndindex(*shape)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndindex.html#numpy.ndindex"},{"name":"numpy.class numpy.nditer","description":"Efficient multi-dimensional iterator object to iterate over arrays. To get started using this object, see the introductory guide to array iteration.","signature":"numpy.class numpy.nditer(op, flags=None, op_flags=None, op_dtypes=None, order='K', casting='safe', op_axes=None, itershape=None, buffersize=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nditer.html#numpy.nditer"},{"name":"numpy.class numpy.poly1d","description":"A one-dimensional polynomial class.","signature":"numpy.class numpy.poly1d(c_or_r, r=False, variable=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.poly1d.html#numpy.poly1d"},{"name":"numpy.class numpy.polynomial.chebyshev.Chebyshev","description":"A Chebyshev series class.","signature":"numpy.class numpy.polynomial.chebyshev.Chebyshev(coef, domain=None, window=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.Chebyshev.html#numpy.polynomial.chebyshev.Chebyshev"},{"name":"numpy.class numpy.polynomial.hermite.Hermite","description":"An Hermite series class.","signature":"numpy.class numpy.polynomial.hermite.Hermite(coef, domain=None, window=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.Hermite.html#numpy.polynomial.hermite.Hermite"},{"name":"numpy.class numpy.polynomial.hermite_e.HermiteE","description":"An HermiteE series class.","signature":"numpy.class numpy.polynomial.hermite_e.HermiteE(coef, domain=None, window=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.HermiteE.html#numpy.polynomial.hermite_e.HermiteE"},{"name":"numpy.class numpy.polynomial.laguerre.Laguerre","description":"A Laguerre series class.","signature":"numpy.class numpy.polynomial.laguerre.Laguerre(coef, domain=None, window=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.Laguerre.html#numpy.polynomial.laguerre.Laguerre"},{"name":"numpy.class numpy.polynomial.legendre.Legendre","description":"A Legendre series class.","signature":"numpy.class numpy.polynomial.legendre.Legendre(coef, domain=None, window=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.Legendre.html#numpy.polynomial.legendre.Legendre"},{"name":"numpy.class numpy.polynomial.polynomial.Polynomial","description":"A power series class.","signature":"numpy.class numpy.polynomial.polynomial.Polynomial(coef, domain=None, window=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial"},{"name":"numpy.class numpy.polynomial.polyutils.PolyBase","description":"Base class for all polynomial types.","signature":"numpy.class numpy.polynomial.polyutils.PolyBase","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polyutils.PolyBase.html#numpy.polynomial.polyutils.PolyBase"},{"name":"numpy.class numpy.random.BitGenerator","description":"Base Class for generic BitGenerators, which provide a stream of random bits based on different algorithms. Must be overridden.","signature":"numpy.class numpy.random.BitGenerator(seed=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator"},{"name":"numpy.class numpy.random.MT19937","description":"Container for the Mersenne Twister pseudo-random number generator.","signature":"numpy.class numpy.random.MT19937(seed=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/bit_generators/mt19937.html#numpy.random.MT19937"},{"name":"numpy.class numpy.random.PCG64","description":"BitGenerator for the PCG-64 pseudo-random number generator.","signature":"numpy.class numpy.random.PCG64(seed=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/bit_generators/pcg64.html#numpy.random.PCG64"},{"name":"numpy.class numpy.random.Philox","description":"Container for the Philox (4x64) pseudo-random number generator.","signature":"numpy.class numpy.random.Philox(seed=None, counter=None, key=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/bit_generators/philox.html#numpy.random.Philox"},{"name":"numpy.class numpy.random.RandomState","description":"Container for the slow Mersenne Twister pseudo-random number generator. Consider using a different BitGenerator with the Generator container instead.","signature":"numpy.class numpy.random.RandomState(seed=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/legacy.html#numpy.random.RandomState"},{"name":"numpy.class numpy.random.SFC64","description":"BitGenerator for Chris Doty-Humphrey’s Small Fast Chaotic PRNG.","signature":"numpy.class numpy.random.SFC64(seed=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/bit_generators/sfc64.html#numpy.random.SFC64"},{"name":"numpy.class numpy.random.SeedSequence","description":"SeedSequence mixes sources of entropy in a reproducible way to set the initial state for independent and very probably non-overlapping BitGenerators.","signature":"numpy.class numpy.random.SeedSequence(entropy=None, *, spawn_key=(), pool_size=4)","url":"https://docs.scipy.org/doc/numpy/reference/random/bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence"},{"name":"numpy.class numpy.recarray","description":"Construct an ndarray that allows field access using attributes.","signature":"numpy.class numpy.recarray","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.recarray.html#numpy.recarray"},{"name":"numpy.class numpy.record","description":"A data-type scalar that allows field access as attribute lookup.","signature":"numpy.class numpy.record","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.record.html#numpy.record"},{"name":"numpy.class numpy.testing.suppress_warnings","description":"Context manager and decorator doing much the same as warnings.catch_warnings.","signature":"numpy.class numpy.testing.suppress_warnings(forwarding_rule='always')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.suppress_warnings.html#numpy.testing.suppress_warnings"},{"name":"numpy.class numpy.ufunc","description":"Functions that operate element by element on whole arrays.","signature":"numpy.class numpy.ufunc","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ufunc.html#numpy.ufunc"},{"name":"numpy.class numpy.vectorize","description":"Generalized function class.","signature":"numpy.class numpy.vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.vectorize.html#numpy.vectorize"},{"name":"numpy.clip","description":"Clip (limit) the values in an array.","signature":"numpy.clip(a, a_min, a_max, out=None, **kwargs)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.clip.html#numpy.clip"},{"name":"numpy.column_stack","description":"Stack 1-D arrays as columns into a 2-D array.","signature":"numpy.column_stack(tup)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.column_stack.html#numpy.column_stack"},{"name":"numpy.common_type","description":"Return a scalar type which is common to the input arrays.","signature":"numpy.common_type(*arrays)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.common_type.html#numpy.common_type"},{"name":"numpy.compress","description":"Return selected slices of an array along given axis.","signature":"numpy.compress(condition, a, axis=None, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.compress.html#numpy.compress"},{"name":"numpy.concatenate","description":"Join a sequence of arrays along an existing axis.","signature":"numpy.concatenate((a1, a2, ...), axis=0, out=None, dtype=None, casting=\"same_kind\")","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html#numpy.concatenate"},{"name":"numpy.conj","description":"Return the complex conjugate, element-wise.","signature":"numpy.conj(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'conjugate'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.conj.html#numpy.conj"},{"name":"numpy.conjugate","description":"Return the complex conjugate, element-wise.","signature":"numpy.conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'conjugate'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.conjugate.html#numpy.conjugate"},{"name":"numpy.convolve","description":"Returns the discrete, linear convolution of two one-dimensional sequences.","signature":"numpy.convolve(a, v, mode='full')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.convolve.html#numpy.convolve"},{"name":"numpy.copy","description":"Return an array copy of the given object.","signature":"numpy.copy(a, order='K', subok=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.copy.html#numpy.copy"},{"name":"numpy.copysign","description":"Change the sign of x1 to that of x2, element-wise.","signature":"numpy.copysign(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'copysign'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.copysign.html#numpy.copysign"},{"name":"numpy.copyto","description":"Copies values from one array to another, broadcasting as necessary.","signature":"numpy.copyto(dst, src, casting='same_kind', where=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.copyto.html#numpy.copyto"},{"name":"numpy.core.defchararray.array","description":"Create a chararray.","signature":"numpy.core.defchararray.array(obj, itemsize=None, copy=True, unicode=None, order=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.core.defchararray.array.html#numpy.core.defchararray.array"},{"name":"numpy.core.defchararray.asarray","description":"Convert the input to a chararray, copying the data only if necessary.","signature":"numpy.core.defchararray.asarray(obj, itemsize=None, unicode=None, order=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.core.defchararray.asarray.html#numpy.core.defchararray.asarray"},{"name":"numpy.core.records.array","description":"Construct a record array from a wide-variety of objects.","signature":"numpy.core.records.array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.core.records.array.html#numpy.core.records.array"},{"name":"numpy.core.records.fromarrays","description":"Create a record array from a (flat) list of arrays","signature":"numpy.core.records.fromarrays(arrayList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.core.records.fromarrays.html#numpy.core.records.fromarrays"},{"name":"numpy.core.records.fromfile","description":"Create an array from binary file data","signature":"numpy.core.records.fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.core.records.fromfile.html#numpy.core.records.fromfile"},{"name":"numpy.core.records.fromrecords","description":"Create a recarray from a list of records in text form.","signature":"numpy.core.records.fromrecords(recList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.core.records.fromrecords.html#numpy.core.records.fromrecords"},{"name":"numpy.core.records.fromstring","description":"Create a record array from binary data","signature":"numpy.core.records.fromstring(datastring, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.core.records.fromstring.html#numpy.core.records.fromstring"},{"name":"numpy.corrcoef","description":"Return Pearson product-moment correlation coefficients.","signature":"numpy.corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.corrcoef.html#numpy.corrcoef"},{"name":"numpy.correlate","description":"Cross-correlation of two 1-dimensional sequences.","signature":"numpy.correlate(a, v, mode='valid')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.correlate.html#numpy.correlate"},{"name":"numpy.cos","description":"Cosine element-wise.","signature":"numpy.cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'cos'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.cos.html#numpy.cos"},{"name":"numpy.cosh","description":"Hyperbolic cosine, element-wise.","signature":"numpy.cosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'cosh'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.cosh.html#numpy.cosh"},{"name":"numpy.count_nonzero","description":"Counts the number of non-zero values in the array a.","signature":"numpy.count_nonzero(a, axis=None, *, keepdims=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.count_nonzero.html#numpy.count_nonzero"},{"name":"numpy.cov","description":"Estimate a covariance matrix, given data and weights.","signature":"numpy.cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.cov.html#numpy.cov"},{"name":"numpy.cross","description":"Return the cross product of two (arrays of) vectors.","signature":"numpy.cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.cross.html#numpy.cross"},{"name":"numpy.ctypeslib.as_array","description":"Create a numpy array from a ctypes array or POINTER.","signature":"numpy.ctypeslib.as_array(obj, shape=None)","url":"https://docs.scipy.org/doc/numpy/reference/routines.ctypeslib.html#numpy.ctypeslib.as_array"},{"name":"numpy.ctypeslib.as_array","description":"Create a numpy array from a ctypes array or POINTER.","signature":"numpy.ctypeslib.as_array(obj, shape=None)","url":"https://docs.scipy.org/doc/numpy/reference/routines.ctypeslib.html#numpy.ctypeslib.as_ctypes"},{"name":"numpy.ctypeslib.as_array","description":"Create a numpy array from a ctypes array or POINTER.","signature":"numpy.ctypeslib.as_array(obj, shape=None)","url":"https://docs.scipy.org/doc/numpy/reference/routines.ctypeslib.html#numpy.ctypeslib.as_ctypes_type"},{"name":"numpy.ctypeslib.as_array","description":"Create a numpy array from a ctypes array or POINTER.","signature":"numpy.ctypeslib.as_array(obj, shape=None)","url":"https://docs.scipy.org/doc/numpy/reference/routines.ctypeslib.html#numpy.ctypeslib.load_library"},{"name":"numpy.ctypeslib.as_array","description":"Create a numpy array from a ctypes array or POINTER.","signature":"numpy.ctypeslib.as_array(obj, shape=None)","url":"https://docs.scipy.org/doc/numpy/reference/routines.ctypeslib.html#numpy.ctypeslib.ndpointer"},{"name":"numpy.cumprod","description":"Return the cumulative product of elements along a given axis.","signature":"numpy.cumprod(a, axis=None, dtype=None, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.cumprod.html#numpy.cumprod"},{"name":"numpy.cumsum","description":"Return the cumulative sum of the elements along a given axis.","signature":"numpy.cumsum(a, axis=None, dtype=None, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.cumsum.html#numpy.cumsum"},{"name":"numpy.datetime_as_string","description":"Convert an array of datetimes into an array of strings.","signature":"numpy.datetime_as_string(arr, unit=None, timezone='naive', casting='same_kind')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.datetime_as_string.html#numpy.datetime_as_string"},{"name":"numpy.datetime_data","description":"Get information about the step size of a date or time type.","signature":"numpy.datetime_data(dtype, /)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.datetime_data.html#numpy.datetime_data"},{"name":"numpy.deg2rad","description":"Convert angles from degrees to radians.","signature":"numpy.deg2rad(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'deg2rad'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.deg2rad.html#numpy.deg2rad"},{"name":"numpy.degrees","description":"Convert angles from radians to degrees.","signature":"numpy.degrees(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'degrees'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.degrees.html#numpy.degrees"},{"name":"numpy.delete","description":"Return a new array with sub-arrays along an axis deleted. For a one dimensional array, this returns those entries not returned by arr[obj].","signature":"numpy.delete(arr, obj, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.delete.html#numpy.delete"},{"name":"numpy.deprecate","description":"Issues a DeprecationWarning, adds warning to old_name’s docstring, rebinds old_name.__name__ and returns the new function object.","signature":"numpy.deprecate(*args, **kwargs)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.deprecate.html#numpy.deprecate"},{"name":"numpy.deprecate_with_doc","description":"","signature":"numpy.deprecate_with_doc(msg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.deprecate_with_doc.html#numpy.deprecate_with_doc"},{"name":"numpy.diag","description":"Extract a diagonal or construct a diagonal array.","signature":"numpy.diag(v, k=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.diag.html#numpy.diag"},{"name":"numpy.diag_indices","description":"Return the indices to access the main diagonal of an array.","signature":"numpy.diag_indices(n, ndim=2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.diag_indices.html#numpy.diag_indices"},{"name":"numpy.diag_indices_from","description":"Return the indices to access the main diagonal of an n-dimensional array.","signature":"numpy.diag_indices_from(arr)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.diag_indices_from.html#numpy.diag_indices_from"},{"name":"numpy.diagflat","description":"Create a two-dimensional array with the flattened input as a diagonal.","signature":"numpy.diagflat(v, k=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.diagflat.html#numpy.diagflat"},{"name":"numpy.diagonal","description":"Return specified diagonals.","signature":"numpy.diagonal(a, offset=0, axis1=0, axis2=1)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.diagonal.html#numpy.diagonal"},{"name":"numpy.diff","description":"Calculate the n-th discrete difference along the given axis.","signature":"numpy.diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.diff.html#numpy.diff"},{"name":"numpy.digitize","description":"Return the indices of the bins to which each value in input array belongs.","signature":"numpy.digitize(x, bins, right=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.digitize.html#numpy.digitize"},{"name":"numpy.disp","description":"Display a message on a device.","signature":"numpy.disp(mesg, device=None, linefeed=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.disp.html#numpy.disp"},{"name":"numpy.distutils.cpuinfo.cpu = <numpy.distutils.cpuinfo.LinuxCPUInfo object>","description":"","signature":"numpy.distutils.cpuinfo.cpu = <numpy.distutils.cpuinfo.LinuxCPUInfo object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.cpuinfo.cpu.html#numpy.distutils.cpuinfo.cpu"},{"name":"numpy.distutils.log.set_verbosity","description":"","signature":"numpy.distutils.log.set_verbosity(v, force=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.log.set_verbosity.html#numpy.distutils.log.set_verbosity"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.all_strings"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.allpath"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.appendpath"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.as_list"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.blue_text"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.cyan_text"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.cyg2win32"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.default_config_dict"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.dict_append"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.dot_join"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.filter_sources"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.generate_config_py"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.get_build_architecture"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.get_cmd"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.get_data_files"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.get_dependencies"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.get_ext_source_files"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.get_frame"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.get_info"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.get_language"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.get_lib_source_files"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.get_mathlibs"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.get_num_build_jobs"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.get_numpy_include_dirs"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.get_pkg_info"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.get_script_files"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.gpaths"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.green_text"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.has_cxx_sources"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.has_f_sources"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.is_local_src_dir"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.is_sequence"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.is_string"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.mingw32"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.minrelpath"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.njoin"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.quote_args"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.red_text"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.terminal_has_colors"},{"name":"numpy.distutils.misc_util.get_numpy_include_dirs","description":"Return a configuration dictionary for usage in configuration() function defined in file setup_<name>.py.","signature":"numpy.distutils.misc_util.get_numpy_include_dirs()","url":"https://docs.scipy.org/doc/numpy/reference/distutils/misc_util.html#numpy.distutils.misc_util.yellow_text"},{"name":"numpy.distutils.system_info.get_info","description":" notfound_action:0 - do nothing 1 - display warning message 2 - raise error  ","signature":"numpy.distutils.system_info.get_info(name, notfound_action=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.system_info.get_info.html#numpy.distutils.system_info.get_info"},{"name":"numpy.distutils.system_info.get_standard_file","description":"Returns a list of files named ‘fname’ from 1) System-wide directory (directory-location of this module) 2) Users HOME directory (os.environ[‘HOME’]) 3) Local directory","signature":"numpy.distutils.system_info.get_standard_file(fname)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.system_info.get_standard_file.html#numpy.distutils.system_info.get_standard_file"},{"name":"numpy.divide","description":"Returns a true division of the inputs, element-wise.","signature":"numpy.divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'true_divide'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.divide.html#numpy.divide"},{"name":"numpy.divmod","description":"Return element-wise quotient and remainder simultaneously.","signature":"numpy.divmod(x1, x2, [out1, out2, ]/, [out=(None, None), ]*, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'divmod'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.divmod.html#numpy.divmod"},{"name":"numpy.dot","description":"Dot product of two arrays. Specifically,","signature":"numpy.dot(a, b, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html#numpy.dot"},{"name":"numpy.dsplit","description":"Split array into multiple sub-arrays along the 3rd axis (depth).","signature":"numpy.dsplit(ary, indices_or_sections)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.dsplit.html#numpy.dsplit"},{"name":"numpy.dstack","description":"Stack arrays in sequence depth wise (along third axis).","signature":"numpy.dstack(tup)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.dstack.html#numpy.dstack"},{"name":"numpy.ediff1d","description":"The differences between consecutive elements of an array.","signature":"numpy.ediff1d(ary, to_end=None, to_begin=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ediff1d.html#numpy.ediff1d"},{"name":"numpy.einsum","description":"Evaluates the Einstein summation convention on the operands.","signature":"numpy.einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.einsum.html#numpy.einsum"},{"name":"numpy.einsum_path","description":"Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays.","signature":"numpy.einsum_path(subscripts, *operands, optimize='greedy')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.einsum_path.html#numpy.einsum_path"},{"name":"numpy.empty","description":"Return a new array of given shape and type, without initializing entries.","signature":"numpy.empty(shape, dtype=float, order='C', *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.empty.html#numpy.empty"},{"name":"numpy.empty_like","description":"Return a new array with the same shape and type as a given array.","signature":"numpy.empty_like(prototype, dtype=None, order='K', subok=True, shape=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.empty_like.html#numpy.empty_like"},{"name":"numpy.equal","description":"Return (x1 == x2) element-wise.","signature":"numpy.equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'equal'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.equal.html#numpy.equal"},{"name":"numpy.exp","description":"Calculate the exponential of all elements in the input array.","signature":"numpy.exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'exp'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.exp.html#numpy.exp"},{"name":"numpy.exp2","description":"Calculate 2**p for all p in the input array.","signature":"numpy.exp2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'exp2'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.exp2.html#numpy.exp2"},{"name":"numpy.expand_dims","description":"Expand the shape of an array.","signature":"numpy.expand_dims(a, axis)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.expand_dims.html#numpy.expand_dims"},{"name":"numpy.expm1","description":"Calculate exp(x) - 1 for all elements in the array.","signature":"numpy.expm1(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'expm1'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.expm1.html#numpy.expm1"},{"name":"numpy.extract","description":"Return the elements of an array that satisfy some condition.","signature":"numpy.extract(condition, arr)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.extract.html#numpy.extract"},{"name":"numpy.eye","description":"Return a 2-D array with ones on the diagonal and zeros elsewhere.","signature":"numpy.eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.eye.html#numpy.eye"},{"name":"numpy.f2py.run_main","description":"Equivalent to running:","signature":"numpy.f2py.run_main(comline_list)","url":"https://docs.scipy.org/doc/numpy/f2py/usage.html#numpy.f2py.compile"},{"name":"numpy.f2py.run_main","description":"Equivalent to running:","signature":"numpy.f2py.run_main(comline_list)","url":"https://docs.scipy.org/doc/numpy/f2py/usage.html#numpy.f2py.run_main"},{"name":"numpy.fabs","description":"Compute the absolute values element-wise.","signature":"numpy.fabs(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'fabs'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fabs.html#numpy.fabs"},{"name":"numpy.fft.fft","description":"Compute the one-dimensional discrete Fourier Transform.","signature":"numpy.fft.fft(a, n=None, axis=-1, norm=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.fft.html#numpy.fft.fft"},{"name":"numpy.fft.fft2","description":"Compute the 2-dimensional discrete Fourier Transform.","signature":"numpy.fft.fft2(a, s=None, axes=(-2, -1), norm=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.fft2.html#numpy.fft.fft2"},{"name":"numpy.fft.fftfreq","description":"Return the Discrete Fourier Transform sample frequencies.","signature":"numpy.fft.fftfreq(n, d=1.0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.fftfreq.html#numpy.fft.fftfreq"},{"name":"numpy.fft.fftn","description":"Compute the N-dimensional discrete Fourier Transform.","signature":"numpy.fft.fftn(a, s=None, axes=None, norm=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.fftn.html#numpy.fft.fftn"},{"name":"numpy.fft.fftshift","description":"Shift the zero-frequency component to the center of the spectrum.","signature":"numpy.fft.fftshift(x, axes=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.fftshift.html#numpy.fft.fftshift"},{"name":"numpy.fft.hfft","description":"Compute the FFT of a signal that has Hermitian symmetry, i.e., a real spectrum.","signature":"numpy.fft.hfft(a, n=None, axis=-1, norm=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.hfft.html#numpy.fft.hfft"},{"name":"numpy.fft.ifft","description":"Compute the one-dimensional inverse discrete Fourier Transform.","signature":"numpy.fft.ifft(a, n=None, axis=-1, norm=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.ifft.html#numpy.fft.ifft"},{"name":"numpy.fft.ifft2","description":"Compute the 2-dimensional inverse discrete Fourier Transform.","signature":"numpy.fft.ifft2(a, s=None, axes=(-2, -1), norm=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.ifft2.html#numpy.fft.ifft2"},{"name":"numpy.fft.ifftn","description":"Compute the N-dimensional inverse discrete Fourier Transform.","signature":"numpy.fft.ifftn(a, s=None, axes=None, norm=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.ifftn.html#numpy.fft.ifftn"},{"name":"numpy.fft.ifftshift","description":"The inverse of fftshift. Although identical for even-length x, the functions differ by one sample for odd-length x.","signature":"numpy.fft.ifftshift(x, axes=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.ifftshift.html#numpy.fft.ifftshift"},{"name":"numpy.fft.ihfft","description":"Compute the inverse FFT of a signal that has Hermitian symmetry.","signature":"numpy.fft.ihfft(a, n=None, axis=-1, norm=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.ihfft.html#numpy.fft.ihfft"},{"name":"numpy.fft.irfft","description":"Computes the inverse of rfft.","signature":"numpy.fft.irfft(a, n=None, axis=-1, norm=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.irfft.html#numpy.fft.irfft"},{"name":"numpy.fft.irfft2","description":"Computes the inverse of rfft2.","signature":"numpy.fft.irfft2(a, s=None, axes=(-2, -1), norm=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.irfft2.html#numpy.fft.irfft2"},{"name":"numpy.fft.irfftn","description":"Computes the inverse of rfftn.","signature":"numpy.fft.irfftn(a, s=None, axes=None, norm=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.irfftn.html#numpy.fft.irfftn"},{"name":"numpy.fft.rfft","description":"Compute the one-dimensional discrete Fourier Transform for real input.","signature":"numpy.fft.rfft(a, n=None, axis=-1, norm=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.rfft.html#numpy.fft.rfft"},{"name":"numpy.fft.rfft2","description":"Compute the 2-dimensional FFT of a real array.","signature":"numpy.fft.rfft2(a, s=None, axes=(-2, -1), norm=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.rfft2.html#numpy.fft.rfft2"},{"name":"numpy.fft.rfftfreq","description":"Return the Discrete Fourier Transform sample frequencies (for usage with rfft, irfft).","signature":"numpy.fft.rfftfreq(n, d=1.0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.rfftfreq.html#numpy.fft.rfftfreq"},{"name":"numpy.fft.rfftn","description":"Compute the N-dimensional discrete Fourier Transform for real input.","signature":"numpy.fft.rfftn(a, s=None, axes=None, norm=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.rfftn.html#numpy.fft.rfftn"},{"name":"numpy.fill_diagonal","description":"Fill the main diagonal of the given array of any dimensionality.","signature":"numpy.fill_diagonal(a, val, wrap=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fill_diagonal.html#numpy.fill_diagonal"},{"name":"numpy.find_common_type","description":"Determine common type following standard coercion rules.","signature":"numpy.find_common_type(array_types, scalar_types)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.find_common_type.html#numpy.find_common_type"},{"name":"numpy.fix","description":"Round to nearest integer towards zero.","signature":"numpy.fix(x, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fix.html#numpy.fix"},{"name":"numpy.flatnonzero","description":"Return indices that are non-zero in the flattened version of a.","signature":"numpy.flatnonzero(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.flatnonzero.html#numpy.flatnonzero"},{"name":"numpy.flip","description":"Reverse the order of elements in an array along the given axis.","signature":"numpy.flip(m, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.flip.html#numpy.flip"},{"name":"numpy.fliplr","description":"Flip array in the left/right direction.","signature":"numpy.fliplr(m)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fliplr.html#numpy.fliplr"},{"name":"numpy.flipud","description":"Flip array in the up/down direction.","signature":"numpy.flipud(m)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.flipud.html#numpy.flipud"},{"name":"numpy.float_power","description":"First array elements raised to powers from second array, element-wise.","signature":"numpy.float_power(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'float_power'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.float_power.html#numpy.float_power"},{"name":"numpy.floor","description":"Return the floor of the input, element-wise.","signature":"numpy.floor(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'floor'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.floor.html#numpy.floor"},{"name":"numpy.floor_divide","description":"Return the largest integer smaller or equal to the division of the inputs. It is equivalent to the Python // operator and pairs with the Python % (remainder), function so that a = a % b + b * (a // b) up to roundoff.","signature":"numpy.floor_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'floor_divide'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.floor_divide.html#numpy.floor_divide"},{"name":"numpy.fmax","description":"Element-wise maximum of array elements.","signature":"numpy.fmax(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'fmax'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fmax.html#numpy.fmax"},{"name":"numpy.fmin","description":"Element-wise minimum of array elements.","signature":"numpy.fmin(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'fmin'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fmin.html#numpy.fmin"},{"name":"numpy.fmod","description":"Return the element-wise remainder of division.","signature":"numpy.fmod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'fmod'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fmod.html#numpy.fmod"},{"name":"numpy.format_float_positional","description":"Format a floating-point scalar as a decimal string in positional notation.","signature":"numpy.format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.format_float_positional.html#numpy.format_float_positional"},{"name":"numpy.format_float_scientific","description":"Format a floating-point scalar as a decimal string in scientific notation.","signature":"numpy.format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.format_float_scientific.html#numpy.format_float_scientific"},{"name":"numpy.frexp","description":"Decompose the elements of x into mantissa and twos exponent.","signature":"numpy.frexp(x, [out1, out2, ]/, [out=(None, None), ]*, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'frexp'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.frexp.html#numpy.frexp"},{"name":"numpy.frombuffer","description":"Interpret a buffer as a 1-dimensional array.","signature":"numpy.frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.frombuffer.html#numpy.frombuffer"},{"name":"numpy.fromfile","description":"Construct an array from data in a text or binary file.","signature":"numpy.fromfile(file, dtype=float, count=-1, sep='', offset=0, *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromfile.html#numpy.fromfile"},{"name":"numpy.fromfunction","description":"Construct an array by executing a function over each coordinate.","signature":"numpy.fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromfunction.html#numpy.fromfunction"},{"name":"numpy.fromiter","description":"Create a new 1-dimensional array from an iterable object.","signature":"numpy.fromiter(iterable, dtype, count=-1, *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromiter.html#numpy.fromiter"},{"name":"numpy.frompyfunc","description":"Takes an arbitrary Python function and returns a NumPy ufunc.","signature":"numpy.frompyfunc(func, nin, nout, *[, identity])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.frompyfunc.html#numpy.frompyfunc"},{"name":"numpy.fromregex","description":"Construct an array from a text file, using regular expression parsing.","signature":"numpy.fromregex(file, regexp, dtype, encoding=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromregex.html#numpy.fromregex"},{"name":"numpy.fromstring","description":"A new 1-D array initialized from text data in a string.","signature":"numpy.fromstring(string, dtype=float, count=-1, sep='', *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromstring.html#numpy.fromstring"},{"name":"numpy.full","description":"Return a new array of given shape and type, filled with fill_value.","signature":"numpy.full(shape, fill_value, dtype=None, order='C', *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.full.html#numpy.full"},{"name":"numpy.full_like","description":"Return a full array with the same shape and type as a given array.","signature":"numpy.full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.full_like.html#numpy.full_like"},{"name":"numpy.gcd","description":"Returns the greatest common divisor of |x1| and |x2|","signature":"numpy.gcd(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'gcd'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.gcd.html#numpy.gcd"},{"name":"numpy.genfromtxt","description":"Load data from a text file, with missing values handled as specified.","signature":"numpy.genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\" !#$%&'()*+, -./:;<=>?@[\\\\]^{|}~\", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes', *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html#numpy.genfromtxt"},{"name":"numpy.geomspace","description":"Return numbers spaced evenly on a log scale (a geometric progression).","signature":"numpy.geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.geomspace.html#numpy.geomspace"},{"name":"numpy.get_include","description":"Return the directory that contains the NumPy *.h header files.","signature":"numpy.get_include()","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.get_include.html#numpy.get_include"},{"name":"numpy.get_printoptions","description":"Return the current print options.","signature":"numpy.get_printoptions()","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.get_printoptions.html#numpy.get_printoptions"},{"name":"numpy.getbufsize","description":"Return the size of the buffer used in ufuncs.","signature":"numpy.getbufsize()","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.getbufsize.html#numpy.getbufsize"},{"name":"numpy.geterr","description":"Get the current way of handling floating-point errors.","signature":"numpy.geterr()","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.geterr.html#numpy.geterr"},{"name":"numpy.geterrcall","description":"Return the current callback function used on floating-point errors.","signature":"numpy.geterrcall()","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.geterrcall.html#numpy.geterrcall"},{"name":"numpy.geterrobj","description":"Return the current object that defines floating-point error handling.","signature":"numpy.geterrobj()","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.geterrobj.html#numpy.geterrobj"},{"name":"numpy.gradient","description":"Return the gradient of an N-dimensional array.","signature":"numpy.gradient(f, *varargs, axis=None, edge_order=1)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.gradient.html#numpy.gradient"},{"name":"numpy.greater","description":"Return the truth value of (x1 > x2) element-wise.","signature":"numpy.greater(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'greater'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.greater.html#numpy.greater"},{"name":"numpy.greater_equal","description":"Return the truth value of (x1 >= x2) element-wise.","signature":"numpy.greater_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'greater_equal'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.greater_equal.html#numpy.greater_equal"},{"name":"numpy.hamming","description":"Return the Hamming window.","signature":"numpy.hamming(M)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.hamming.html#numpy.hamming"},{"name":"numpy.hanning","description":"Return the Hanning window.","signature":"numpy.hanning(M)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.hanning.html#numpy.hanning"},{"name":"numpy.heaviside","description":"Compute the Heaviside step function.","signature":"numpy.heaviside(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'heaviside'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.heaviside.html#numpy.heaviside"},{"name":"numpy.histogram","description":"Compute the histogram of a set of data.","signature":"numpy.histogram(a, bins=10, range=None, normed=None, weights=None, density=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.histogram.html#numpy.histogram"},{"name":"numpy.histogram2d","description":"Compute the bi-dimensional histogram of two data samples.","signature":"numpy.histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.histogram2d.html#numpy.histogram2d"},{"name":"numpy.histogram_bin_edges","description":"Function to calculate only the edges of the bins used by the histogram function.","signature":"numpy.histogram_bin_edges(a, bins=10, range=None, weights=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.histogram_bin_edges.html#numpy.histogram_bin_edges"},{"name":"numpy.histogramdd","description":"Compute the multidimensional histogram of some data.","signature":"numpy.histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.histogramdd.html#numpy.histogramdd"},{"name":"numpy.hsplit","description":"Split an array into multiple sub-arrays horizontally (column-wise).","signature":"numpy.hsplit(ary, indices_or_sections)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.hsplit.html#numpy.hsplit"},{"name":"numpy.hstack","description":"Stack arrays in sequence horizontally (column wise).","signature":"numpy.hstack(tup)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.hstack.html#numpy.hstack"},{"name":"numpy.hypot","description":"Given the “legs” of a right triangle, return its hypotenuse.","signature":"numpy.hypot(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'hypot'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.hypot.html#numpy.hypot"},{"name":"numpy.i0","description":"Modified Bessel function of the first kind, order 0.","signature":"numpy.i0(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.i0.html#numpy.i0"},{"name":"numpy.identity","description":"Return the identity array.","signature":"numpy.identity(n, dtype=None, *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.identity.html#numpy.identity"},{"name":"numpy.imag","description":"Return the imaginary part of the complex argument.","signature":"numpy.imag(val)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.imag.html#numpy.imag"},{"name":"numpy.in1d","description":"Test whether each element of a 1-D array is also present in a second array.","signature":"numpy.in1d(ar1, ar2, assume_unique=False, invert=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.in1d.html#numpy.in1d"},{"name":"numpy.indices","description":"Return an array representing the indices of a grid.","signature":"numpy.indices(dimensions, dtype=<class 'int'>, sparse=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.indices.html#numpy.indices"},{"name":"numpy.info","description":"Get help information for a function, class, or module.","signature":"numpy.info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='numpy')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.info.html#numpy.info"},{"name":"numpy.inner","description":"Inner product of two arrays.","signature":"numpy.inner(a, b)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.inner.html#numpy.inner"},{"name":"numpy.insert","description":"Insert values along the given axis before the given indices.","signature":"numpy.insert(arr, obj, values, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.insert.html#numpy.insert"},{"name":"numpy.interp","description":"One-dimensional linear interpolation.","signature":"numpy.interp(x, xp, fp, left=None, right=None, period=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.interp.html#numpy.interp"},{"name":"numpy.intersect1d","description":"Find the intersection of two arrays.","signature":"numpy.intersect1d(ar1, ar2, assume_unique=False, return_indices=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.intersect1d.html#numpy.intersect1d"},{"name":"numpy.invert","description":"Compute bit-wise inversion, or bit-wise NOT, element-wise.","signature":"numpy.invert(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'invert'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.invert.html#numpy.invert"},{"name":"numpy.is_busday","description":"Calculates which of the given dates are valid days, and which are not.","signature":"numpy.is_busday(dates, weekmask='1111100', holidays=None, busdaycal=None, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.is_busday.html#numpy.is_busday"},{"name":"numpy.isclose","description":"Returns a boolean array where two arrays are element-wise equal within a tolerance.","signature":"numpy.isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isclose.html#numpy.isclose"},{"name":"numpy.iscomplex","description":"Returns a bool array, where True if input element is complex.","signature":"numpy.iscomplex(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.iscomplex.html#numpy.iscomplex"},{"name":"numpy.iscomplexobj","description":"Check for a complex type or an array of complex numbers.","signature":"numpy.iscomplexobj(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.iscomplexobj.html#numpy.iscomplexobj"},{"name":"numpy.isfinite","description":"Test element-wise for finiteness (not infinity or not Not a Number).","signature":"numpy.isfinite(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'isfinite'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isfinite.html#numpy.isfinite"},{"name":"numpy.isfortran","description":"Check if the array is Fortran contiguous but not C contiguous.","signature":"numpy.isfortran(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isfortran.html#numpy.isfortran"},{"name":"numpy.isin","description":"Calculates element in test_elements, broadcasting over element only. Returns a boolean array of the same shape as element that is True where an element of element is in test_elements and False otherwise.","signature":"numpy.isin(element, test_elements, assume_unique=False, invert=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isin.html#numpy.isin"},{"name":"numpy.isinf","description":"Test element-wise for positive or negative infinity.","signature":"numpy.isinf(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'isinf'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isinf.html#numpy.isinf"},{"name":"numpy.isnan","description":"Test element-wise for NaN and return result as a boolean array.","signature":"numpy.isnan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'isnan'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isnan.html#numpy.isnan"},{"name":"numpy.isnat","description":"Test element-wise for NaT (not a time) and return result as a boolean array.","signature":"numpy.isnat(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'isnat'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isnat.html#numpy.isnat"},{"name":"numpy.isneginf","description":"Test element-wise for negative infinity, return result as bool array.","signature":"numpy.isneginf(x, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isneginf.html#numpy.isneginf"},{"name":"numpy.isposinf","description":"Test element-wise for positive infinity, return result as bool array.","signature":"numpy.isposinf(x, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isposinf.html#numpy.isposinf"},{"name":"numpy.isreal","description":"Returns a bool array, where True if input element is real.","signature":"numpy.isreal(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isreal.html#numpy.isreal"},{"name":"numpy.isrealobj","description":"Return True if x is a not complex type or an array of complex numbers.","signature":"numpy.isrealobj(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isrealobj.html#numpy.isrealobj"},{"name":"numpy.isscalar","description":"Returns True if the type of element is a scalar type.","signature":"numpy.isscalar(element)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isscalar.html#numpy.isscalar"},{"name":"numpy.issctype","description":"Determines whether the given object represents a scalar data-type.","signature":"numpy.issctype(rep)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.issctype.html#numpy.issctype"},{"name":"numpy.issubclass_","description":"Determine if a class is a subclass of a second class.","signature":"numpy.issubclass_(arg1, arg2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.issubclass_.html#numpy.issubclass_"},{"name":"numpy.issubdtype","description":"Returns True if first argument is a typecode lower/equal in type hierarchy.","signature":"numpy.issubdtype(arg1, arg2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.issubdtype.html#numpy.issubdtype"},{"name":"numpy.issubsctype","description":"Determine if the first argument is a subclass of the second argument.","signature":"numpy.issubsctype(arg1, arg2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.issubsctype.html#numpy.issubsctype"},{"name":"numpy.ix_","description":"Construct an open mesh from multiple sequences.","signature":"numpy.ix_(*args)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ix_.html#numpy.ix_"},{"name":"numpy.kaiser","description":"Return the Kaiser window.","signature":"numpy.kaiser(M, beta)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.kaiser.html#numpy.kaiser"},{"name":"numpy.kron","description":"Kronecker product of two arrays.","signature":"numpy.kron(a, b)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.kron.html#numpy.kron"},{"name":"numpy.lcm","description":"Returns the lowest common multiple of |x1| and |x2|","signature":"numpy.lcm(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'lcm'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lcm.html#numpy.lcm"},{"name":"numpy.ldexp","description":"Returns x1 * 2**x2, element-wise.","signature":"numpy.ldexp(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'ldexp'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ldexp.html#numpy.ldexp"},{"name":"numpy.left_shift","description":"Shift the bits of an integer to the left.","signature":"numpy.left_shift(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'left_shift'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.left_shift.html#numpy.left_shift"},{"name":"numpy.less","description":"Return the truth value of (x1 < x2) element-wise.","signature":"numpy.less(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'less'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.less.html#numpy.less"},{"name":"numpy.less_equal","description":"Return the truth value of (x1 <= x2) element-wise.","signature":"numpy.less_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'less_equal'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.less_equal.html#numpy.less_equal"},{"name":"numpy.lexsort","description":"Perform an indirect stable sort using a sequence of keys.","signature":"numpy.lexsort(keys, axis=-1)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lexsort.html#numpy.lexsort"},{"name":"numpy.lib.format.open_memmap","description":"Open a .npy file as a memory-mapped array.","signature":"numpy.lib.format.open_memmap(filename, mode='r+', dtype=None, shape=None, fortran_order=False, version=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.format.open_memmap.html#numpy.lib.format.open_memmap"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.append_fields"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.apply_along_fields"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.assign_fields_by_name"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.drop_fields"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.find_duplicates"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.flatten_descr"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.get_fieldstructure"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.get_names"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.get_names_flat"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.join_by"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.merge_arrays"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.rec_append_fields"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.rec_drop_fields"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.rec_join"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.recursive_fill_fields"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.rename_fields"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.repack_fields"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.require_fields"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.stack_arrays"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.structured_to_unstructured"},{"name":"numpy.lib.recfunctions.append_fields","description":"Add new fields to an existing array.","signature":"numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)","url":"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.unstructured_to_structured"},{"name":"numpy.lib.scimath.arccos","description":"Compute the inverse cosine of x.","signature":"numpy.lib.scimath.arccos(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.scimath.arccos.html#numpy.lib.scimath.arccos"},{"name":"numpy.lib.scimath.arcsin","description":"Compute the inverse sine of x.","signature":"numpy.lib.scimath.arcsin(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.scimath.arcsin.html#numpy.lib.scimath.arcsin"},{"name":"numpy.lib.scimath.arctanh","description":"Compute the inverse hyperbolic tangent of x.","signature":"numpy.lib.scimath.arctanh(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.scimath.arctanh.html#numpy.lib.scimath.arctanh"},{"name":"numpy.lib.scimath.log","description":"Compute the natural logarithm of x.","signature":"numpy.lib.scimath.log(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.scimath.log.html#numpy.lib.scimath.log"},{"name":"numpy.lib.scimath.log10","description":"Compute the logarithm base 10 of x.","signature":"numpy.lib.scimath.log10(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.scimath.log10.html#numpy.lib.scimath.log10"},{"name":"numpy.lib.scimath.log2","description":"Compute the logarithm base 2 of x.","signature":"numpy.lib.scimath.log2(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.scimath.log2.html#numpy.lib.scimath.log2"},{"name":"numpy.lib.scimath.logn","description":"Take log base n of x.","signature":"numpy.lib.scimath.logn(n, x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.scimath.logn.html#numpy.lib.scimath.logn"},{"name":"numpy.lib.scimath.power","description":"Return x to the power p, (x**p).","signature":"numpy.lib.scimath.power(x, p)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.scimath.power.html#numpy.lib.scimath.power"},{"name":"numpy.lib.scimath.sqrt","description":"Compute the square root of x.","signature":"numpy.lib.scimath.sqrt(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.scimath.sqrt.html#numpy.lib.scimath.sqrt"},{"name":"numpy.lib.stride_tricks.as_strided","description":"Create a view into the array with the given shape and strides.","signature":"numpy.lib.stride_tricks.as_strided(x, shape=None, strides=None, subok=False, writeable=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.stride_tricks.as_strided.html#numpy.lib.stride_tricks.as_strided"},{"name":"numpy.lib.stride_tricks.sliding_window_view","description":"Create a sliding window view into the array with the given window shape.","signature":"numpy.lib.stride_tricks.sliding_window_view(x, window_shape, axis=None, *, subok=False, writeable=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.stride_tricks.sliding_window_view.html#numpy.lib.stride_tricks.sliding_window_view"},{"name":"numpy.linalg.cholesky","description":"Cholesky decomposition.","signature":"numpy.linalg.cholesky(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.cholesky.html#numpy.linalg.cholesky"},{"name":"numpy.linalg.cond","description":"Compute the condition number of a matrix.","signature":"numpy.linalg.cond(x, p=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.cond.html#numpy.linalg.cond"},{"name":"numpy.linalg.det","description":"Compute the determinant of an array.","signature":"numpy.linalg.det(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.det.html#numpy.linalg.det"},{"name":"numpy.linalg.eig","description":"Compute the eigenvalues and right eigenvectors of a square array.","signature":"numpy.linalg.eig(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.eig.html#numpy.linalg.eig"},{"name":"numpy.linalg.eigh","description":"Return the eigenvalues and eigenvectors of a complex Hermitian (conjugate symmetric) or a real symmetric matrix.","signature":"numpy.linalg.eigh(a, UPLO='L')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.eigh.html#numpy.linalg.eigh"},{"name":"numpy.linalg.eigvals","description":"Compute the eigenvalues of a general matrix.","signature":"numpy.linalg.eigvals(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.eigvals.html#numpy.linalg.eigvals"},{"name":"numpy.linalg.eigvalsh","description":"Compute the eigenvalues of a complex Hermitian or real symmetric matrix.","signature":"numpy.linalg.eigvalsh(a, UPLO='L')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.eigvalsh.html#numpy.linalg.eigvalsh"},{"name":"numpy.linalg.inv","description":"Compute the (multiplicative) inverse of a matrix.","signature":"numpy.linalg.inv(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.inv.html#numpy.linalg.inv"},{"name":"numpy.linalg.lstsq","description":"Return the least-squares solution to a linear matrix equation.","signature":"numpy.linalg.lstsq(a, b, rcond='warn')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.lstsq.html#numpy.linalg.lstsq"},{"name":"numpy.linalg.matrix_power","description":"Raise a square matrix to the (integer) power n.","signature":"numpy.linalg.matrix_power(a, n)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.matrix_power.html#numpy.linalg.matrix_power"},{"name":"numpy.linalg.matrix_rank","description":"Return matrix rank of array using SVD method","signature":"numpy.linalg.matrix_rank(M, tol=None, hermitian=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.matrix_rank.html#numpy.linalg.matrix_rank"},{"name":"numpy.linalg.multi_dot","description":"Compute the dot product of two or more arrays in a single function call, while automatically selecting the fastest evaluation order.","signature":"numpy.linalg.multi_dot(arrays, *, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.multi_dot.html#numpy.linalg.multi_dot"},{"name":"numpy.linalg.norm","description":"Matrix or vector norm.","signature":"numpy.linalg.norm(x, ord=None, axis=None, keepdims=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.norm.html#numpy.linalg.norm"},{"name":"numpy.linalg.pinv","description":"Compute the (Moore-Penrose) pseudo-inverse of a matrix.","signature":"numpy.linalg.pinv(a, rcond=1e-15, hermitian=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.pinv.html#numpy.linalg.pinv"},{"name":"numpy.linalg.qr","description":"Compute the qr factorization of a matrix.","signature":"numpy.linalg.qr(a, mode='reduced')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.qr.html#numpy.linalg.qr"},{"name":"numpy.linalg.slogdet","description":"Compute the sign and (natural) logarithm of the determinant of an array.","signature":"numpy.linalg.slogdet(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.slogdet.html#numpy.linalg.slogdet"},{"name":"numpy.linalg.solve","description":"Solve a linear matrix equation, or system of linear scalar equations.","signature":"numpy.linalg.solve(a, b)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.solve.html#numpy.linalg.solve"},{"name":"numpy.linalg.svd","description":"Singular Value Decomposition.","signature":"numpy.linalg.svd(a, full_matrices=True, compute_uv=True, hermitian=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.svd.html#numpy.linalg.svd"},{"name":"numpy.linalg.tensorinv","description":"Compute the ‘inverse’ of an N-dimensional array.","signature":"numpy.linalg.tensorinv(a, ind=2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.tensorinv.html#numpy.linalg.tensorinv"},{"name":"numpy.linalg.tensorsolve","description":"Solve the tensor equation a x = b for x.","signature":"numpy.linalg.tensorsolve(a, b, axes=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.tensorsolve.html#numpy.linalg.tensorsolve"},{"name":"numpy.linspace","description":"Return evenly spaced numbers over a specified interval.","signature":"numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html#numpy.linspace"},{"name":"numpy.load","description":"Load arrays or pickled objects from .npy, .npz or pickled files.","signature":"numpy.load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.load.html#numpy.load"},{"name":"numpy.loadtxt","description":"Load data from a text file.","signature":"numpy.loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html#numpy.loadtxt"},{"name":"numpy.log","description":"Natural logarithm, element-wise.","signature":"numpy.log(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'log'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.log.html#numpy.log"},{"name":"numpy.log10","description":"Return the base 10 logarithm of the input array, element-wise.","signature":"numpy.log10(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'log10'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.log10.html#numpy.log10"},{"name":"numpy.log1p","description":"Return the natural logarithm of one plus the input array, element-wise.","signature":"numpy.log1p(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'log1p'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.log1p.html#numpy.log1p"},{"name":"numpy.log2","description":"Base-2 logarithm of x.","signature":"numpy.log2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'log2'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.log2.html#numpy.log2"},{"name":"numpy.logaddexp","description":"Logarithm of the sum of exponentiations of the inputs.","signature":"numpy.logaddexp(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logaddexp'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logaddexp.html#numpy.logaddexp"},{"name":"numpy.logaddexp2","description":"Logarithm of the sum of exponentiations of the inputs in base-2.","signature":"numpy.logaddexp2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logaddexp2'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logaddexp2.html#numpy.logaddexp2"},{"name":"numpy.logical_and","description":"Compute the truth value of x1 AND x2 element-wise.","signature":"numpy.logical_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logical_and'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_and.html#numpy.logical_and"},{"name":"numpy.logical_not","description":"Compute the truth value of NOT x element-wise.","signature":"numpy.logical_not(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logical_not'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_not.html#numpy.logical_not"},{"name":"numpy.logical_or","description":"Compute the truth value of x1 OR x2 element-wise.","signature":"numpy.logical_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logical_or'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_or.html#numpy.logical_or"},{"name":"numpy.logical_xor","description":"Compute the truth value of x1 XOR x2, element-wise.","signature":"numpy.logical_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logical_xor'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_xor.html#numpy.logical_xor"},{"name":"numpy.logspace","description":"Return numbers spaced evenly on a log scale.","signature":"numpy.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logspace.html#numpy.logspace"},{"name":"numpy.lookfor","description":"Do a keyword search on docstrings.","signature":"numpy.lookfor(what, module=None, import_modules=True, regenerate=False, output=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lookfor.html#numpy.lookfor"},{"name":"numpy.ma.all","description":"Returns True if all elements evaluate to True.","signature":"numpy.ma.all(self, axis=None, out=None, keepdims=<no value>) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.all.html#numpy.ma.all"},{"name":"numpy.ma.allclose","description":"Returns True if two arrays are element-wise equal within a tolerance.","signature":"numpy.ma.allclose(a, b, masked_equal=True, rtol=1e-05, atol=1e-08)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.allclose.html#numpy.ma.allclose"},{"name":"numpy.ma.allequal","description":"Return True if all entries of a and b are equal, using fill_value as a truth value where either or both are masked.","signature":"numpy.ma.allequal(a, b, fill_value=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.allequal.html#numpy.ma.allequal"},{"name":"numpy.ma.anom","description":"Compute the anomalies (deviations from the arithmetic mean) along the given axis.","signature":"numpy.ma.anom(self, axis=None, dtype=None) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.anom.html#numpy.ma.anom"},{"name":"numpy.ma.anomalies","description":"Compute the anomalies (deviations from the arithmetic mean) along the given axis.","signature":"numpy.ma.anomalies(self, axis=None, dtype=None) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.anomalies.html#numpy.ma.anomalies"},{"name":"numpy.ma.any","description":"Returns True if any of the elements of a evaluate to True.","signature":"numpy.ma.any(self, axis=None, out=None, keepdims=<no value>) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.any.html#numpy.ma.any"},{"name":"numpy.ma.append","description":"Append values to the end of an array.","signature":"numpy.ma.append(a, b, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.append.html#numpy.ma.append"},{"name":"numpy.ma.apply_along_axis","description":"Apply a function to 1-D slices along the given axis.","signature":"numpy.ma.apply_along_axis(func1d, axis, arr, *args, **kwargs)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.apply_along_axis.html#numpy.ma.apply_along_axis"},{"name":"numpy.ma.apply_over_axes","description":"Apply a function repeatedly over multiple axes.","signature":"numpy.ma.apply_over_axes(func, a, axes)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.apply_over_axes.html#numpy.ma.apply_over_axes"},{"name":"numpy.ma.arange","description":"Return evenly spaced values within a given interval.","signature":"numpy.ma.arange([start, ]stop, [step, ]dtype=None, *, like=None) = <numpy.ma.core._convert2ma object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.arange.html#numpy.ma.arange"},{"name":"numpy.ma.argmax","description":"Returns array of indices of the maximum values along the given axis. Masked values are treated as if they had the value fill_value.","signature":"numpy.ma.argmax(self, axis=None, fill_value=None, out=None) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.argmax.html#numpy.ma.argmax"},{"name":"numpy.ma.argmin","description":"Return array of indices to the minimum values along the given axis.","signature":"numpy.ma.argmin(self, axis=None, fill_value=None, out=None) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.argmin.html#numpy.ma.argmin"},{"name":"numpy.ma.argsort","description":"Return an ndarray of indices that sort the array along the specified axis.  Masked values are filled beforehand to fill_value.","signature":"numpy.ma.argsort(a, axis=<no value>, kind=None, order=None, endwith=True, fill_value=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.argsort.html#numpy.ma.argsort"},{"name":"numpy.ma.around = <numpy.ma.core._MaskedUnaryOperation object>","description":"Round an array to the given number of decimals.","signature":"numpy.ma.around = <numpy.ma.core._MaskedUnaryOperation object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.around.html#numpy.ma.around"},{"name":"numpy.ma.array","description":"An array class with possibly masked values.","signature":"numpy.ma.array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.array.html#numpy.ma.array"},{"name":"numpy.ma.asanyarray","description":"Convert the input to a masked array, conserving subclasses.","signature":"numpy.ma.asanyarray(a, dtype=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.asanyarray.html#numpy.ma.asanyarray"},{"name":"numpy.ma.asarray","description":"Convert the input to a masked array of the given data-type.","signature":"numpy.ma.asarray(a, dtype=None, order=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.asarray.html#numpy.ma.asarray"},{"name":"numpy.ma.atleast_1d","description":"Convert inputs to arrays with at least one dimension.","signature":"numpy.ma.atleast_1d(*args, **kwargs) = <numpy.ma.extras._fromnxfunction_allargs object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.atleast_1d.html#numpy.ma.atleast_1d"},{"name":"numpy.ma.atleast_2d","description":"View inputs as arrays with at least two dimensions.","signature":"numpy.ma.atleast_2d(*args, **kwargs) = <numpy.ma.extras._fromnxfunction_allargs object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.atleast_2d.html#numpy.ma.atleast_2d"},{"name":"numpy.ma.atleast_3d","description":"View inputs as arrays with at least three dimensions.","signature":"numpy.ma.atleast_3d(*args, **kwargs) = <numpy.ma.extras._fromnxfunction_allargs object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.atleast_3d.html#numpy.ma.atleast_3d"},{"name":"numpy.ma.average","description":"Return the weighted average of array over the given axis.","signature":"numpy.ma.average(a, axis=None, weights=None, returned=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.average.html#numpy.ma.average"},{"name":"numpy.ma.choose","description":"Use an index array to construct a new array from a set of choices.","signature":"numpy.ma.choose(indices, choices, out=None, mode='raise')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.choose.html#numpy.ma.choose"},{"name":"numpy.ma.clip","description":"Clip (limit) the values in an array.","signature":"numpy.ma.clip(a, a_min, a_max, out=None, **kwargs)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.clip.html#numpy.ma.clip"},{"name":"numpy.ma.clump_masked","description":"Returns a list of slices corresponding to the masked clumps of a 1-D array. (A “clump” is defined as a contiguous region of the array).","signature":"numpy.ma.clump_masked(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.clump_masked.html#numpy.ma.clump_masked"},{"name":"numpy.ma.clump_unmasked","description":"Return list of slices corresponding to the unmasked clumps of a 1-D array. (A “clump” is defined as a contiguous region of the array).","signature":"numpy.ma.clump_unmasked(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.clump_unmasked.html#numpy.ma.clump_unmasked"},{"name":"numpy.ma.column_stack","description":"Stack 1-D arrays as columns into a 2-D array.","signature":"numpy.ma.column_stack(*args, **kwargs) = <numpy.ma.extras._fromnxfunction_seq object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.column_stack.html#numpy.ma.column_stack"},{"name":"numpy.ma.common_fill_value","description":"Return the common filling value of two masked arrays, if any.","signature":"numpy.ma.common_fill_value(a, b)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.common_fill_value.html#numpy.ma.common_fill_value"},{"name":"numpy.ma.compress_cols","description":"Suppress whole columns of a 2-D array that contain masked values.","signature":"numpy.ma.compress_cols(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.compress_cols.html#numpy.ma.compress_cols"},{"name":"numpy.ma.compress_rowcols","description":"Suppress the rows and/or columns of a 2-D array that contain masked values.","signature":"numpy.ma.compress_rowcols(x, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.compress_rowcols.html#numpy.ma.compress_rowcols"},{"name":"numpy.ma.compress_rows","description":"Suppress whole rows of a 2-D array that contain masked values.","signature":"numpy.ma.compress_rows(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.compress_rows.html#numpy.ma.compress_rows"},{"name":"numpy.ma.compressed","description":"Return all the non-masked data as a 1-D array.","signature":"numpy.ma.compressed(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.compressed.html#numpy.ma.compressed"},{"name":"numpy.ma.concatenate","description":"Concatenate a sequence of arrays along the given axis.","signature":"numpy.ma.concatenate(arrays, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.concatenate.html#numpy.ma.concatenate"},{"name":"numpy.ma.conjugate","description":"Return the complex conjugate, element-wise.","signature":"numpy.ma.conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <numpy.ma.core._MaskedUnaryOperation object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.conjugate.html#numpy.ma.conjugate"},{"name":"numpy.ma.copy","description":" Return a copy of the array. ","signature":"numpy.ma.copy(self, *args, **params) a.copy(order='C') = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.copy.html#numpy.ma.copy"},{"name":"numpy.ma.corrcoef","description":"Return Pearson product-moment correlation coefficients.","signature":"numpy.ma.corrcoef(x, y=None, rowvar=True, bias=<no value>, allow_masked=True, ddof=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.corrcoef.html#numpy.ma.corrcoef"},{"name":"numpy.ma.count","description":"Count the non-masked elements of the array along the given axis.","signature":"numpy.ma.count(self, axis=None, keepdims=<no value>) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.count.html#numpy.ma.count"},{"name":"numpy.ma.count_masked","description":"Count the number of masked elements along the given axis.","signature":"numpy.ma.count_masked(arr, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.count_masked.html#numpy.ma.count_masked"},{"name":"numpy.ma.cov","description":"Estimate the covariance matrix.","signature":"numpy.ma.cov(x, y=None, rowvar=True, bias=False, allow_masked=True, ddof=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.cov.html#numpy.ma.cov"},{"name":"numpy.ma.cumprod","description":"Return the cumulative product of the array elements over the given axis.","signature":"numpy.ma.cumprod(self, axis=None, dtype=None, out=None) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.cumprod.html#numpy.ma.cumprod"},{"name":"numpy.ma.cumsum","description":"Return the cumulative sum of the array elements over the given axis.","signature":"numpy.ma.cumsum(self, axis=None, dtype=None, out=None) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.cumsum.html#numpy.ma.cumsum"},{"name":"numpy.ma.default_fill_value","description":"Return the default fill value for the argument object.","signature":"numpy.ma.default_fill_value(obj)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.default_fill_value.html#numpy.ma.default_fill_value"},{"name":"numpy.ma.diag","description":"Extract a diagonal or construct a diagonal array.","signature":"numpy.ma.diag(v, k=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.diag.html#numpy.ma.diag"},{"name":"numpy.ma.dot","description":"Return the dot product of two arrays.","signature":"numpy.ma.dot(a, b, strict=False, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.dot.html#numpy.ma.dot"},{"name":"numpy.ma.dstack","description":"Stack arrays in sequence depth wise (along third axis).","signature":"numpy.ma.dstack(*args, **kwargs) = <numpy.ma.extras._fromnxfunction_seq object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.dstack.html#numpy.ma.dstack"},{"name":"numpy.ma.ediff1d","description":"Compute the differences between consecutive elements of an array.","signature":"numpy.ma.ediff1d(arr, to_end=None, to_begin=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.ediff1d.html#numpy.ma.ediff1d"},{"name":"numpy.ma.empty","description":"Return a new array of given shape and type, without initializing entries.","signature":"numpy.ma.empty(shape, dtype=float, order='C', *, like=None) = <numpy.ma.core._convert2ma object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.empty.html#numpy.ma.empty"},{"name":"numpy.ma.empty_like","description":"Return a new array with the same shape and type as a given array.","signature":"numpy.ma.empty_like(prototype, dtype=None, order='K', subok=True, shape=None) = <numpy.ma.core._convert2ma object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.empty_like.html#numpy.ma.empty_like"},{"name":"numpy.ma.expand_dims","description":"Expand the shape of an array.","signature":"numpy.ma.expand_dims(a, axis)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.expand_dims.html#numpy.ma.expand_dims"},{"name":"numpy.ma.filled","description":"Return input as an array with masked data replaced by a fill value.","signature":"numpy.ma.filled(a, fill_value=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.filled.html#numpy.ma.filled"},{"name":"numpy.ma.fix_invalid","description":"Return input with invalid data masked and replaced by a fill value.","signature":"numpy.ma.fix_invalid(a, mask=False, copy=True, fill_value=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.fix_invalid.html#numpy.ma.fix_invalid"},{"name":"numpy.ma.flatnotmasked_contiguous","description":"Find contiguous unmasked data in a masked array along the given axis.","signature":"numpy.ma.flatnotmasked_contiguous(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.flatnotmasked_contiguous.html#numpy.ma.flatnotmasked_contiguous"},{"name":"numpy.ma.flatnotmasked_edges","description":"Find the indices of the first and last unmasked values.","signature":"numpy.ma.flatnotmasked_edges(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.flatnotmasked_edges.html#numpy.ma.flatnotmasked_edges"},{"name":"numpy.ma.frombuffer","description":"Interpret a buffer as a 1-dimensional array.","signature":"numpy.ma.frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None) = <numpy.ma.core._convert2ma object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.frombuffer.html#numpy.ma.frombuffer"},{"name":"numpy.ma.fromfunction","description":"Construct an array by executing a function over each coordinate.","signature":"numpy.ma.fromfunction(function, shape, **dtype) = <numpy.ma.core._convert2ma object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.fromfunction.html#numpy.ma.fromfunction"},{"name":"numpy.ma.getdata","description":"Return the data of a masked array as an ndarray.","signature":"numpy.ma.getdata(a, subok=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.getdata.html#numpy.ma.getdata"},{"name":"numpy.ma.getmask","description":"Return the mask of a masked array, or nomask.","signature":"numpy.ma.getmask(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.getmask.html#numpy.ma.getmask"},{"name":"numpy.ma.getmaskarray","description":"Return the mask of a masked array, or full boolean array of False.","signature":"numpy.ma.getmaskarray(arr)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray"},{"name":"numpy.ma.harden_mask","description":"Force the mask to hard.","signature":"numpy.ma.harden_mask(self) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask"},{"name":"numpy.ma.hsplit","description":"Split an array into multiple sub-arrays horizontally (column-wise).","signature":"numpy.ma.hsplit(*args, **kwargs) = <numpy.ma.extras._fromnxfunction_single object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.hsplit.html#numpy.ma.hsplit"},{"name":"numpy.ma.hstack","description":"Stack arrays in sequence horizontally (column wise).","signature":"numpy.ma.hstack(*args, **kwargs) = <numpy.ma.extras._fromnxfunction_seq object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.hstack.html#numpy.ma.hstack"},{"name":"numpy.ma.identity","description":"Return the identity array.","signature":"numpy.ma.identity(n, dtype=None) = <numpy.ma.core._convert2ma object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.identity.html#numpy.ma.identity"},{"name":"numpy.ma.indices","description":"Return an array representing the indices of a grid.","signature":"numpy.ma.indices(dimensions, dtype=<class 'int'>, sparse=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.indices.html#numpy.ma.indices"},{"name":"numpy.ma.inner","description":"Inner product of two arrays.","signature":"numpy.ma.inner(a, b)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.inner.html#numpy.ma.inner"},{"name":"numpy.ma.innerproduct","description":"Inner product of two arrays.","signature":"numpy.ma.innerproduct(a, b)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.innerproduct.html#numpy.ma.innerproduct"},{"name":"numpy.ma.isMA","description":"Test whether input is an instance of MaskedArray.","signature":"numpy.ma.isMA(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.isMA.html#numpy.ma.isMA"},{"name":"numpy.ma.isMaskedArray","description":"Test whether input is an instance of MaskedArray.","signature":"numpy.ma.isMaskedArray(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.isMaskedArray.html#numpy.ma.isMaskedArray"},{"name":"numpy.ma.is_mask","description":"Return True if m is a valid, standard mask.","signature":"numpy.ma.is_mask(m)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.is_mask.html#numpy.ma.is_mask"},{"name":"numpy.ma.is_masked","description":"Determine whether input has masked values.","signature":"numpy.ma.is_masked(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.is_masked.html#numpy.ma.is_masked"},{"name":"numpy.ma.isarray","description":"Test whether input is an instance of MaskedArray.","signature":"numpy.ma.isarray(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.isarray.html#numpy.ma.isarray"},{"name":"numpy.ma.make_mask","description":"Create a boolean mask from an array.","signature":"numpy.ma.make_mask(m, copy=False, shrink=True, dtype=<class 'numpy.bool_'>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.make_mask.html#numpy.ma.make_mask"},{"name":"numpy.ma.make_mask_descr","description":"Construct a dtype description list from a given dtype.","signature":"numpy.ma.make_mask_descr(ndtype)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.make_mask_descr.html#numpy.ma.make_mask_descr"},{"name":"numpy.ma.make_mask_none","description":"Return a boolean mask of the given shape, filled with False.","signature":"numpy.ma.make_mask_none(newshape, dtype=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.make_mask_none.html#numpy.ma.make_mask_none"},{"name":"numpy.ma.mask_cols","description":"Mask columns of a 2D array that contain masked values.","signature":"numpy.ma.mask_cols(a, axis=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.mask_cols.html#numpy.ma.mask_cols"},{"name":"numpy.ma.mask_or","description":"Combine two masks with the logical_or operator.","signature":"numpy.ma.mask_or(m1, m2, copy=False, shrink=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.mask_or.html#numpy.ma.mask_or"},{"name":"numpy.ma.mask_rowcols","description":"Mask rows and/or columns of a 2D array that contain masked values.","signature":"numpy.ma.mask_rowcols(a, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.mask_rowcols.html#numpy.ma.mask_rowcols"},{"name":"numpy.ma.mask_rows","description":"Mask rows of a 2D array that contain masked values.","signature":"numpy.ma.mask_rows(a, axis=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.mask_rows.html#numpy.ma.mask_rows"},{"name":"numpy.ma.masked","description":"The masked constant is a special case of MaskedArray, with a float datatype and a null shape. It is used to test whether a specific entry of a masked array is masked, or to mask one or several entries of a masked array:","signature":"numpy.ma.masked","url":"https://docs.scipy.org/doc/numpy/reference/maskedarray.baseclass.html#numpy.ma.masked"},{"name":"numpy.ma.masked","description":"The masked constant is a special case of MaskedArray, with a float datatype and a null shape. It is used to test whether a specific entry of a masked array is masked, or to mask one or several entries of a masked array:","signature":"numpy.ma.masked","url":"https://docs.scipy.org/doc/numpy/reference/maskedarray.baseclass.html#numpy.ma.masked_print_options"},{"name":"numpy.ma.masked","description":"The masked constant is a special case of MaskedArray, with a float datatype and a null shape. It is used to test whether a specific entry of a masked array is masked, or to mask one or several entries of a masked array:","signature":"numpy.ma.masked","url":"https://docs.scipy.org/doc/numpy/reference/maskedarray.baseclass.html#numpy.ma.MaskedArray"},{"name":"numpy.ma.masked","description":"The masked constant is a special case of MaskedArray, with a float datatype and a null shape. It is used to test whether a specific entry of a masked array is masked, or to mask one or several entries of a masked array:","signature":"numpy.ma.masked","url":"https://docs.scipy.org/doc/numpy/reference/maskedarray.baseclass.html#numpy.ma.nomask"},{"name":"numpy.ma.masked_all","description":"Empty masked array with all elements masked.","signature":"numpy.ma.masked_all(shape, dtype=<class 'float'>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_all.html#numpy.ma.masked_all"},{"name":"numpy.ma.masked_all_like","description":"Empty masked array with the properties of an existing array.","signature":"numpy.ma.masked_all_like(arr)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_all_like.html#numpy.ma.masked_all_like"},{"name":"numpy.ma.masked_equal","description":"Mask an array where equal to a given value.","signature":"numpy.ma.masked_equal(x, value, copy=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_equal.html#numpy.ma.masked_equal"},{"name":"numpy.ma.masked_greater","description":"Mask an array where greater than a given value.","signature":"numpy.ma.masked_greater(x, value, copy=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_greater.html#numpy.ma.masked_greater"},{"name":"numpy.ma.masked_greater_equal","description":"Mask an array where greater than or equal to a given value.","signature":"numpy.ma.masked_greater_equal(x, value, copy=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal"},{"name":"numpy.ma.masked_inside","description":"Mask an array inside a given interval.","signature":"numpy.ma.masked_inside(x, v1, v2, copy=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_inside.html#numpy.ma.masked_inside"},{"name":"numpy.ma.masked_invalid","description":"Mask an array where invalid values occur (NaNs or infs).","signature":"numpy.ma.masked_invalid(a, copy=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_invalid.html#numpy.ma.masked_invalid"},{"name":"numpy.ma.masked_less","description":"Mask an array where less than a given value.","signature":"numpy.ma.masked_less(x, value, copy=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_less.html#numpy.ma.masked_less"},{"name":"numpy.ma.masked_less_equal","description":"Mask an array where less than or equal to a given value.","signature":"numpy.ma.masked_less_equal(x, value, copy=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal"},{"name":"numpy.ma.masked_not_equal","description":"Mask an array where not equal to a given value.","signature":"numpy.ma.masked_not_equal(x, value, copy=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal"},{"name":"numpy.ma.masked_object","description":"Mask the array x where the data are exactly equal to value.","signature":"numpy.ma.masked_object(x, value, copy=True, shrink=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_object.html#numpy.ma.masked_object"},{"name":"numpy.ma.masked_outside","description":"Mask an array outside a given interval.","signature":"numpy.ma.masked_outside(x, v1, v2, copy=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_outside.html#numpy.ma.masked_outside"},{"name":"numpy.ma.masked_values","description":"Mask using floating point equality.","signature":"numpy.ma.masked_values(x, value, rtol=1e-05, atol=1e-08, copy=True, shrink=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_values.html#numpy.ma.masked_values"},{"name":"numpy.ma.masked_where","description":"Mask an array where a condition is met.","signature":"numpy.ma.masked_where(condition, a, copy=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_where.html#numpy.ma.masked_where"},{"name":"numpy.ma.max","description":"Return the maximum along a given axis.","signature":"numpy.ma.max(obj, axis=None, out=None, fill_value=None, keepdims=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.max.html#numpy.ma.max"},{"name":"numpy.ma.maximum_fill_value","description":"Return the minimum value that can be represented by the dtype of an object.","signature":"numpy.ma.maximum_fill_value(obj)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.maximum_fill_value.html#numpy.ma.maximum_fill_value"},{"name":"numpy.ma.mean","description":"Returns the average of the array elements along given axis.","signature":"numpy.ma.mean(self, axis=None, dtype=None, out=None, keepdims=<no value>) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.mean.html#numpy.ma.mean"},{"name":"numpy.ma.median","description":"Compute the median along the specified axis.","signature":"numpy.ma.median(a, axis=None, out=None, overwrite_input=False, keepdims=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.median.html#numpy.ma.median"},{"name":"numpy.ma.min","description":"Return the minimum along a given axis.","signature":"numpy.ma.min(obj, axis=None, out=None, fill_value=None, keepdims=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.min.html#numpy.ma.min"},{"name":"numpy.ma.minimum_fill_value","description":"Return the maximum value that can be represented by the dtype of an object.","signature":"numpy.ma.minimum_fill_value(obj)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.minimum_fill_value.html#numpy.ma.minimum_fill_value"},{"name":"numpy.ma.mr_ = <numpy.ma.extras.mr_class object>","description":"Translate slice objects to concatenation along the first axis.","signature":"numpy.ma.mr_ = <numpy.ma.extras.mr_class object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.mr_.html#numpy.ma.mr_"},{"name":"numpy.ma.nonzero","description":"Return the indices of unmasked elements that are not zero.","signature":"numpy.ma.nonzero(self) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.nonzero.html#numpy.ma.nonzero"},{"name":"numpy.ma.notmasked_contiguous","description":"Find contiguous unmasked data in a masked array along the given axis.","signature":"numpy.ma.notmasked_contiguous(a, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.notmasked_contiguous.html#numpy.ma.notmasked_contiguous"},{"name":"numpy.ma.notmasked_edges","description":"Find the indices of the first and last unmasked values along an axis.","signature":"numpy.ma.notmasked_edges(a, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.notmasked_edges.html#numpy.ma.notmasked_edges"},{"name":"numpy.ma.ones","description":"Return a new array of given shape and type, filled with ones.","signature":"numpy.ma.ones(shape, dtype=None, order='C') = <numpy.ma.core._convert2ma object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.ones.html#numpy.ma.ones"},{"name":"numpy.ma.outer","description":"Compute the outer product of two vectors.","signature":"numpy.ma.outer(a, b)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.outer.html#numpy.ma.outer"},{"name":"numpy.ma.outerproduct","description":"Compute the outer product of two vectors.","signature":"numpy.ma.outerproduct(a, b)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.outerproduct.html#numpy.ma.outerproduct"},{"name":"numpy.ma.polyfit","description":"Least squares polynomial fit.","signature":"numpy.ma.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.polyfit.html#numpy.ma.polyfit"},{"name":"numpy.ma.power","description":"Returns element-wise base array raised to power from second array.","signature":"numpy.ma.power(a, b, third=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.power.html#numpy.ma.power"},{"name":"numpy.ma.prod","description":"Return the product of the array elements over the given axis.","signature":"numpy.ma.prod(self, axis=None, dtype=None, out=None, keepdims=<no value>) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.prod.html#numpy.ma.prod"},{"name":"numpy.ma.ptp","description":"Return (maximum - minimum) along the given dimension (i.e. peak-to-peak value).","signature":"numpy.ma.ptp(obj, axis=None, out=None, fill_value=None, keepdims=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.ptp.html#numpy.ma.ptp"},{"name":"numpy.ma.ravel","description":"Returns a 1D version of self, as a view.","signature":"numpy.ma.ravel(self, order='C') = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.ravel.html#numpy.ma.ravel"},{"name":"numpy.ma.reshape","description":"Returns an array containing the same data with a new shape.","signature":"numpy.ma.reshape(a, new_shape, order='C')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.reshape.html#numpy.ma.reshape"},{"name":"numpy.ma.resize","description":"Return a new masked array with the specified size and shape.","signature":"numpy.ma.resize(x, new_shape)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.resize.html#numpy.ma.resize"},{"name":"numpy.ma.round","description":"Return a copy of a, rounded to ‘decimals’ places.","signature":"numpy.ma.round(a, decimals=0, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.round.html#numpy.ma.round"},{"name":"numpy.ma.row_stack","description":"Stack arrays in sequence vertically (row wise).","signature":"numpy.ma.row_stack(*args, **kwargs) = <numpy.ma.extras._fromnxfunction_seq object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.row_stack.html#numpy.ma.row_stack"},{"name":"numpy.ma.set_fill_value","description":"Set the filling value of a, if a is a masked array.","signature":"numpy.ma.set_fill_value(a, fill_value)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.set_fill_value.html#numpy.ma.set_fill_value"},{"name":"numpy.ma.shape","description":"Return the shape of an array.","signature":"numpy.ma.shape(obj)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.shape.html#numpy.ma.shape"},{"name":"numpy.ma.size","description":"Return the number of elements along a given axis.","signature":"numpy.ma.size(obj, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.size.html#numpy.ma.size"},{"name":"numpy.ma.soften_mask","description":"Force the mask to soft.","signature":"numpy.ma.soften_mask(self) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask"},{"name":"numpy.ma.sort","description":"Return a sorted copy of the masked array.","signature":"numpy.ma.sort(a, axis=-1, kind=None, order=None, endwith=True, fill_value=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.sort.html#numpy.ma.sort"},{"name":"numpy.ma.squeeze","description":"Remove axes of length one from a.","signature":"numpy.ma.squeeze(a, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.squeeze.html#numpy.ma.squeeze"},{"name":"numpy.ma.stack","description":"Join a sequence of arrays along a new axis.","signature":"numpy.ma.stack(*args, **kwargs) = <numpy.ma.extras._fromnxfunction_seq object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.stack.html#numpy.ma.stack"},{"name":"numpy.ma.std","description":"Returns the standard deviation of the array elements along given axis.","signature":"numpy.ma.std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.std.html#numpy.ma.std"},{"name":"numpy.ma.sum","description":"Return the sum of the array elements over the given axis.","signature":"numpy.ma.sum(self, axis=None, dtype=None, out=None, keepdims=<no value>) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.sum.html#numpy.ma.sum"},{"name":"numpy.ma.swapaxes","description":" Return a view of the array with axis1 and axis2 interchanged. Refer to numpy.swapaxes for full documentation. ","signature":"numpy.ma.swapaxes(self, *args, **params) a.swapaxes(axis1, axis2) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.swapaxes.html#numpy.ma.swapaxes"},{"name":"numpy.ma.trace","description":" Return the sum along diagonals of the array. Refer to numpy.trace for full documentation. ","signature":"numpy.ma.trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None) a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.trace.html#numpy.ma.trace"},{"name":"numpy.ma.transpose","description":"Permute the dimensions of an array.","signature":"numpy.ma.transpose(a, axes=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.transpose.html#numpy.ma.transpose"},{"name":"numpy.ma.vander","description":"Generate a Vandermonde matrix.","signature":"numpy.ma.vander(x, n=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.vander.html#numpy.ma.vander"},{"name":"numpy.ma.var","description":"Compute the variance along the specified axis.","signature":"numpy.ma.var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) = <numpy.ma.core._frommethod object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.var.html#numpy.ma.var"},{"name":"numpy.ma.vstack","description":"Stack arrays in sequence vertically (row wise).","signature":"numpy.ma.vstack(*args, **kwargs) = <numpy.ma.extras._fromnxfunction_seq object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.vstack.html#numpy.ma.vstack"},{"name":"numpy.ma.where","description":"Return a masked array with elements from x or y, depending on condition.","signature":"numpy.ma.where(condition, x=<no value>, y=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.where.html#numpy.ma.where"},{"name":"numpy.ma.zeros","description":"Return a new array of given shape and type, filled with zeros.","signature":"numpy.ma.zeros(shape, dtype=float, order='C', *, like=None) = <numpy.ma.core._convert2ma object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.zeros.html#numpy.ma.zeros"},{"name":"numpy.mask_indices","description":"Return the indices to access (n, n) arrays, given a masking function.","signature":"numpy.mask_indices(n, mask_func, k=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.mask_indices.html#numpy.mask_indices"},{"name":"numpy.mat","description":"Interpret the input as a matrix.","signature":"numpy.mat(data, dtype=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.mat.html#numpy.mat"},{"name":"numpy.matlib.empty","description":"Return a new matrix of given shape and type, without initializing entries.","signature":"numpy.matlib.empty(shape, dtype=None, order='C')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.empty.html#numpy.matlib.empty"},{"name":"numpy.matlib.eye","description":"Return a matrix with ones on the diagonal and zeros elsewhere.","signature":"numpy.matlib.eye(n, M=None, k=0, dtype=<class 'float'>, order='C')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.eye.html#numpy.matlib.eye"},{"name":"numpy.matlib.identity","description":"Returns the square identity matrix of given size.","signature":"numpy.matlib.identity(n, dtype=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.identity.html#numpy.matlib.identity"},{"name":"numpy.matlib.ones","description":"Matrix of ones.","signature":"numpy.matlib.ones(shape, dtype=None, order='C')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.ones.html#numpy.matlib.ones"},{"name":"numpy.matlib.rand","description":"Return a matrix of random values with given shape.","signature":"numpy.matlib.rand(*args)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.rand.html#numpy.matlib.rand"},{"name":"numpy.matlib.randn","description":"Return a random matrix with data from the “standard normal” distribution.","signature":"numpy.matlib.randn(*args)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.randn.html#numpy.matlib.randn"},{"name":"numpy.matlib.repmat","description":"Repeat a 0-D to 2-D array or matrix MxN times.","signature":"numpy.matlib.repmat(a, m, n)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.repmat.html#numpy.matlib.repmat"},{"name":"numpy.matlib.zeros","description":"Return a matrix of given shape and type, filled with zeros.","signature":"numpy.matlib.zeros(shape, dtype=None, order='C')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.zeros.html#numpy.matlib.zeros"},{"name":"numpy.matmul","description":"Matrix product of two arrays.","signature":"numpy.matmul(x1, x2, /, out=None, *, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'matmul'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matmul.html#numpy.matmul"},{"name":"numpy.maximum","description":"Element-wise maximum of array elements.","signature":"numpy.maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'maximum'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.maximum.html#numpy.maximum"},{"name":"numpy.maximum_sctype","description":"Return the scalar type of highest precision of the same kind as the input.","signature":"numpy.maximum_sctype(t)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.maximum_sctype.html#numpy.maximum_sctype"},{"name":"numpy.may_share_memory","description":"Determine if two arrays might share memory","signature":"numpy.may_share_memory(a, b, max_work=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.may_share_memory.html#numpy.may_share_memory"},{"name":"numpy.mean","description":"Compute the arithmetic mean along the specified axis.","signature":"numpy.mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html#numpy.mean"},{"name":"numpy.median","description":"Compute the median along the specified axis.","signature":"numpy.median(a, axis=None, out=None, overwrite_input=False, keepdims=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.median.html#numpy.median"},{"name":"numpy.meshgrid","description":"Return coordinate matrices from coordinate vectors.","signature":"numpy.meshgrid(*xi, copy=True, sparse=False, indexing='xy')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.meshgrid.html#numpy.meshgrid"},{"name":"numpy.mgrid = <numpy.lib.index_tricks.MGridClass object>","description":"nd_grid instance which returns a dense multi-dimensional “meshgrid”.","signature":"numpy.mgrid = <numpy.lib.index_tricks.MGridClass object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.mgrid.html#numpy.mgrid"},{"name":"numpy.min_scalar_type","description":"For scalar a, returns the data type with the smallest size and smallest scalar kind which can hold its value.  For non-scalar array a, returns the vector’s dtype unmodified.","signature":"numpy.min_scalar_type(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.min_scalar_type.html#numpy.min_scalar_type"},{"name":"numpy.minimum","description":"Element-wise minimum of array elements.","signature":"numpy.minimum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'minimum'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.minimum.html#numpy.minimum"},{"name":"numpy.mintypecode","description":"Return the character for the minimum-size type to which given types can be safely cast.","signature":"numpy.mintypecode(typechars, typeset='GDFgdf', default='d')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.mintypecode.html#numpy.mintypecode"},{"name":"numpy.mod","description":"Return element-wise remainder of division.","signature":"numpy.mod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'remainder'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.mod.html#numpy.mod"},{"name":"numpy.modf","description":"Return the fractional and integral parts of an array, element-wise.","signature":"numpy.modf(x, [out1, out2, ]/, [out=(None, None), ]*, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'modf'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.modf.html#numpy.modf"},{"name":"numpy.moveaxis","description":"Move axes of an array to new positions.","signature":"numpy.moveaxis(a, source, destination)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.moveaxis.html#numpy.moveaxis"},{"name":"numpy.msort","description":"Return a copy of an array sorted along the first axis.","signature":"numpy.msort(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.msort.html#numpy.msort"},{"name":"numpy.multiply","description":"Multiply arguments element-wise.","signature":"numpy.multiply(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'multiply'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.multiply.html#numpy.multiply"},{"name":"numpy.nan_to_num","description":"Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the nan,  posinf and/or neginf keywords.","signature":"numpy.nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nan_to_num.html#numpy.nan_to_num"},{"name":"numpy.nanargmax","description":"Return the indices of the maximum values in the specified axis ignoring NaNs. For all-NaN slices ValueError is raised. Warning: the results cannot be trusted if a slice contains only NaNs and -Infs.","signature":"numpy.nanargmax(a, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanargmax.html#numpy.nanargmax"},{"name":"numpy.nanargmin","description":"Return the indices of the minimum values in the specified axis ignoring NaNs. For all-NaN slices ValueError is raised. Warning: the results cannot be trusted if a slice contains only NaNs and Infs.","signature":"numpy.nanargmin(a, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanargmin.html#numpy.nanargmin"},{"name":"numpy.nancumprod","description":"Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one.  The cumulative product does not change when NaNs are encountered and leading NaNs are replaced by ones.","signature":"numpy.nancumprod(a, axis=None, dtype=None, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nancumprod.html#numpy.nancumprod"},{"name":"numpy.nancumsum","description":"Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero.  The cumulative sum does not change when NaNs are encountered and leading NaNs are replaced by zeros.","signature":"numpy.nancumsum(a, axis=None, dtype=None, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nancumsum.html#numpy.nancumsum"},{"name":"numpy.nanmax","description":"Return the maximum of an array or maximum along an axis, ignoring any NaNs.  When all-NaN slices are encountered a RuntimeWarning is raised and NaN is returned for that slice.","signature":"numpy.nanmax(a, axis=None, out=None, keepdims=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanmax.html#numpy.nanmax"},{"name":"numpy.nanmean","description":"Compute the arithmetic mean along the specified axis, ignoring NaNs.","signature":"numpy.nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanmean.html#numpy.nanmean"},{"name":"numpy.nanmedian","description":"Compute the median along the specified axis, while ignoring NaNs.","signature":"numpy.nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanmedian.html#numpy.nanmedian"},{"name":"numpy.nanmin","description":"Return minimum of an array or minimum along an axis, ignoring any NaNs. When all-NaN slices are encountered a RuntimeWarning is raised and Nan is returned for that slice.","signature":"numpy.nanmin(a, axis=None, out=None, keepdims=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanmin.html#numpy.nanmin"},{"name":"numpy.nanpercentile","description":"Compute the qth percentile of the data along the specified axis, while ignoring nan values.","signature":"numpy.nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanpercentile.html#numpy.nanpercentile"},{"name":"numpy.nanprod","description":"Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones.","signature":"numpy.nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanprod.html#numpy.nanprod"},{"name":"numpy.nanquantile","description":"Compute the qth quantile of the data along the specified axis, while ignoring nan values. Returns the qth quantile(s) of the array elements.","signature":"numpy.nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanquantile.html#numpy.nanquantile"},{"name":"numpy.nanstd","description":"Compute the standard deviation along the specified axis, while ignoring NaNs.","signature":"numpy.nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanstd.html#numpy.nanstd"},{"name":"numpy.nansum","description":"Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero.","signature":"numpy.nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nansum.html#numpy.nansum"},{"name":"numpy.nanvar","description":"Compute the variance along the specified axis, while ignoring NaNs.","signature":"numpy.nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanvar.html#numpy.nanvar"},{"name":"numpy.negative","description":"Numerical negative, element-wise.","signature":"numpy.negative(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'negative'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.negative.html#numpy.negative"},{"name":"numpy.nested_iters","description":"Create nditers for use in nested loops","signature":"numpy.nested_iters()","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nested_iters.html#numpy.nested_iters"},{"name":"numpy.nextafter","description":"Return the next floating-point value after x1 towards x2, element-wise.","signature":"numpy.nextafter(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'nextafter'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nextafter.html#numpy.nextafter"},{"name":"numpy.nonzero","description":"Return the indices of the elements that are non-zero.","signature":"numpy.nonzero(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nonzero.html#numpy.nonzero"},{"name":"numpy.not_equal","description":"Return (x1 != x2) element-wise.","signature":"numpy.not_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'not_equal'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.not_equal.html#numpy.not_equal"},{"name":"numpy.obj2sctype","description":"Return the scalar dtype or NumPy equivalent of Python type of an object.","signature":"numpy.obj2sctype(rep, default=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.obj2sctype.html#numpy.obj2sctype"},{"name":"numpy.ogrid = <numpy.lib.index_tricks.OGridClass object>","description":"nd_grid instance which returns an open multi-dimensional “meshgrid”.","signature":"numpy.ogrid = <numpy.lib.index_tricks.OGridClass object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ogrid.html#numpy.ogrid"},{"name":"numpy.ones","description":"Return a new array of given shape and type, filled with ones.","signature":"numpy.ones(shape, dtype=None, order='C', *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ones.html#numpy.ones"},{"name":"numpy.ones_like","description":"Return an array of ones with the same shape and type as a given array.","signature":"numpy.ones_like(a, dtype=None, order='K', subok=True, shape=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ones_like.html#numpy.ones_like"},{"name":"numpy.outer","description":"Compute the outer product of two vectors.","signature":"numpy.outer(a, b, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.outer.html#numpy.outer"},{"name":"numpy.packbits","description":"Packs the elements of a binary-valued array into bits in a uint8 array.","signature":"numpy.packbits(a, axis=None, bitorder='big')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.packbits.html#numpy.packbits"},{"name":"numpy.pad","description":"Pad an array.","signature":"numpy.pad(array, pad_width, mode='constant', **kwargs)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.pad.html#numpy.pad"},{"name":"numpy.partition","description":"Return a partitioned copy of an array.","signature":"numpy.partition(a, kth, axis=-1, kind='introselect', order=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.partition.html#numpy.partition"},{"name":"numpy.percentile","description":"Compute the q-th percentile of the data along the specified axis.","signature":"numpy.percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.percentile.html#numpy.percentile"},{"name":"numpy.piecewise","description":"Evaluate a piecewise-defined function.","signature":"numpy.piecewise(x, condlist, funclist, *args, **kw)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.piecewise.html#numpy.piecewise"},{"name":"numpy.place","description":"Change elements of an array based on conditional and input values.","signature":"numpy.place(arr, mask, vals)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.place.html#numpy.place"},{"name":"numpy.poly","description":"Find the coefficients of a polynomial with the given sequence of roots.","signature":"numpy.poly(seq_of_zeros)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.poly.html#numpy.poly"},{"name":"numpy.polyadd","description":"Find the sum of two polynomials.","signature":"numpy.polyadd(a1, a2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polyadd.html#numpy.polyadd"},{"name":"numpy.polyder","description":"Return the derivative of the specified order of a polynomial.","signature":"numpy.polyder(p, m=1)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polyder.html#numpy.polyder"},{"name":"numpy.polydiv","description":"Returns the quotient and remainder of polynomial division.","signature":"numpy.polydiv(u, v)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polydiv.html#numpy.polydiv"},{"name":"numpy.polyfit","description":"Least squares polynomial fit.","signature":"numpy.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polyfit.html#numpy.polyfit"},{"name":"numpy.polyint","description":"Return an antiderivative (indefinite integral) of a polynomial.","signature":"numpy.polyint(p, m=1, k=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polyint.html#numpy.polyint"},{"name":"numpy.polymul","description":"Find the product of two polynomials.","signature":"numpy.polymul(a1, a2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polymul.html#numpy.polymul"},{"name":"numpy.polynomial.chebyshev.cheb2poly","description":"Convert a Chebyshev series to a polynomial.","signature":"numpy.polynomial.chebyshev.cheb2poly(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.cheb2poly.html#numpy.polynomial.chebyshev.cheb2poly"},{"name":"numpy.polynomial.chebyshev.chebadd","description":"Add one Chebyshev series to another.","signature":"numpy.polynomial.chebyshev.chebadd(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebadd.html#numpy.polynomial.chebyshev.chebadd"},{"name":"numpy.polynomial.chebyshev.chebcompanion","description":"Return the scaled companion matrix of c.","signature":"numpy.polynomial.chebyshev.chebcompanion(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebcompanion.html#numpy.polynomial.chebyshev.chebcompanion"},{"name":"numpy.polynomial.chebyshev.chebder","description":"Differentiate a Chebyshev series.","signature":"numpy.polynomial.chebyshev.chebder(c, m=1, scl=1, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebder.html#numpy.polynomial.chebyshev.chebder"},{"name":"numpy.polynomial.chebyshev.chebdiv","description":"Divide one Chebyshev series by another.","signature":"numpy.polynomial.chebyshev.chebdiv(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebdiv.html#numpy.polynomial.chebyshev.chebdiv"},{"name":"numpy.polynomial.chebyshev.chebdomain = array","description":"","signature":"numpy.polynomial.chebyshev.chebdomain = array([-1,  1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebdomain.html#numpy.polynomial.chebyshev.chebdomain"},{"name":"numpy.polynomial.chebyshev.chebfit","description":"Least squares fit of Chebyshev series to data.","signature":"numpy.polynomial.chebyshev.chebfit(x, y, deg, rcond=None, full=False, w=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebfit.html#numpy.polynomial.chebyshev.chebfit"},{"name":"numpy.polynomial.chebyshev.chebfromroots","description":"Generate a Chebyshev series with given roots.","signature":"numpy.polynomial.chebyshev.chebfromroots(roots)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebfromroots.html#numpy.polynomial.chebyshev.chebfromroots"},{"name":"numpy.polynomial.chebyshev.chebgauss","description":"Gauss-Chebyshev quadrature.","signature":"numpy.polynomial.chebyshev.chebgauss(deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebgauss.html#numpy.polynomial.chebyshev.chebgauss"},{"name":"numpy.polynomial.chebyshev.chebgrid2d","description":"Evaluate a 2-D Chebyshev series on the Cartesian product of x and y.","signature":"numpy.polynomial.chebyshev.chebgrid2d(x, y, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebgrid2d.html#numpy.polynomial.chebyshev.chebgrid2d"},{"name":"numpy.polynomial.chebyshev.chebgrid3d","description":"Evaluate a 3-D Chebyshev series on the Cartesian product of x, y, and z.","signature":"numpy.polynomial.chebyshev.chebgrid3d(x, y, z, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebgrid3d.html#numpy.polynomial.chebyshev.chebgrid3d"},{"name":"numpy.polynomial.chebyshev.chebint","description":"Integrate a Chebyshev series.","signature":"numpy.polynomial.chebyshev.chebint(c, m=1, k=[], lbnd=0, scl=1, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebint.html#numpy.polynomial.chebyshev.chebint"},{"name":"numpy.polynomial.chebyshev.chebinterpolate","description":"Interpolate a function at the Chebyshev points of the first kind.","signature":"numpy.polynomial.chebyshev.chebinterpolate(func, deg, args=())","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebinterpolate.html#numpy.polynomial.chebyshev.chebinterpolate"},{"name":"numpy.polynomial.chebyshev.chebline","description":"Chebyshev series whose graph is a straight line.","signature":"numpy.polynomial.chebyshev.chebline(off, scl)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebline.html#numpy.polynomial.chebyshev.chebline"},{"name":"numpy.polynomial.chebyshev.chebmul","description":"Multiply one Chebyshev series by another.","signature":"numpy.polynomial.chebyshev.chebmul(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebmul.html#numpy.polynomial.chebyshev.chebmul"},{"name":"numpy.polynomial.chebyshev.chebmulx","description":"Multiply a Chebyshev series by x.","signature":"numpy.polynomial.chebyshev.chebmulx(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebmulx.html#numpy.polynomial.chebyshev.chebmulx"},{"name":"numpy.polynomial.chebyshev.chebone = array","description":"","signature":"numpy.polynomial.chebyshev.chebone = array([1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebone.html#numpy.polynomial.chebyshev.chebone"},{"name":"numpy.polynomial.chebyshev.chebpow","description":"Raise a Chebyshev series to a power.","signature":"numpy.polynomial.chebyshev.chebpow(c, pow, maxpower=16)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebpow.html#numpy.polynomial.chebyshev.chebpow"},{"name":"numpy.polynomial.chebyshev.chebpts1","description":"Chebyshev points of the first kind.","signature":"numpy.polynomial.chebyshev.chebpts1(npts)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebpts1.html#numpy.polynomial.chebyshev.chebpts1"},{"name":"numpy.polynomial.chebyshev.chebpts2","description":"Chebyshev points of the second kind.","signature":"numpy.polynomial.chebyshev.chebpts2(npts)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebpts2.html#numpy.polynomial.chebyshev.chebpts2"},{"name":"numpy.polynomial.chebyshev.chebroots","description":"Compute the roots of a Chebyshev series.","signature":"numpy.polynomial.chebyshev.chebroots(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebroots.html#numpy.polynomial.chebyshev.chebroots"},{"name":"numpy.polynomial.chebyshev.chebsub","description":"Subtract one Chebyshev series from another.","signature":"numpy.polynomial.chebyshev.chebsub(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebsub.html#numpy.polynomial.chebyshev.chebsub"},{"name":"numpy.polynomial.chebyshev.chebtrim","description":"Remove “small” “trailing” coefficients from a polynomial.","signature":"numpy.polynomial.chebyshev.chebtrim(c, tol=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebtrim.html#numpy.polynomial.chebyshev.chebtrim"},{"name":"numpy.polynomial.chebyshev.chebval","description":"Evaluate a Chebyshev series at points x.","signature":"numpy.polynomial.chebyshev.chebval(x, c, tensor=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebval.html#numpy.polynomial.chebyshev.chebval"},{"name":"numpy.polynomial.chebyshev.chebval2d","description":"Evaluate a 2-D Chebyshev series at points (x, y).","signature":"numpy.polynomial.chebyshev.chebval2d(x, y, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebval2d.html#numpy.polynomial.chebyshev.chebval2d"},{"name":"numpy.polynomial.chebyshev.chebval3d","description":"Evaluate a 3-D Chebyshev series at points (x, y, z).","signature":"numpy.polynomial.chebyshev.chebval3d(x, y, z, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebval3d.html#numpy.polynomial.chebyshev.chebval3d"},{"name":"numpy.polynomial.chebyshev.chebvander","description":"Pseudo-Vandermonde matrix of given degree.","signature":"numpy.polynomial.chebyshev.chebvander(x, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebvander.html#numpy.polynomial.chebyshev.chebvander"},{"name":"numpy.polynomial.chebyshev.chebvander2d","description":"Pseudo-Vandermonde matrix of given degrees.","signature":"numpy.polynomial.chebyshev.chebvander2d(x, y, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebvander2d.html#numpy.polynomial.chebyshev.chebvander2d"},{"name":"numpy.polynomial.chebyshev.chebvander3d","description":"Pseudo-Vandermonde matrix of given degrees.","signature":"numpy.polynomial.chebyshev.chebvander3d(x, y, z, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebvander3d.html#numpy.polynomial.chebyshev.chebvander3d"},{"name":"numpy.polynomial.chebyshev.chebweight","description":"The weight function of the Chebyshev polynomials.","signature":"numpy.polynomial.chebyshev.chebweight(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebweight.html#numpy.polynomial.chebyshev.chebweight"},{"name":"numpy.polynomial.chebyshev.chebx = array","description":"","signature":"numpy.polynomial.chebyshev.chebx = array([0, 1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebx.html#numpy.polynomial.chebyshev.chebx"},{"name":"numpy.polynomial.chebyshev.chebzero = array","description":"","signature":"numpy.polynomial.chebyshev.chebzero = array([0])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebzero.html#numpy.polynomial.chebyshev.chebzero"},{"name":"numpy.polynomial.chebyshev.poly2cheb","description":"Convert a polynomial to a Chebyshev series.","signature":"numpy.polynomial.chebyshev.poly2cheb(pol)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.poly2cheb.html#numpy.polynomial.chebyshev.poly2cheb"},{"name":"numpy.polynomial.hermite.herm2poly","description":"Convert a Hermite series to a polynomial.","signature":"numpy.polynomial.hermite.herm2poly(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.herm2poly.html#numpy.polynomial.hermite.herm2poly"},{"name":"numpy.polynomial.hermite.hermadd","description":"Add one Hermite series to another.","signature":"numpy.polynomial.hermite.hermadd(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermadd.html#numpy.polynomial.hermite.hermadd"},{"name":"numpy.polynomial.hermite.hermcompanion","description":"Return the scaled companion matrix of c.","signature":"numpy.polynomial.hermite.hermcompanion(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermcompanion.html#numpy.polynomial.hermite.hermcompanion"},{"name":"numpy.polynomial.hermite.hermder","description":"Differentiate a Hermite series.","signature":"numpy.polynomial.hermite.hermder(c, m=1, scl=1, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermder.html#numpy.polynomial.hermite.hermder"},{"name":"numpy.polynomial.hermite.hermdiv","description":"Divide one Hermite series by another.","signature":"numpy.polynomial.hermite.hermdiv(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermdiv.html#numpy.polynomial.hermite.hermdiv"},{"name":"numpy.polynomial.hermite.hermdomain = array","description":"","signature":"numpy.polynomial.hermite.hermdomain = array([-1,  1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermdomain.html#numpy.polynomial.hermite.hermdomain"},{"name":"numpy.polynomial.hermite.hermfit","description":"Least squares fit of Hermite series to data.","signature":"numpy.polynomial.hermite.hermfit(x, y, deg, rcond=None, full=False, w=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermfit.html#numpy.polynomial.hermite.hermfit"},{"name":"numpy.polynomial.hermite.hermfromroots","description":"Generate a Hermite series with given roots.","signature":"numpy.polynomial.hermite.hermfromroots(roots)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermfromroots.html#numpy.polynomial.hermite.hermfromroots"},{"name":"numpy.polynomial.hermite.hermgauss","description":"Gauss-Hermite quadrature.","signature":"numpy.polynomial.hermite.hermgauss(deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermgauss.html#numpy.polynomial.hermite.hermgauss"},{"name":"numpy.polynomial.hermite.hermgrid2d","description":"Evaluate a 2-D Hermite series on the Cartesian product of x and y.","signature":"numpy.polynomial.hermite.hermgrid2d(x, y, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermgrid2d.html#numpy.polynomial.hermite.hermgrid2d"},{"name":"numpy.polynomial.hermite.hermgrid3d","description":"Evaluate a 3-D Hermite series on the Cartesian product of x, y, and z.","signature":"numpy.polynomial.hermite.hermgrid3d(x, y, z, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermgrid3d.html#numpy.polynomial.hermite.hermgrid3d"},{"name":"numpy.polynomial.hermite.hermint","description":"Integrate a Hermite series.","signature":"numpy.polynomial.hermite.hermint(c, m=1, k=[], lbnd=0, scl=1, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermint.html#numpy.polynomial.hermite.hermint"},{"name":"numpy.polynomial.hermite.hermline","description":"Hermite series whose graph is a straight line.","signature":"numpy.polynomial.hermite.hermline(off, scl)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermline.html#numpy.polynomial.hermite.hermline"},{"name":"numpy.polynomial.hermite.hermmul","description":"Multiply one Hermite series by another.","signature":"numpy.polynomial.hermite.hermmul(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermmul.html#numpy.polynomial.hermite.hermmul"},{"name":"numpy.polynomial.hermite.hermmulx","description":"Multiply a Hermite series by x.","signature":"numpy.polynomial.hermite.hermmulx(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermmulx.html#numpy.polynomial.hermite.hermmulx"},{"name":"numpy.polynomial.hermite.hermone = array","description":"","signature":"numpy.polynomial.hermite.hermone = array([1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermone.html#numpy.polynomial.hermite.hermone"},{"name":"numpy.polynomial.hermite.hermpow","description":"Raise a Hermite series to a power.","signature":"numpy.polynomial.hermite.hermpow(c, pow, maxpower=16)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermpow.html#numpy.polynomial.hermite.hermpow"},{"name":"numpy.polynomial.hermite.hermroots","description":"Compute the roots of a Hermite series.","signature":"numpy.polynomial.hermite.hermroots(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermroots.html#numpy.polynomial.hermite.hermroots"},{"name":"numpy.polynomial.hermite.hermsub","description":"Subtract one Hermite series from another.","signature":"numpy.polynomial.hermite.hermsub(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermsub.html#numpy.polynomial.hermite.hermsub"},{"name":"numpy.polynomial.hermite.hermtrim","description":"Remove “small” “trailing” coefficients from a polynomial.","signature":"numpy.polynomial.hermite.hermtrim(c, tol=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermtrim.html#numpy.polynomial.hermite.hermtrim"},{"name":"numpy.polynomial.hermite.hermval","description":"Evaluate an Hermite series at points x.","signature":"numpy.polynomial.hermite.hermval(x, c, tensor=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermval.html#numpy.polynomial.hermite.hermval"},{"name":"numpy.polynomial.hermite.hermval2d","description":"Evaluate a 2-D Hermite series at points (x, y).","signature":"numpy.polynomial.hermite.hermval2d(x, y, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermval2d.html#numpy.polynomial.hermite.hermval2d"},{"name":"numpy.polynomial.hermite.hermval3d","description":"Evaluate a 3-D Hermite series at points (x, y, z).","signature":"numpy.polynomial.hermite.hermval3d(x, y, z, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermval3d.html#numpy.polynomial.hermite.hermval3d"},{"name":"numpy.polynomial.hermite.hermvander","description":"Pseudo-Vandermonde matrix of given degree.","signature":"numpy.polynomial.hermite.hermvander(x, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermvander.html#numpy.polynomial.hermite.hermvander"},{"name":"numpy.polynomial.hermite.hermvander2d","description":"Pseudo-Vandermonde matrix of given degrees.","signature":"numpy.polynomial.hermite.hermvander2d(x, y, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermvander2d.html#numpy.polynomial.hermite.hermvander2d"},{"name":"numpy.polynomial.hermite.hermvander3d","description":"Pseudo-Vandermonde matrix of given degrees.","signature":"numpy.polynomial.hermite.hermvander3d(x, y, z, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermvander3d.html#numpy.polynomial.hermite.hermvander3d"},{"name":"numpy.polynomial.hermite.hermweight","description":"Weight function of the Hermite polynomials.","signature":"numpy.polynomial.hermite.hermweight(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermweight.html#numpy.polynomial.hermite.hermweight"},{"name":"numpy.polynomial.hermite.hermx = array","description":"","signature":"numpy.polynomial.hermite.hermx = array([0. , 0.5])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermx.html#numpy.polynomial.hermite.hermx"},{"name":"numpy.polynomial.hermite.hermzero = array","description":"","signature":"numpy.polynomial.hermite.hermzero = array([0])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermzero.html#numpy.polynomial.hermite.hermzero"},{"name":"numpy.polynomial.hermite.poly2herm","description":"Convert a polynomial to a Hermite series.","signature":"numpy.polynomial.hermite.poly2herm(pol)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.poly2herm.html#numpy.polynomial.hermite.poly2herm"},{"name":"numpy.polynomial.hermite_e.herme2poly","description":"Convert a Hermite series to a polynomial.","signature":"numpy.polynomial.hermite_e.herme2poly(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.herme2poly.html#numpy.polynomial.hermite_e.herme2poly"},{"name":"numpy.polynomial.hermite_e.hermeadd","description":"Add one Hermite series to another.","signature":"numpy.polynomial.hermite_e.hermeadd(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeadd.html#numpy.polynomial.hermite_e.hermeadd"},{"name":"numpy.polynomial.hermite_e.hermecompanion","description":"Return the scaled companion matrix of c.","signature":"numpy.polynomial.hermite_e.hermecompanion(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermecompanion.html#numpy.polynomial.hermite_e.hermecompanion"},{"name":"numpy.polynomial.hermite_e.hermeder","description":"Differentiate a Hermite_e series.","signature":"numpy.polynomial.hermite_e.hermeder(c, m=1, scl=1, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeder.html#numpy.polynomial.hermite_e.hermeder"},{"name":"numpy.polynomial.hermite_e.hermediv","description":"Divide one Hermite series by another.","signature":"numpy.polynomial.hermite_e.hermediv(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermediv.html#numpy.polynomial.hermite_e.hermediv"},{"name":"numpy.polynomial.hermite_e.hermedomain = array","description":"","signature":"numpy.polynomial.hermite_e.hermedomain = array([-1,  1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermedomain.html#numpy.polynomial.hermite_e.hermedomain"},{"name":"numpy.polynomial.hermite_e.hermefit","description":"Least squares fit of Hermite series to data.","signature":"numpy.polynomial.hermite_e.hermefit(x, y, deg, rcond=None, full=False, w=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermefit.html#numpy.polynomial.hermite_e.hermefit"},{"name":"numpy.polynomial.hermite_e.hermefromroots","description":"Generate a HermiteE series with given roots.","signature":"numpy.polynomial.hermite_e.hermefromroots(roots)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermefromroots.html#numpy.polynomial.hermite_e.hermefromroots"},{"name":"numpy.polynomial.hermite_e.hermegauss","description":"Gauss-HermiteE quadrature.","signature":"numpy.polynomial.hermite_e.hermegauss(deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermegauss.html#numpy.polynomial.hermite_e.hermegauss"},{"name":"numpy.polynomial.hermite_e.hermegrid2d","description":"Evaluate a 2-D HermiteE series on the Cartesian product of x and y.","signature":"numpy.polynomial.hermite_e.hermegrid2d(x, y, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermegrid2d.html#numpy.polynomial.hermite_e.hermegrid2d"},{"name":"numpy.polynomial.hermite_e.hermegrid3d","description":"Evaluate a 3-D HermiteE series on the Cartesian product of x, y, and z.","signature":"numpy.polynomial.hermite_e.hermegrid3d(x, y, z, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermegrid3d.html#numpy.polynomial.hermite_e.hermegrid3d"},{"name":"numpy.polynomial.hermite_e.hermeint","description":"Integrate a Hermite_e series.","signature":"numpy.polynomial.hermite_e.hermeint(c, m=1, k=[], lbnd=0, scl=1, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeint.html#numpy.polynomial.hermite_e.hermeint"},{"name":"numpy.polynomial.hermite_e.hermeline","description":"Hermite series whose graph is a straight line.","signature":"numpy.polynomial.hermite_e.hermeline(off, scl)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeline.html#numpy.polynomial.hermite_e.hermeline"},{"name":"numpy.polynomial.hermite_e.hermemul","description":"Multiply one Hermite series by another.","signature":"numpy.polynomial.hermite_e.hermemul(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermemul.html#numpy.polynomial.hermite_e.hermemul"},{"name":"numpy.polynomial.hermite_e.hermemulx","description":"Multiply a Hermite series by x.","signature":"numpy.polynomial.hermite_e.hermemulx(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermemulx.html#numpy.polynomial.hermite_e.hermemulx"},{"name":"numpy.polynomial.hermite_e.hermeone = array","description":"","signature":"numpy.polynomial.hermite_e.hermeone = array([1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeone.html#numpy.polynomial.hermite_e.hermeone"},{"name":"numpy.polynomial.hermite_e.hermepow","description":"Raise a Hermite series to a power.","signature":"numpy.polynomial.hermite_e.hermepow(c, pow, maxpower=16)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermepow.html#numpy.polynomial.hermite_e.hermepow"},{"name":"numpy.polynomial.hermite_e.hermeroots","description":"Compute the roots of a HermiteE series.","signature":"numpy.polynomial.hermite_e.hermeroots(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeroots.html#numpy.polynomial.hermite_e.hermeroots"},{"name":"numpy.polynomial.hermite_e.hermesub","description":"Subtract one Hermite series from another.","signature":"numpy.polynomial.hermite_e.hermesub(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermesub.html#numpy.polynomial.hermite_e.hermesub"},{"name":"numpy.polynomial.hermite_e.hermetrim","description":"Remove “small” “trailing” coefficients from a polynomial.","signature":"numpy.polynomial.hermite_e.hermetrim(c, tol=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermetrim.html#numpy.polynomial.hermite_e.hermetrim"},{"name":"numpy.polynomial.hermite_e.hermeval","description":"Evaluate an HermiteE series at points x.","signature":"numpy.polynomial.hermite_e.hermeval(x, c, tensor=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeval.html#numpy.polynomial.hermite_e.hermeval"},{"name":"numpy.polynomial.hermite_e.hermeval2d","description":"Evaluate a 2-D HermiteE series at points (x, y).","signature":"numpy.polynomial.hermite_e.hermeval2d(x, y, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeval2d.html#numpy.polynomial.hermite_e.hermeval2d"},{"name":"numpy.polynomial.hermite_e.hermeval3d","description":"Evaluate a 3-D Hermite_e series at points (x, y, z).","signature":"numpy.polynomial.hermite_e.hermeval3d(x, y, z, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeval3d.html#numpy.polynomial.hermite_e.hermeval3d"},{"name":"numpy.polynomial.hermite_e.hermevander","description":"Pseudo-Vandermonde matrix of given degree.","signature":"numpy.polynomial.hermite_e.hermevander(x, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermevander.html#numpy.polynomial.hermite_e.hermevander"},{"name":"numpy.polynomial.hermite_e.hermevander2d","description":"Pseudo-Vandermonde matrix of given degrees.","signature":"numpy.polynomial.hermite_e.hermevander2d(x, y, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermevander2d.html#numpy.polynomial.hermite_e.hermevander2d"},{"name":"numpy.polynomial.hermite_e.hermevander3d","description":"Pseudo-Vandermonde matrix of given degrees.","signature":"numpy.polynomial.hermite_e.hermevander3d(x, y, z, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermevander3d.html#numpy.polynomial.hermite_e.hermevander3d"},{"name":"numpy.polynomial.hermite_e.hermeweight","description":"Weight function of the Hermite_e polynomials.","signature":"numpy.polynomial.hermite_e.hermeweight(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeweight.html#numpy.polynomial.hermite_e.hermeweight"},{"name":"numpy.polynomial.hermite_e.hermex = array","description":"","signature":"numpy.polynomial.hermite_e.hermex = array([0, 1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermex.html#numpy.polynomial.hermite_e.hermex"},{"name":"numpy.polynomial.hermite_e.hermezero = array","description":"","signature":"numpy.polynomial.hermite_e.hermezero = array([0])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermezero.html#numpy.polynomial.hermite_e.hermezero"},{"name":"numpy.polynomial.hermite_e.poly2herme","description":"Convert a polynomial to a Hermite series.","signature":"numpy.polynomial.hermite_e.poly2herme(pol)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.poly2herme.html#numpy.polynomial.hermite_e.poly2herme"},{"name":"numpy.polynomial.laguerre.lag2poly","description":"Convert a Laguerre series to a polynomial.","signature":"numpy.polynomial.laguerre.lag2poly(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lag2poly.html#numpy.polynomial.laguerre.lag2poly"},{"name":"numpy.polynomial.laguerre.lagadd","description":"Add one Laguerre series to another.","signature":"numpy.polynomial.laguerre.lagadd(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagadd.html#numpy.polynomial.laguerre.lagadd"},{"name":"numpy.polynomial.laguerre.lagcompanion","description":"Return the companion matrix of c.","signature":"numpy.polynomial.laguerre.lagcompanion(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagcompanion.html#numpy.polynomial.laguerre.lagcompanion"},{"name":"numpy.polynomial.laguerre.lagder","description":"Differentiate a Laguerre series.","signature":"numpy.polynomial.laguerre.lagder(c, m=1, scl=1, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagder.html#numpy.polynomial.laguerre.lagder"},{"name":"numpy.polynomial.laguerre.lagdiv","description":"Divide one Laguerre series by another.","signature":"numpy.polynomial.laguerre.lagdiv(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagdiv.html#numpy.polynomial.laguerre.lagdiv"},{"name":"numpy.polynomial.laguerre.lagdomain = array","description":"","signature":"numpy.polynomial.laguerre.lagdomain = array([0, 1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagdomain.html#numpy.polynomial.laguerre.lagdomain"},{"name":"numpy.polynomial.laguerre.lagfit","description":"Least squares fit of Laguerre series to data.","signature":"numpy.polynomial.laguerre.lagfit(x, y, deg, rcond=None, full=False, w=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagfit.html#numpy.polynomial.laguerre.lagfit"},{"name":"numpy.polynomial.laguerre.lagfromroots","description":"Generate a Laguerre series with given roots.","signature":"numpy.polynomial.laguerre.lagfromroots(roots)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagfromroots.html#numpy.polynomial.laguerre.lagfromroots"},{"name":"numpy.polynomial.laguerre.laggauss","description":"Gauss-Laguerre quadrature.","signature":"numpy.polynomial.laguerre.laggauss(deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.laggauss.html#numpy.polynomial.laguerre.laggauss"},{"name":"numpy.polynomial.laguerre.laggrid2d","description":"Evaluate a 2-D Laguerre series on the Cartesian product of x and y.","signature":"numpy.polynomial.laguerre.laggrid2d(x, y, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.laggrid2d.html#numpy.polynomial.laguerre.laggrid2d"},{"name":"numpy.polynomial.laguerre.laggrid3d","description":"Evaluate a 3-D Laguerre series on the Cartesian product of x, y, and z.","signature":"numpy.polynomial.laguerre.laggrid3d(x, y, z, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.laggrid3d.html#numpy.polynomial.laguerre.laggrid3d"},{"name":"numpy.polynomial.laguerre.lagint","description":"Integrate a Laguerre series.","signature":"numpy.polynomial.laguerre.lagint(c, m=1, k=[], lbnd=0, scl=1, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagint.html#numpy.polynomial.laguerre.lagint"},{"name":"numpy.polynomial.laguerre.lagline","description":"Laguerre series whose graph is a straight line.","signature":"numpy.polynomial.laguerre.lagline(off, scl)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagline.html#numpy.polynomial.laguerre.lagline"},{"name":"numpy.polynomial.laguerre.lagmul","description":"Multiply one Laguerre series by another.","signature":"numpy.polynomial.laguerre.lagmul(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagmul.html#numpy.polynomial.laguerre.lagmul"},{"name":"numpy.polynomial.laguerre.lagmulx","description":"Multiply a Laguerre series by x.","signature":"numpy.polynomial.laguerre.lagmulx(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagmulx.html#numpy.polynomial.laguerre.lagmulx"},{"name":"numpy.polynomial.laguerre.lagone = array","description":"","signature":"numpy.polynomial.laguerre.lagone = array([1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagone.html#numpy.polynomial.laguerre.lagone"},{"name":"numpy.polynomial.laguerre.lagpow","description":"Raise a Laguerre series to a power.","signature":"numpy.polynomial.laguerre.lagpow(c, pow, maxpower=16)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagpow.html#numpy.polynomial.laguerre.lagpow"},{"name":"numpy.polynomial.laguerre.lagroots","description":"Compute the roots of a Laguerre series.","signature":"numpy.polynomial.laguerre.lagroots(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagroots.html#numpy.polynomial.laguerre.lagroots"},{"name":"numpy.polynomial.laguerre.lagsub","description":"Subtract one Laguerre series from another.","signature":"numpy.polynomial.laguerre.lagsub(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagsub.html#numpy.polynomial.laguerre.lagsub"},{"name":"numpy.polynomial.laguerre.lagtrim","description":"Remove “small” “trailing” coefficients from a polynomial.","signature":"numpy.polynomial.laguerre.lagtrim(c, tol=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagtrim.html#numpy.polynomial.laguerre.lagtrim"},{"name":"numpy.polynomial.laguerre.lagval","description":"Evaluate a Laguerre series at points x.","signature":"numpy.polynomial.laguerre.lagval(x, c, tensor=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagval.html#numpy.polynomial.laguerre.lagval"},{"name":"numpy.polynomial.laguerre.lagval2d","description":"Evaluate a 2-D Laguerre series at points (x, y).","signature":"numpy.polynomial.laguerre.lagval2d(x, y, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagval2d.html#numpy.polynomial.laguerre.lagval2d"},{"name":"numpy.polynomial.laguerre.lagval3d","description":"Evaluate a 3-D Laguerre series at points (x, y, z).","signature":"numpy.polynomial.laguerre.lagval3d(x, y, z, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagval3d.html#numpy.polynomial.laguerre.lagval3d"},{"name":"numpy.polynomial.laguerre.lagvander","description":"Pseudo-Vandermonde matrix of given degree.","signature":"numpy.polynomial.laguerre.lagvander(x, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagvander.html#numpy.polynomial.laguerre.lagvander"},{"name":"numpy.polynomial.laguerre.lagvander2d","description":"Pseudo-Vandermonde matrix of given degrees.","signature":"numpy.polynomial.laguerre.lagvander2d(x, y, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagvander2d.html#numpy.polynomial.laguerre.lagvander2d"},{"name":"numpy.polynomial.laguerre.lagvander3d","description":"Pseudo-Vandermonde matrix of given degrees.","signature":"numpy.polynomial.laguerre.lagvander3d(x, y, z, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagvander3d.html#numpy.polynomial.laguerre.lagvander3d"},{"name":"numpy.polynomial.laguerre.lagweight","description":"Weight function of the Laguerre polynomials.","signature":"numpy.polynomial.laguerre.lagweight(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagweight.html#numpy.polynomial.laguerre.lagweight"},{"name":"numpy.polynomial.laguerre.lagx = array","description":"","signature":"numpy.polynomial.laguerre.lagx = array([ 1, -1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagx.html#numpy.polynomial.laguerre.lagx"},{"name":"numpy.polynomial.laguerre.lagzero = array","description":"","signature":"numpy.polynomial.laguerre.lagzero = array([0])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagzero.html#numpy.polynomial.laguerre.lagzero"},{"name":"numpy.polynomial.laguerre.poly2lag","description":"Convert a polynomial to a Laguerre series.","signature":"numpy.polynomial.laguerre.poly2lag(pol)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.poly2lag.html#numpy.polynomial.laguerre.poly2lag"},{"name":"numpy.polynomial.legendre.leg2poly","description":"Convert a Legendre series to a polynomial.","signature":"numpy.polynomial.legendre.leg2poly(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.leg2poly.html#numpy.polynomial.legendre.leg2poly"},{"name":"numpy.polynomial.legendre.legadd","description":"Add one Legendre series to another.","signature":"numpy.polynomial.legendre.legadd(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legadd.html#numpy.polynomial.legendre.legadd"},{"name":"numpy.polynomial.legendre.legcompanion","description":"Return the scaled companion matrix of c.","signature":"numpy.polynomial.legendre.legcompanion(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legcompanion.html#numpy.polynomial.legendre.legcompanion"},{"name":"numpy.polynomial.legendre.legder","description":"Differentiate a Legendre series.","signature":"numpy.polynomial.legendre.legder(c, m=1, scl=1, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legder.html#numpy.polynomial.legendre.legder"},{"name":"numpy.polynomial.legendre.legdiv","description":"Divide one Legendre series by another.","signature":"numpy.polynomial.legendre.legdiv(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legdiv.html#numpy.polynomial.legendre.legdiv"},{"name":"numpy.polynomial.legendre.legdomain = array","description":"","signature":"numpy.polynomial.legendre.legdomain = array([-1,  1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legdomain.html#numpy.polynomial.legendre.legdomain"},{"name":"numpy.polynomial.legendre.legfit","description":"Least squares fit of Legendre series to data.","signature":"numpy.polynomial.legendre.legfit(x, y, deg, rcond=None, full=False, w=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legfit.html#numpy.polynomial.legendre.legfit"},{"name":"numpy.polynomial.legendre.legfromroots","description":"Generate a Legendre series with given roots.","signature":"numpy.polynomial.legendre.legfromroots(roots)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legfromroots.html#numpy.polynomial.legendre.legfromroots"},{"name":"numpy.polynomial.legendre.leggauss","description":"Gauss-Legendre quadrature.","signature":"numpy.polynomial.legendre.leggauss(deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.leggauss.html#numpy.polynomial.legendre.leggauss"},{"name":"numpy.polynomial.legendre.leggrid2d","description":"Evaluate a 2-D Legendre series on the Cartesian product of x and y.","signature":"numpy.polynomial.legendre.leggrid2d(x, y, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.leggrid2d.html#numpy.polynomial.legendre.leggrid2d"},{"name":"numpy.polynomial.legendre.leggrid3d","description":"Evaluate a 3-D Legendre series on the Cartesian product of x, y, and z.","signature":"numpy.polynomial.legendre.leggrid3d(x, y, z, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.leggrid3d.html#numpy.polynomial.legendre.leggrid3d"},{"name":"numpy.polynomial.legendre.legint","description":"Integrate a Legendre series.","signature":"numpy.polynomial.legendre.legint(c, m=1, k=[], lbnd=0, scl=1, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legint.html#numpy.polynomial.legendre.legint"},{"name":"numpy.polynomial.legendre.legline","description":"Legendre series whose graph is a straight line.","signature":"numpy.polynomial.legendre.legline(off, scl)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legline.html#numpy.polynomial.legendre.legline"},{"name":"numpy.polynomial.legendre.legmul","description":"Multiply one Legendre series by another.","signature":"numpy.polynomial.legendre.legmul(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legmul.html#numpy.polynomial.legendre.legmul"},{"name":"numpy.polynomial.legendre.legmulx","description":"Multiply a Legendre series by x.","signature":"numpy.polynomial.legendre.legmulx(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legmulx.html#numpy.polynomial.legendre.legmulx"},{"name":"numpy.polynomial.legendre.legone = array","description":"","signature":"numpy.polynomial.legendre.legone = array([1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legone.html#numpy.polynomial.legendre.legone"},{"name":"numpy.polynomial.legendre.legpow","description":"Raise a Legendre series to a power.","signature":"numpy.polynomial.legendre.legpow(c, pow, maxpower=16)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legpow.html#numpy.polynomial.legendre.legpow"},{"name":"numpy.polynomial.legendre.legroots","description":"Compute the roots of a Legendre series.","signature":"numpy.polynomial.legendre.legroots(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legroots.html#numpy.polynomial.legendre.legroots"},{"name":"numpy.polynomial.legendre.legsub","description":"Subtract one Legendre series from another.","signature":"numpy.polynomial.legendre.legsub(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legsub.html#numpy.polynomial.legendre.legsub"},{"name":"numpy.polynomial.legendre.legtrim","description":"Remove “small” “trailing” coefficients from a polynomial.","signature":"numpy.polynomial.legendre.legtrim(c, tol=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legtrim.html#numpy.polynomial.legendre.legtrim"},{"name":"numpy.polynomial.legendre.legval","description":"Evaluate a Legendre series at points x.","signature":"numpy.polynomial.legendre.legval(x, c, tensor=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legval.html#numpy.polynomial.legendre.legval"},{"name":"numpy.polynomial.legendre.legval2d","description":"Evaluate a 2-D Legendre series at points (x, y).","signature":"numpy.polynomial.legendre.legval2d(x, y, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legval2d.html#numpy.polynomial.legendre.legval2d"},{"name":"numpy.polynomial.legendre.legval3d","description":"Evaluate a 3-D Legendre series at points (x, y, z).","signature":"numpy.polynomial.legendre.legval3d(x, y, z, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legval3d.html#numpy.polynomial.legendre.legval3d"},{"name":"numpy.polynomial.legendre.legvander","description":"Pseudo-Vandermonde matrix of given degree.","signature":"numpy.polynomial.legendre.legvander(x, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legvander.html#numpy.polynomial.legendre.legvander"},{"name":"numpy.polynomial.legendre.legvander2d","description":"Pseudo-Vandermonde matrix of given degrees.","signature":"numpy.polynomial.legendre.legvander2d(x, y, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legvander2d.html#numpy.polynomial.legendre.legvander2d"},{"name":"numpy.polynomial.legendre.legvander3d","description":"Pseudo-Vandermonde matrix of given degrees.","signature":"numpy.polynomial.legendre.legvander3d(x, y, z, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legvander3d.html#numpy.polynomial.legendre.legvander3d"},{"name":"numpy.polynomial.legendre.legweight","description":"Weight function of the Legendre polynomials.","signature":"numpy.polynomial.legendre.legweight(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legweight.html#numpy.polynomial.legendre.legweight"},{"name":"numpy.polynomial.legendre.legx = array","description":"","signature":"numpy.polynomial.legendre.legx = array([0, 1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legx.html#numpy.polynomial.legendre.legx"},{"name":"numpy.polynomial.legendre.legzero = array","description":"","signature":"numpy.polynomial.legendre.legzero = array([0])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legzero.html#numpy.polynomial.legendre.legzero"},{"name":"numpy.polynomial.legendre.poly2leg","description":"Convert a polynomial to a Legendre series.","signature":"numpy.polynomial.legendre.poly2leg(pol)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.poly2leg.html#numpy.polynomial.legendre.poly2leg"},{"name":"numpy.polynomial.polynomial.polyadd","description":"Add one polynomial to another.","signature":"numpy.polynomial.polynomial.polyadd(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyadd.html#numpy.polynomial.polynomial.polyadd"},{"name":"numpy.polynomial.polynomial.polycompanion","description":"Return the companion matrix of c.","signature":"numpy.polynomial.polynomial.polycompanion(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polycompanion.html#numpy.polynomial.polynomial.polycompanion"},{"name":"numpy.polynomial.polynomial.polyder","description":"Differentiate a polynomial.","signature":"numpy.polynomial.polynomial.polyder(c, m=1, scl=1, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyder.html#numpy.polynomial.polynomial.polyder"},{"name":"numpy.polynomial.polynomial.polydiv","description":"Divide one polynomial by another.","signature":"numpy.polynomial.polynomial.polydiv(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polydiv.html#numpy.polynomial.polynomial.polydiv"},{"name":"numpy.polynomial.polynomial.polydomain = array","description":"","signature":"numpy.polynomial.polynomial.polydomain = array([-1,  1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polydomain.html#numpy.polynomial.polynomial.polydomain"},{"name":"numpy.polynomial.polynomial.polyfit","description":"Least-squares fit of a polynomial to data.","signature":"numpy.polynomial.polynomial.polyfit(x, y, deg, rcond=None, full=False, w=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyfit.html#numpy.polynomial.polynomial.polyfit"},{"name":"numpy.polynomial.polynomial.polyfromroots","description":"Generate a monic polynomial with given roots.","signature":"numpy.polynomial.polynomial.polyfromroots(roots)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyfromroots.html#numpy.polynomial.polynomial.polyfromroots"},{"name":"numpy.polynomial.polynomial.polygrid2d","description":"Evaluate a 2-D polynomial on the Cartesian product of x and y.","signature":"numpy.polynomial.polynomial.polygrid2d(x, y, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polygrid2d.html#numpy.polynomial.polynomial.polygrid2d"},{"name":"numpy.polynomial.polynomial.polygrid3d","description":"Evaluate a 3-D polynomial on the Cartesian product of x, y and z.","signature":"numpy.polynomial.polynomial.polygrid3d(x, y, z, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polygrid3d.html#numpy.polynomial.polynomial.polygrid3d"},{"name":"numpy.polynomial.polynomial.polyint","description":"Integrate a polynomial.","signature":"numpy.polynomial.polynomial.polyint(c, m=1, k=[], lbnd=0, scl=1, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyint.html#numpy.polynomial.polynomial.polyint"},{"name":"numpy.polynomial.polynomial.polyline","description":"Returns an array representing a linear polynomial.","signature":"numpy.polynomial.polynomial.polyline(off, scl)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyline.html#numpy.polynomial.polynomial.polyline"},{"name":"numpy.polynomial.polynomial.polymul","description":"Multiply one polynomial by another.","signature":"numpy.polynomial.polynomial.polymul(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polymul.html#numpy.polynomial.polynomial.polymul"},{"name":"numpy.polynomial.polynomial.polymulx","description":"Multiply a polynomial by x.","signature":"numpy.polynomial.polynomial.polymulx(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polymulx.html#numpy.polynomial.polynomial.polymulx"},{"name":"numpy.polynomial.polynomial.polyone = array","description":"","signature":"numpy.polynomial.polynomial.polyone = array([1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyone.html#numpy.polynomial.polynomial.polyone"},{"name":"numpy.polynomial.polynomial.polypow","description":"Raise a polynomial to a power.","signature":"numpy.polynomial.polynomial.polypow(c, pow, maxpower=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polypow.html#numpy.polynomial.polynomial.polypow"},{"name":"numpy.polynomial.polynomial.polyroots","description":"Compute the roots of a polynomial.","signature":"numpy.polynomial.polynomial.polyroots(c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyroots.html#numpy.polynomial.polynomial.polyroots"},{"name":"numpy.polynomial.polynomial.polysub","description":"Subtract one polynomial from another.","signature":"numpy.polynomial.polynomial.polysub(c1, c2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polysub.html#numpy.polynomial.polynomial.polysub"},{"name":"numpy.polynomial.polynomial.polytrim","description":"Remove “small” “trailing” coefficients from a polynomial.","signature":"numpy.polynomial.polynomial.polytrim(c, tol=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polytrim.html#numpy.polynomial.polynomial.polytrim"},{"name":"numpy.polynomial.polynomial.polyval","description":"Evaluate a polynomial at points x.","signature":"numpy.polynomial.polynomial.polyval(x, c, tensor=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyval.html#numpy.polynomial.polynomial.polyval"},{"name":"numpy.polynomial.polynomial.polyval2d","description":"Evaluate a 2-D polynomial at points (x, y).","signature":"numpy.polynomial.polynomial.polyval2d(x, y, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyval2d.html#numpy.polynomial.polynomial.polyval2d"},{"name":"numpy.polynomial.polynomial.polyval3d","description":"Evaluate a 3-D polynomial at points (x, y, z).","signature":"numpy.polynomial.polynomial.polyval3d(x, y, z, c)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyval3d.html#numpy.polynomial.polynomial.polyval3d"},{"name":"numpy.polynomial.polynomial.polyvalfromroots","description":"Evaluate a polynomial specified by its roots at points x.","signature":"numpy.polynomial.polynomial.polyvalfromroots(x, r, tensor=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyvalfromroots.html#numpy.polynomial.polynomial.polyvalfromroots"},{"name":"numpy.polynomial.polynomial.polyvander","description":"Vandermonde matrix of given degree.","signature":"numpy.polynomial.polynomial.polyvander(x, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyvander.html#numpy.polynomial.polynomial.polyvander"},{"name":"numpy.polynomial.polynomial.polyvander2d","description":"Pseudo-Vandermonde matrix of given degrees.","signature":"numpy.polynomial.polynomial.polyvander2d(x, y, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyvander2d.html#numpy.polynomial.polynomial.polyvander2d"},{"name":"numpy.polynomial.polynomial.polyvander3d","description":"Pseudo-Vandermonde matrix of given degrees.","signature":"numpy.polynomial.polynomial.polyvander3d(x, y, z, deg)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyvander3d.html#numpy.polynomial.polynomial.polyvander3d"},{"name":"numpy.polynomial.polynomial.polyx = array","description":"","signature":"numpy.polynomial.polynomial.polyx = array([0, 1])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyx.html#numpy.polynomial.polynomial.polyx"},{"name":"numpy.polynomial.polynomial.polyzero = array","description":"","signature":"numpy.polynomial.polynomial.polyzero = array([0])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyzero.html#numpy.polynomial.polynomial.polyzero"},{"name":"numpy.polynomial.polyutils.as_series","description":"Return argument as a list of 1-d arrays.","signature":"numpy.polynomial.polyutils.as_series(alist, trim=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polyutils.as_series.html#numpy.polynomial.polyutils.as_series"},{"name":"numpy.polynomial.polyutils.getdomain","description":"Return a domain suitable for given abscissae.","signature":"numpy.polynomial.polyutils.getdomain(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polyutils.getdomain.html#numpy.polynomial.polyutils.getdomain"},{"name":"numpy.polynomial.polyutils.mapdomain","description":"Apply linear map to input points.","signature":"numpy.polynomial.polyutils.mapdomain(x, old, new)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polyutils.mapdomain.html#numpy.polynomial.polyutils.mapdomain"},{"name":"numpy.polynomial.polyutils.mapparms","description":"Linear map parameters between domains.","signature":"numpy.polynomial.polyutils.mapparms(old, new)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polyutils.mapparms.html#numpy.polynomial.polyutils.mapparms"},{"name":"numpy.polynomial.polyutils.trimcoef","description":"Remove “small” “trailing” coefficients from a polynomial.","signature":"numpy.polynomial.polyutils.trimcoef(c, tol=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polyutils.trimcoef.html#numpy.polynomial.polyutils.trimcoef"},{"name":"numpy.polynomial.polyutils.trimseq","description":"Remove small Poly series coefficients.","signature":"numpy.polynomial.polyutils.trimseq(seq)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polyutils.trimseq.html#numpy.polynomial.polyutils.trimseq"},{"name":"numpy.polynomial.set_default_printstyle","description":"Set the default format for the string representation of polynomials.","signature":"numpy.polynomial.set_default_printstyle(style)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.set_default_printstyle.html#numpy.polynomial.set_default_printstyle"},{"name":"numpy.polysub","description":"Difference (subtraction) of two polynomials.","signature":"numpy.polysub(a1, a2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polysub.html#numpy.polysub"},{"name":"numpy.polyval","description":"Evaluate a polynomial at specific values.","signature":"numpy.polyval(p, x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polyval.html#numpy.polyval"},{"name":"numpy.positive","description":"Numerical positive, element-wise.","signature":"numpy.positive(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'positive'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.positive.html#numpy.positive"},{"name":"numpy.power","description":"First array elements raised to powers from second array, element-wise.","signature":"numpy.power(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'power'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.power.html#numpy.power"},{"name":"numpy.printoptions","description":"Context manager for setting print options.","signature":"numpy.printoptions(*args, **kwargs)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.printoptions.html#numpy.printoptions"},{"name":"numpy.prod","description":"Return the product of array elements over a given axis.","signature":"numpy.prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.prod.html#numpy.prod"},{"name":"numpy.promote_types","description":"Returns the data type with the smallest size and smallest scalar kind to which both type1 and type2 may be safely cast. The returned data type is always in native byte order.","signature":"numpy.promote_types(type1, type2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.promote_types.html#numpy.promote_types"},{"name":"numpy.ptp","description":"Range of values (maximum - minimum) along an axis.","signature":"numpy.ptp(a, axis=None, out=None, keepdims=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ptp.html#numpy.ptp"},{"name":"numpy.put","description":"Replaces specified elements of an array with given values.","signature":"numpy.put(a, ind, v, mode='raise')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.put.html#numpy.put"},{"name":"numpy.put_along_axis","description":"Put values into the destination array by matching 1d index and data slices.","signature":"numpy.put_along_axis(arr, indices, values, axis)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.put_along_axis.html#numpy.put_along_axis"},{"name":"numpy.putmask","description":"Changes elements of an array based on conditional and input values.","signature":"numpy.putmask(a, mask, values)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.putmask.html#numpy.putmask"},{"name":"numpy.quantile","description":"Compute the q-th quantile of the data along the specified axis.","signature":"numpy.quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.quantile.html#numpy.quantile"},{"name":"numpy.r_ = <numpy.lib.index_tricks.RClass object>","description":"Translates slice objects to concatenation along the first axis.","signature":"numpy.r_ = <numpy.lib.index_tricks.RClass object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.r_.html#numpy.r_"},{"name":"numpy.rad2deg","description":"Convert angles from radians to degrees.","signature":"numpy.rad2deg(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'rad2deg'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.rad2deg.html#numpy.rad2deg"},{"name":"numpy.radians","description":"Convert angles from degrees to radians.","signature":"numpy.radians(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'radians'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.radians.html#numpy.radians"},{"name":"numpy.random.beta","description":"Draw samples from a Beta distribution.","signature":"numpy.random.beta(a, b, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.beta.html#numpy.random.beta"},{"name":"numpy.random.binomial","description":"Draw samples from a binomial distribution.","signature":"numpy.random.binomial(n, p, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.binomial.html#numpy.random.binomial"},{"name":"numpy.random.bytes","description":"Return random bytes.","signature":"numpy.random.bytes(length)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.bytes.html#numpy.random.bytes"},{"name":"numpy.random.chisquare","description":"Draw samples from a chi-square distribution.","signature":"numpy.random.chisquare(df, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.chisquare.html#numpy.random.chisquare"},{"name":"numpy.random.choice","description":"Generates a random sample from a given 1-D array","signature":"numpy.random.choice(a, size=None, replace=True, p=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.choice.html#numpy.random.choice"},{"name":"numpy.random.default_rng","description":"Construct a new Generator with the default BitGenerator (PCG64).","signature":"numpy.random.default_rng()","url":"https://docs.scipy.org/doc/numpy/reference/random/generator.html#numpy.random.default_rng"},{"name":"numpy.random.default_rng","description":"Construct a new Generator with the default BitGenerator (PCG64).","signature":"numpy.random.default_rng()","url":"https://docs.scipy.org/doc/numpy/reference/random/generator.html#numpy.random.Generator"},{"name":"numpy.random.dirichlet","description":"Draw samples from the Dirichlet distribution.","signature":"numpy.random.dirichlet(alpha, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.dirichlet.html#numpy.random.dirichlet"},{"name":"numpy.random.exponential","description":"Draw samples from an exponential distribution.","signature":"numpy.random.exponential(scale=1.0, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.exponential.html#numpy.random.exponential"},{"name":"numpy.random.f","description":"Draw samples from an F distribution.","signature":"numpy.random.f(dfnum, dfden, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.f.html#numpy.random.f"},{"name":"numpy.random.gamma","description":"Draw samples from a Gamma distribution.","signature":"numpy.random.gamma(shape, scale=1.0, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.gamma.html#numpy.random.gamma"},{"name":"numpy.random.geometric","description":"Draw samples from the geometric distribution.","signature":"numpy.random.geometric(p, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.geometric.html#numpy.random.geometric"},{"name":"numpy.random.get_state","description":"Return a tuple representing the internal state of the generator.","signature":"numpy.random.get_state()","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.get_state.html#numpy.random.get_state"},{"name":"numpy.random.gumbel","description":"Draw samples from a Gumbel distribution.","signature":"numpy.random.gumbel(loc=0.0, scale=1.0, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.gumbel.html#numpy.random.gumbel"},{"name":"numpy.random.hypergeometric","description":"Draw samples from a Hypergeometric distribution.","signature":"numpy.random.hypergeometric(ngood, nbad, nsample, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.hypergeometric.html#numpy.random.hypergeometric"},{"name":"numpy.random.laplace","description":"Draw samples from the Laplace or double exponential distribution with specified location (or mean) and scale (decay).","signature":"numpy.random.laplace(loc=0.0, scale=1.0, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.laplace.html#numpy.random.laplace"},{"name":"numpy.random.logistic","description":"Draw samples from a logistic distribution.","signature":"numpy.random.logistic(loc=0.0, scale=1.0, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.logistic.html#numpy.random.logistic"},{"name":"numpy.random.lognormal","description":"Draw samples from a log-normal distribution.","signature":"numpy.random.lognormal(mean=0.0, sigma=1.0, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.lognormal.html#numpy.random.lognormal"},{"name":"numpy.random.logseries","description":"Draw samples from a logarithmic series distribution.","signature":"numpy.random.logseries(p, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.logseries.html#numpy.random.logseries"},{"name":"numpy.random.multinomial","description":"Draw samples from a multinomial distribution.","signature":"numpy.random.multinomial(n, pvals, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.multinomial.html#numpy.random.multinomial"},{"name":"numpy.random.multivariate_normal","description":"Draw random samples from a multivariate normal distribution.","signature":"numpy.random.multivariate_normal(mean, cov, size=None, check_valid='warn', tol=1e-8)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.multivariate_normal.html#numpy.random.multivariate_normal"},{"name":"numpy.random.negative_binomial","description":"Draw samples from a negative binomial distribution.","signature":"numpy.random.negative_binomial(n, p, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.negative_binomial.html#numpy.random.negative_binomial"},{"name":"numpy.random.noncentral_chisquare","description":"Draw samples from a noncentral chi-square distribution.","signature":"numpy.random.noncentral_chisquare(df, nonc, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.noncentral_chisquare.html#numpy.random.noncentral_chisquare"},{"name":"numpy.random.noncentral_f","description":"Draw samples from the noncentral F distribution.","signature":"numpy.random.noncentral_f(dfnum, dfden, nonc, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.noncentral_f.html#numpy.random.noncentral_f"},{"name":"numpy.random.normal","description":"Draw random samples from a normal (Gaussian) distribution.","signature":"numpy.random.normal(loc=0.0, scale=1.0, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.normal.html#numpy.random.normal"},{"name":"numpy.random.pareto","description":"Draw samples from a Pareto II or Lomax distribution with specified shape.","signature":"numpy.random.pareto(a, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.pareto.html#numpy.random.pareto"},{"name":"numpy.random.permutation","description":"Randomly permute a sequence, or return a permuted range.","signature":"numpy.random.permutation(x)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.permutation.html#numpy.random.permutation"},{"name":"numpy.random.poisson","description":"Draw samples from a Poisson distribution.","signature":"numpy.random.poisson(lam=1.0, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.poisson.html#numpy.random.poisson"},{"name":"numpy.random.power","description":"Draws samples in [0, 1] from a power distribution with positive exponent a - 1.","signature":"numpy.random.power(a, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.power.html#numpy.random.power"},{"name":"numpy.random.rand","description":"Random values in a given shape.","signature":"numpy.random.rand(d0, d1, ..., dn)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.rand.html#numpy.random.rand"},{"name":"numpy.random.randint","description":"Return random integers from low (inclusive) to high (exclusive).","signature":"numpy.random.randint(low, high=None, size=None, dtype=int)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.randint.html#numpy.random.randint"},{"name":"numpy.random.randn","description":"Return a sample (or samples) from the “standard normal” distribution.","signature":"numpy.random.randn(d0, d1, ..., dn)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.randn.html#numpy.random.randn"},{"name":"numpy.random.random","description":"Return random floats in the half-open interval [0.0, 1.0). Alias for random_sample to ease forward-porting to the new random API.","signature":"numpy.random.random(size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.random.html#numpy.random.random"},{"name":"numpy.random.random_integers","description":"Random integers of type np.int_ between low and high, inclusive.","signature":"numpy.random.random_integers(low, high=None, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.random_integers.html#numpy.random.random_integers"},{"name":"numpy.random.random_sample","description":"Return random floats in the half-open interval [0.0, 1.0).","signature":"numpy.random.random_sample(size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.random_sample.html#numpy.random.random_sample"},{"name":"numpy.random.ranf","description":"This is an alias of random_sample. See random_sample  for the complete documentation.","signature":"numpy.random.ranf()","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.ranf.html#numpy.random.ranf"},{"name":"numpy.random.rayleigh","description":"Draw samples from a Rayleigh distribution.","signature":"numpy.random.rayleigh(scale=1.0, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.rayleigh.html#numpy.random.rayleigh"},{"name":"numpy.random.sample","description":"This is an alias of random_sample. See random_sample  for the complete documentation.","signature":"numpy.random.sample()","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.sample.html#numpy.random.sample"},{"name":"numpy.random.seed","description":"Reseed a legacy MT19937 BitGenerator","signature":"numpy.random.seed(self, seed=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.seed.html#numpy.random.seed"},{"name":"numpy.random.set_state","description":"Set the internal state of the generator from a tuple.","signature":"numpy.random.set_state(state)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.set_state.html#numpy.random.set_state"},{"name":"numpy.random.shuffle","description":"Modify a sequence in-place by shuffling its contents.","signature":"numpy.random.shuffle(x)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.shuffle.html#numpy.random.shuffle"},{"name":"numpy.random.standard_cauchy","description":"Draw samples from a standard Cauchy distribution with mode = 0.","signature":"numpy.random.standard_cauchy(size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.standard_cauchy.html#numpy.random.standard_cauchy"},{"name":"numpy.random.standard_exponential","description":"Draw samples from the standard exponential distribution.","signature":"numpy.random.standard_exponential(size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.standard_exponential.html#numpy.random.standard_exponential"},{"name":"numpy.random.standard_gamma","description":"Draw samples from a standard Gamma distribution.","signature":"numpy.random.standard_gamma(shape, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.standard_gamma.html#numpy.random.standard_gamma"},{"name":"numpy.random.standard_normal","description":"Draw samples from a standard Normal distribution (mean=0, stdev=1).","signature":"numpy.random.standard_normal(size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.standard_normal.html#numpy.random.standard_normal"},{"name":"numpy.random.standard_t","description":"Draw samples from a standard Student’s t distribution with df degrees of freedom.","signature":"numpy.random.standard_t(df, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.standard_t.html#numpy.random.standard_t"},{"name":"numpy.random.triangular","description":"Draw samples from the triangular distribution over the interval [left, right].","signature":"numpy.random.triangular(left, mode, right, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.triangular.html#numpy.random.triangular"},{"name":"numpy.random.uniform","description":"Draw samples from a uniform distribution.","signature":"numpy.random.uniform(low=0.0, high=1.0, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.uniform.html#numpy.random.uniform"},{"name":"numpy.random.vonmises","description":"Draw samples from a von Mises distribution.","signature":"numpy.random.vonmises(mu, kappa, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.vonmises.html#numpy.random.vonmises"},{"name":"numpy.random.wald","description":"Draw samples from a Wald, or inverse Gaussian, distribution.","signature":"numpy.random.wald(mean, scale, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.wald.html#numpy.random.wald"},{"name":"numpy.random.weibull","description":"Draw samples from a Weibull distribution.","signature":"numpy.random.weibull(a, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.weibull.html#numpy.random.weibull"},{"name":"numpy.random.zipf","description":"Draw samples from a Zipf distribution.","signature":"numpy.random.zipf(a, size=None)","url":"https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.zipf.html#numpy.random.zipf"},{"name":"numpy.ravel","description":"Return a contiguous flattened array.","signature":"numpy.ravel(a, order='C')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html#numpy.ravel"},{"name":"numpy.ravel_multi_index","description":"Converts a tuple of index arrays into an array of flat indices, applying boundary modes to the multi-index.","signature":"numpy.ravel_multi_index(multi_index, dims, mode='raise', order='C')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel_multi_index.html#numpy.ravel_multi_index"},{"name":"numpy.real","description":"Return the real part of the complex argument.","signature":"numpy.real(val)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.real.html#numpy.real"},{"name":"numpy.real_if_close","description":"If input is complex with all imaginary parts close to zero, return  real parts.","signature":"numpy.real_if_close(a, tol=100)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.real_if_close.html#numpy.real_if_close"},{"name":"numpy.reciprocal","description":"Return the reciprocal of the argument, element-wise.","signature":"numpy.reciprocal(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'reciprocal'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.reciprocal.html#numpy.reciprocal"},{"name":"numpy.remainder","description":"Return element-wise remainder of division.","signature":"numpy.remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'remainder'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.remainder.html#numpy.remainder"},{"name":"numpy.repeat","description":"Repeat elements of an array.","signature":"numpy.repeat(a, repeats, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html#numpy.repeat"},{"name":"numpy.require","description":"Return an ndarray of the provided type that satisfies requirements.","signature":"numpy.require(a, dtype=None, requirements=None, *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.require.html#numpy.require"},{"name":"numpy.reshape","description":"Gives a new shape to an array without changing its data.","signature":"numpy.reshape(a, newshape, order='C')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html#numpy.reshape"},{"name":"numpy.resize","description":"Return a new array with the specified shape.","signature":"numpy.resize(a, new_shape)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.resize.html#numpy.resize"},{"name":"numpy.result_type","description":"Returns the type that results from applying the NumPy type promotion rules to the arguments.","signature":"numpy.result_type(*arrays_and_dtypes)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.result_type.html#numpy.result_type"},{"name":"numpy.right_shift","description":"Shift the bits of an integer to the right.","signature":"numpy.right_shift(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'right_shift'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.right_shift.html#numpy.right_shift"},{"name":"numpy.rint","description":"Round elements of the array to the nearest integer.","signature":"numpy.rint(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'rint'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.rint.html#numpy.rint"},{"name":"numpy.roll","description":"Roll array elements along a given axis.","signature":"numpy.roll(a, shift, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.roll.html#numpy.roll"},{"name":"numpy.rollaxis","description":"Roll the specified axis backwards, until it lies in a given position.","signature":"numpy.rollaxis(a, axis, start=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.rollaxis.html#numpy.rollaxis"},{"name":"numpy.roots","description":"Return the roots of a polynomial with coefficients given in p.","signature":"numpy.roots(p)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.roots.html#numpy.roots"},{"name":"numpy.rot90","description":"Rotate an array by 90 degrees in the plane specified by axes.","signature":"numpy.rot90(m, k=1, axes=(0, 1))","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.rot90.html#numpy.rot90"},{"name":"numpy.round_","description":"Round an array to the given number of decimals.","signature":"numpy.round_(a, decimals=0, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.round_.html#numpy.round_"},{"name":"numpy.row_stack","description":"Stack arrays in sequence vertically (row wise).","signature":"numpy.row_stack(tup)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.row_stack.html#numpy.row_stack"},{"name":"numpy.s_ = <numpy.lib.index_tricks.IndexExpression object>","description":"A nicer way to build up index tuples for arrays.","signature":"numpy.s_ = <numpy.lib.index_tricks.IndexExpression object>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.s_.html#numpy.s_"},{"name":"numpy.save","description":"Save an array to a binary file in NumPy .npy format.","signature":"numpy.save(file, arr, allow_pickle=True, fix_imports=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.save.html#numpy.save"},{"name":"numpy.savetxt","description":"Save an array to a text file.","signature":"numpy.savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='', footer='', comments='# ', encoding=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.savetxt.html#numpy.savetxt"},{"name":"numpy.savez","description":"Save several arrays into a single file in uncompressed .npz format.","signature":"numpy.savez(file, *args, **kwds)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.savez.html#numpy.savez"},{"name":"numpy.savez_compressed","description":"Save several arrays into a single file in compressed .npz format.","signature":"numpy.savez_compressed(file, *args, **kwds)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.savez_compressed.html#numpy.savez_compressed"},{"name":"numpy.sctype2char","description":"Return the string representation of a scalar dtype.","signature":"numpy.sctype2char(sctype)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sctype2char.html#numpy.sctype2char"},{"name":"numpy.searchsorted","description":"Find indices where elements should be inserted to maintain order.","signature":"numpy.searchsorted(a, v, side='left', sorter=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.searchsorted.html#numpy.searchsorted"},{"name":"numpy.select","description":"Return an array drawn from elements in choicelist, depending on conditions.","signature":"numpy.select(condlist, choicelist, default=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.select.html#numpy.select"},{"name":"numpy.set_printoptions","description":"Set printing options.","signature":"numpy.set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.set_printoptions.html#numpy.set_printoptions"},{"name":"numpy.set_string_function","description":"Set a Python function to be used when pretty printing arrays.","signature":"numpy.set_string_function(f, repr=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.set_string_function.html#numpy.set_string_function"},{"name":"numpy.setbufsize","description":"Set the size of the buffer used in ufuncs.","signature":"numpy.setbufsize(size)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.setbufsize.html#numpy.setbufsize"},{"name":"numpy.setdiff1d","description":"Find the set difference of two arrays.","signature":"numpy.setdiff1d(ar1, ar2, assume_unique=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.setdiff1d.html#numpy.setdiff1d"},{"name":"numpy.seterr","description":"Set how floating-point errors are handled.","signature":"numpy.seterr(all=None, divide=None, over=None, under=None, invalid=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.seterr.html#numpy.seterr"},{"name":"numpy.seterrcall","description":"Set the floating-point error callback function or log object.","signature":"numpy.seterrcall(func)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.seterrcall.html#numpy.seterrcall"},{"name":"numpy.seterrobj","description":"Set the object that defines floating-point error handling.","signature":"numpy.seterrobj(errobj)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.seterrobj.html#numpy.seterrobj"},{"name":"numpy.setxor1d","description":"Find the set exclusive-or of two arrays.","signature":"numpy.setxor1d(ar1, ar2, assume_unique=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.setxor1d.html#numpy.setxor1d"},{"name":"numpy.shape","description":"Return the shape of an array.","signature":"numpy.shape(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.shape.html#numpy.shape"},{"name":"numpy.shares_memory","description":"Determine if two arrays share memory.","signature":"numpy.shares_memory(a, b, max_work=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.shares_memory.html#numpy.shares_memory"},{"name":"numpy.show_config","description":"Show libraries in the system on which NumPy was built.","signature":"numpy.show_config()","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.show_config.html#numpy.show_config"},{"name":"numpy.sign","description":"Returns an element-wise indication of the sign of a number.","signature":"numpy.sign(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'sign'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sign.html#numpy.sign"},{"name":"numpy.signbit","description":"Returns element-wise True where signbit is set (less than zero).","signature":"numpy.signbit(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'signbit'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.signbit.html#numpy.signbit"},{"name":"numpy.sin","description":"Trigonometric sine, element-wise.","signature":"numpy.sin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'sin'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sin.html#numpy.sin"},{"name":"numpy.sinc","description":"Return the normalized sinc function.","signature":"numpy.sinc(x)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sinc.html#numpy.sinc"},{"name":"numpy.sinh","description":"Hyperbolic sine, element-wise.","signature":"numpy.sinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'sinh'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sinh.html#numpy.sinh"},{"name":"numpy.sort","description":"Return a sorted copy of an array.","signature":"numpy.sort(a, axis=-1, kind=None, order=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sort.html#numpy.sort"},{"name":"numpy.sort_complex","description":"Sort a complex array using the real part first, then the imaginary part.","signature":"numpy.sort_complex(a)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sort_complex.html#numpy.sort_complex"},{"name":"numpy.source","description":"Print or write to a file the source code for a NumPy object.","signature":"numpy.source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.source.html#numpy.source"},{"name":"numpy.spacing","description":"Return the distance between x and the nearest adjacent number.","signature":"numpy.spacing(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'spacing'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.spacing.html#numpy.spacing"},{"name":"numpy.split","description":"Split an array into multiple sub-arrays as views into ary.","signature":"numpy.split(ary, indices_or_sections, axis=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.split.html#numpy.split"},{"name":"numpy.sqrt","description":"Return the non-negative square-root of an array, element-wise.","signature":"numpy.sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'sqrt'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sqrt.html#numpy.sqrt"},{"name":"numpy.square","description":"Return the element-wise square of the input.","signature":"numpy.square(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'square'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.square.html#numpy.square"},{"name":"numpy.squeeze","description":"Remove axes of length one from a.","signature":"numpy.squeeze(a, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.squeeze.html#numpy.squeeze"},{"name":"numpy.stack","description":"Join a sequence of arrays along a new axis.","signature":"numpy.stack(arrays, axis=0, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.stack.html#numpy.stack"},{"name":"numpy.std","description":"Compute the standard deviation along the specified axis.","signature":"numpy.std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html#numpy.std"},{"name":"numpy.subtract","description":"Subtract arguments, element-wise.","signature":"numpy.subtract(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'subtract'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.subtract.html#numpy.subtract"},{"name":"numpy.sum","description":"Sum of array elements over a given axis.","signature":"numpy.sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html#numpy.sum"},{"name":"numpy.swapaxes","description":"Interchange two axes of an array.","signature":"numpy.swapaxes(a, axis1, axis2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.swapaxes.html#numpy.swapaxes"},{"name":"numpy.take","description":"Take elements from an array along an axis.","signature":"numpy.take(a, indices, axis=None, out=None, mode='raise')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.take.html#numpy.take"},{"name":"numpy.take_along_axis","description":"Take values from the input array by matching 1d index and data slices.","signature":"numpy.take_along_axis(arr, indices, axis)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.take_along_axis.html#numpy.take_along_axis"},{"name":"numpy.tan","description":"Compute tangent element-wise.","signature":"numpy.tan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'tan'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tan.html#numpy.tan"},{"name":"numpy.tanh","description":"Compute hyperbolic tangent element-wise.","signature":"numpy.tanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'tanh'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tanh.html#numpy.tanh"},{"name":"numpy.tensordot","description":"Compute tensor dot product along specified axes.","signature":"numpy.tensordot(a, b, axes=2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tensordot.html#numpy.tensordot"},{"name":"numpy.test","description":"Pytest test runner.","signature":"numpy.test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None)","url":"https://docs.scipy.org/doc/numpy/reference/testing.html#numpy.test"},{"name":"numpy.testing.assert_allclose","description":"Raises an AssertionError if two objects are not equal up to desired tolerance.","signature":"numpy.testing.assert_allclose(actual, desired, rtol=1e-07, atol=0, equal_nan=True, err_msg='', verbose=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose"},{"name":"numpy.testing.assert_almost_equal","description":"Raises an AssertionError if two items are not equal up to desired precision.","signature":"numpy.testing.assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_almost_equal.html#numpy.testing.assert_almost_equal"},{"name":"numpy.testing.assert_approx_equal","description":"Raises an AssertionError if two items are not equal up to significant digits.","signature":"numpy.testing.assert_approx_equal(actual, desired, significant=7, err_msg='', verbose=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_approx_equal.html#numpy.testing.assert_approx_equal"},{"name":"numpy.testing.assert_array_almost_equal","description":"Raises an AssertionError if two objects are not equal up to desired precision.","signature":"numpy.testing.assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_array_almost_equal.html#numpy.testing.assert_array_almost_equal"},{"name":"numpy.testing.assert_array_almost_equal_nulp","description":"Compare two arrays relatively to their spacing.","signature":"numpy.testing.assert_array_almost_equal_nulp(x, y, nulp=1)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp"},{"name":"numpy.testing.assert_array_equal","description":"Raises an AssertionError if two array_like objects are not equal.","signature":"numpy.testing.assert_array_equal(x, y, err_msg='', verbose=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_array_equal.html#numpy.testing.assert_array_equal"},{"name":"numpy.testing.assert_array_less","description":"Raises an AssertionError if two array_like objects are not ordered by less than.","signature":"numpy.testing.assert_array_less(x, y, err_msg='', verbose=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_array_less.html#numpy.testing.assert_array_less"},{"name":"numpy.testing.assert_array_max_ulp","description":"Check that all items of arrays differ in at most N Units in the Last Place.","signature":"numpy.testing.assert_array_max_ulp(a, b, maxulp=1, dtype=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp"},{"name":"numpy.testing.assert_equal","description":"Raises an AssertionError if two objects are not equal.","signature":"numpy.testing.assert_equal(actual, desired, err_msg='', verbose=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_equal.html#numpy.testing.assert_equal"},{"name":"numpy.testing.assert_raises","description":"Fail unless an exception of class exception_class is thrown by callable when invoked with arguments args and keyword arguments kwargs. If a different type of exception is thrown, it will not be caught, and the test case will be deemed to have suffered an error, exactly as for an unexpected exception.","signature":"numpy.testing.assert_raises(exception_class, callable, *args, **kwargs) assert_raises(exception_class)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_raises.html#numpy.testing.assert_raises"},{"name":"numpy.testing.assert_raises_regex","description":"Fail unless an exception of class exception_class and with message that matches expected_regexp is thrown by callable when invoked with arguments args and keyword arguments kwargs.","signature":"numpy.testing.assert_raises_regex(exception_class, expected_regexp, callable, *args, **kwargs) assert_raises_regex(exception_class, expected_regexp)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_raises_regex.html#numpy.testing.assert_raises_regex"},{"name":"numpy.testing.assert_string_equal","description":"Test if two strings are equal.","signature":"numpy.testing.assert_string_equal(actual, desired)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_string_equal.html#numpy.testing.assert_string_equal"},{"name":"numpy.testing.assert_warns","description":"Fail unless the given callable throws the specified warning.","signature":"numpy.testing.assert_warns(warning_class, *args, **kwargs)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_warns.html#numpy.testing.assert_warns"},{"name":"numpy.testing.dec.deprecated","description":"Filter deprecation warnings while running the test suite.","signature":"numpy.testing.dec.deprecated(conditional=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.dec.deprecated.html#numpy.testing.dec.deprecated"},{"name":"numpy.testing.dec.knownfailureif","description":"Make function raise KnownFailureException exception if given condition is true.","signature":"numpy.testing.dec.knownfailureif(fail_condition, msg=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.dec.knownfailureif.html#numpy.testing.dec.knownfailureif"},{"name":"numpy.testing.dec.setastest","description":"Signals to nose that this function is or is not a test.","signature":"numpy.testing.dec.setastest(tf=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.dec.setastest.html#numpy.testing.dec.setastest"},{"name":"numpy.testing.dec.skipif","description":"Make function raise SkipTest exception if a given condition is true.","signature":"numpy.testing.dec.skipif(skip_condition, msg=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.dec.skipif.html#numpy.testing.dec.skipif"},{"name":"numpy.testing.dec.slow","description":"Label a test as ‘slow’.","signature":"numpy.testing.dec.slow(t)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.dec.slow.html#numpy.testing.dec.slow"},{"name":"numpy.testing.decorate_methods","description":"Apply a decorator to all methods in a class matching a regular expression.","signature":"numpy.testing.decorate_methods(cls, decorator, testmatch=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.decorate_methods.html#numpy.testing.decorate_methods"},{"name":"numpy.testing.run_module_suite","description":"Run a test module.","signature":"numpy.testing.run_module_suite(file_to_run=None, argv=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.run_module_suite.html#numpy.testing.run_module_suite"},{"name":"numpy.testing.rundocs","description":"Run doctests found in the given file.","signature":"numpy.testing.rundocs(filename=None, raise_on_error=True)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.rundocs.html#numpy.testing.rundocs"},{"name":"numpy.tile","description":"Construct an array by repeating A the number of times given by reps.","signature":"numpy.tile(A, reps)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html#numpy.tile"},{"name":"numpy.trace","description":"Return the sum along diagonals of the array.","signature":"numpy.trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.trace.html#numpy.trace"},{"name":"numpy.transpose","description":"Reverse or permute the axes of an array; returns the modified array.","signature":"numpy.transpose(a, axes=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.transpose.html#numpy.transpose"},{"name":"numpy.trapz","description":"Integrate along the given axis using the composite trapezoidal rule.","signature":"numpy.trapz(y, x=None, dx=1.0, axis=-1)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.trapz.html#numpy.trapz"},{"name":"numpy.tri","description":"An array with ones at and below the given diagonal and zeros elsewhere.","signature":"numpy.tri(N, M=None, k=0, dtype=<class 'float'>, *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tri.html#numpy.tri"},{"name":"numpy.tril","description":"Lower triangle of an array.","signature":"numpy.tril(m, k=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tril.html#numpy.tril"},{"name":"numpy.tril_indices","description":"Return the indices for the lower-triangle of an (n, m) array.","signature":"numpy.tril_indices(n, k=0, m=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tril_indices.html#numpy.tril_indices"},{"name":"numpy.tril_indices_from","description":"Return the indices for the lower-triangle of arr.","signature":"numpy.tril_indices_from(arr, k=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tril_indices_from.html#numpy.tril_indices_from"},{"name":"numpy.trim_zeros","description":"Trim the leading and/or trailing zeros from a 1-D array or sequence.","signature":"numpy.trim_zeros(filt, trim='fb')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.trim_zeros.html#numpy.trim_zeros"},{"name":"numpy.triu","description":"Upper triangle of an array.","signature":"numpy.triu(m, k=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.triu.html#numpy.triu"},{"name":"numpy.triu_indices","description":"Return the indices for the upper-triangle of an (n, m) array.","signature":"numpy.triu_indices(n, k=0, m=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.triu_indices.html#numpy.triu_indices"},{"name":"numpy.triu_indices_from","description":"Return the indices for the upper-triangle of arr.","signature":"numpy.triu_indices_from(arr, k=0)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.triu_indices_from.html#numpy.triu_indices_from"},{"name":"numpy.true_divide","description":"Returns a true division of the inputs, element-wise.","signature":"numpy.true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'true_divide'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.true_divide.html#numpy.true_divide"},{"name":"numpy.trunc","description":"Return the truncated value of the input, element-wise.","signature":"numpy.trunc(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'trunc'>","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.trunc.html#numpy.trunc"},{"name":"numpy.typename","description":"Return a description for the given data type code.","signature":"numpy.typename(char)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.typename.html#numpy.typename"},{"name":"numpy.typing.ArrayLike = typing.Union[...]","description":"A Union representing objects that can be coerced into an ndarray.","signature":"numpy.typing.ArrayLike = typing.Union[...]","url":"https://docs.scipy.org/doc/numpy/reference/typing.html#numpy.typing.ArrayLike"},{"name":"numpy.typing.ArrayLike = typing.Union[...]","description":"A Union representing objects that can be coerced into an ndarray.","signature":"numpy.typing.ArrayLike = typing.Union[...]","url":"https://docs.scipy.org/doc/numpy/reference/typing.html#numpy.typing.DTypeLike"},{"name":"numpy.typing.ArrayLike = typing.Union[...]","description":"A Union representing objects that can be coerced into an ndarray.","signature":"numpy.typing.ArrayLike = typing.Union[...]","url":"https://docs.scipy.org/doc/numpy/reference/typing.html#numpy.typing.NBitBase"},{"name":"numpy.union1d","description":"Find the union of two arrays.","signature":"numpy.union1d(ar1, ar2)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.union1d.html#numpy.union1d"},{"name":"numpy.unique","description":"Find the unique elements of an array.","signature":"numpy.unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.unique.html#numpy.unique"},{"name":"numpy.unpackbits","description":"Unpacks elements of a uint8 array into a binary-valued output array.","signature":"numpy.unpackbits(a, axis=None, count=None, bitorder='big')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.unpackbits.html#numpy.unpackbits"},{"name":"numpy.unravel_index","description":"Converts a flat index or array of flat indices into a tuple of coordinate arrays.","signature":"numpy.unravel_index(indices, shape, order='C')","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.unravel_index.html#numpy.unravel_index"},{"name":"numpy.unwrap","description":"Unwrap by changing deltas between values to 2*pi complement.","signature":"numpy.unwrap(p, discont=3.141592653589793, axis=-1)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.unwrap.html#numpy.unwrap"},{"name":"numpy.vander","description":"Generate a Vandermonde matrix.","signature":"numpy.vander(x, N=None, increasing=False)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.vander.html#numpy.vander"},{"name":"numpy.var","description":"Compute the variance along the specified axis.","signature":"numpy.var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.var.html#numpy.var"},{"name":"numpy.vdot","description":"Return the dot product of two vectors.","signature":"numpy.vdot(a, b)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.vdot.html#numpy.vdot"},{"name":"numpy.vsplit","description":"Split an array into multiple sub-arrays vertically (row-wise).","signature":"numpy.vsplit(ary, indices_or_sections)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.vsplit.html#numpy.vsplit"},{"name":"numpy.vstack","description":"Stack arrays in sequence vertically (row wise).","signature":"numpy.vstack(tup)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html#numpy.vstack"},{"name":"numpy.where","description":"Return elements chosen from x or y depending on condition.","signature":"numpy.where(condition[, x, y])","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html#numpy.where"},{"name":"numpy.who","description":"Print the NumPy arrays in the given dictionary.","signature":"numpy.who(vardict=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.who.html#numpy.who"},{"name":"numpy.zeros","description":"Return a new array of given shape and type, filled with zeros.","signature":"numpy.zeros(shape, dtype=float, order='C', *, like=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html#numpy.zeros"},{"name":"numpy.zeros_like","description":"Return an array of zeros with the same shape and type as a given array.","signature":"numpy.zeros_like(a, dtype=None, order='K', subok=True, shape=None)","url":"https://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros_like.html#numpy.zeros_like"}]
