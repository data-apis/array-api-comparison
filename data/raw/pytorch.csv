name,description,signature,url
"torch._assert","A wrapper around Python’s assert which is symbolically traceable.","torch._assert(condition\, message)","https://pytorch.org/docs/stable/generated/torch._assert.html#torch._assert"
"torch.abs","Computes the absolute value of each element in input.","torch.abs(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.abs.html#torch.abs"
"torch.absolute","Alias for torch.abs()","torch.absolute(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.absolute.html#torch.absolute"
"torch.acos","Computes the inverse cosine of each element in input.","torch.acos(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.acos.html#torch.acos"
"torch.acosh","Returns a new tensor with the inverse hyperbolic cosine of the elements of input.","torch.acosh(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.acosh.html#torch.acosh"
"torch.add","Adds the scalar other to each element of the input input and returns a new resulting tensor.","torch.add(input\, other\, *\, out=None)","https://pytorch.org/docs/stable/generated/torch.add.html#torch.add"
"torch.addbmm","Performs a batch matrix-matrix product of matrices stored in batch1 and batch2\, with a reduced add step (all matrix multiplications get accumulated along the first dimension). input is added to the final result.","torch.addbmm(input\, batch1\, batch2\, *\, beta=1\, alpha=1\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.addbmm.html#torch.addbmm"
"torch.addcdiv","Performs the element-wise division of tensor1 by tensor2\, multiply the result by the scalar value and add it to input.","torch.addcdiv(input\, tensor1\, tensor2\, *\, value=1\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.addcdiv.html#torch.addcdiv"
"torch.addcmul","Performs the element-wise multiplication of tensor1 by tensor2\, multiply the result by the scalar value and add it to input.","torch.addcmul(input\, tensor1\, tensor2\, *\, value=1\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.addcmul.html#torch.addcmul"
"torch.addmm","Performs a matrix multiplication of the matrices mat1 and mat2. The matrix input is added to the final result.","torch.addmm(input\, mat1\, mat2\, *\, beta=1\, alpha=1\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.addmm.html#torch.addmm"
"torch.addmv","Performs a matrix-vector product of the matrix mat and the vector vec. The vector input is added to the final result.","torch.addmv(input\, mat\, vec\, *\, beta=1\, alpha=1\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.addmv.html#torch.addmv"
"torch.addr","Performs the outer-product of vectors vec1 and vec2 and adds it to the matrix input.","torch.addr(input\, vec1\, vec2\, *\, beta=1\, alpha=1\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.addr.html#torch.addr"
"torch.all","Tests if all elements in input evaluate to True.","torch.all(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.all.html#torch.all"
"torch.allclose","This function checks if all input and other satisfy the condition:","torch.allclose(input\, other\, rtol=1e-05\, atol=1e-08\, equal_nan=False) → bool","https://pytorch.org/docs/stable/generated/torch.allclose.html#torch.allclose"
"torch.amax","Returns the maximum value of each slice of the input tensor in the given dimension(s) dim.","torch.amax(input\, dim\, keepdim=False\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.amax.html#torch.amax"
"torch.amin","Returns the minimum value of each slice of the input tensor in the given dimension(s) dim.","torch.amin(input\, dim\, keepdim=False\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.amin.html#torch.amin"
"torch.angle","Computes the element-wise angle (in radians) of the given input tensor.","torch.angle(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.angle.html#torch.angle"
"torch.any"," Parameters input (Tensor) – the input tensor.  ","torch.any(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.any.html#torch.any"
"torch.arange","Returns a 1-D tensor of size ⌈end−startstep⌉\left\lceil \frac{\text{end} - \text{start}}{\text{step}} \right\rceil⌈stepend−start​⌉   with values from the interval [start\, end) taken with common difference step beginning from start.","torch.arange(start=0\, end\, step=1\, *\, out=None\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.arange.html#torch.arange"
"torch.arccos","Alias for torch.acos().","torch.arccos(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.arccos.html#torch.arccos"
"torch.arccosh","Alias for torch.acosh().","torch.arccosh(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.arccosh.html#torch.arccosh"
"torch.arcsin","Alias for torch.asin().","torch.arcsin(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.arcsin.html#torch.arcsin"
"torch.arcsinh","Alias for torch.asinh().","torch.arcsinh(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.arcsinh.html#torch.arcsinh"
"torch.arctan","Alias for torch.atan().","torch.arctan(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.arctan.html#torch.arctan"
"torch.arctanh","Alias for torch.atanh().","torch.arctanh(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.arctanh.html#torch.arctanh"
"torch.are_deterministic_algorithms_enabled","Returns True if the global deterministic flag is turned on. Refer to torch.use_deterministic_algorithms() documentation for more details.","torch.are_deterministic_algorithms_enabled()","https://pytorch.org/docs/stable/generated/torch.are_deterministic_algorithms_enabled.html#torch.are_deterministic_algorithms_enabled"
"torch.argmax","Returns the indices of the maximum value of all elements in the input tensor.","torch.argmax(input) → LongTensor","https://pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
"torch.argmin","Returns the indices of the minimum value(s) of the flattened tensor or along a dimension","torch.argmin(input\, dim=None\, keepdim=False) → LongTensor","https://pytorch.org/docs/stable/generated/torch.argmin.html#torch.argmin"
"torch.argsort","Returns the indices that sort a tensor along a given dimension in ascending order by value.","torch.argsort(input\, dim=-1\, descending=False) → LongTensor","https://pytorch.org/docs/stable/generated/torch.argsort.html#torch.argsort"
"torch.as_strided","Create a view of an existing torch.Tensor input with specified size\, stride and storage_offset.","torch.as_strided(input\, size\, stride\, storage_offset=0) → Tensor","https://pytorch.org/docs/stable/generated/torch.as_strided.html#torch.as_strided"
"torch.as_tensor","Convert the data into a torch.Tensor. If the data is already a Tensor with the same dtype and device\, no copy will be performed\, otherwise a new Tensor will be returned with computational graph retained if data Tensor has requires_grad=True. Similarly\, if the data is an ndarray of the corresponding dtype and the device is the cpu\, no copy will be performed.","torch.as_tensor(data\, dtype=None\, device=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.as_tensor.html#torch.as_tensor"
"torch.asin","Returns a new tensor with the arcsine  of the elements of input.","torch.asin(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.asin.html#torch.asin"
"torch.asinh","Returns a new tensor with the inverse hyperbolic sine of the elements of input.","torch.asinh(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.asinh.html#torch.asinh"
"torch.atan","Returns a new tensor with the arctangent  of the elements of input.","torch.atan(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.atan.html#torch.atan"
"torch.atan2","Element-wise arctangent of inputi/otheri\text{input}_{i} / \text{other}_{i}inputi​/otheri​   with consideration of the quadrant. Returns a new tensor with the signed angles in radians between vector (otheri\,inputi)(\text{other}_{i}\, \text{input}_{i})(otheri​\,inputi​)   and vector (1\,0)(1\, 0)(1\,0)  . (Note that otheri\text{other}_{i}otheri​  \, the second parameter\, is the x-coordinate\, while inputi\text{input}_{i}inputi​  \, the first parameter\, is the y-coordinate.)","torch.atan2(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.atan2.html#torch.atan2"
"torch.atanh","Returns a new tensor with the inverse hyperbolic tangent of the elements of input.","torch.atanh(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.atanh.html#torch.atanh"
"torch.atleast_1d","Returns a 1-dimensional view of each input tensor with zero dimensions. Input tensors with one or more dimensions are returned as-is.","torch.atleast_1d(*tensors)","https://pytorch.org/docs/stable/generated/torch.atleast_1d.html#torch.atleast_1d"
"torch.atleast_2d","Returns a 2-dimensional view of each input tensor with zero dimensions. Input tensors with two or more dimensions are returned as-is. :param input: :type input: Tensor or list of Tensors","torch.atleast_2d(*tensors)","https://pytorch.org/docs/stable/generated/torch.atleast_2d.html#torch.atleast_2d"
"torch.atleast_3d","Returns a 3-dimensional view of each input tensor with zero dimensions. Input tensors with three or more dimensions are returned as-is. :param input: :type input: Tensor or list of Tensors","torch.atleast_3d(*tensors)","https://pytorch.org/docs/stable/generated/torch.atleast_3d.html#torch.atleast_3d"
"torch.baddbmm","Performs a batch matrix-matrix product of matrices in batch1 and batch2. input is added to the final result.","torch.baddbmm(input\, batch1\, batch2\, *\, beta=1\, alpha=1\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.baddbmm.html#torch.baddbmm"
"torch.bartlett_window","Bartlett window function.","torch.bartlett_window(window_length\, periodic=True\, *\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.bartlett_window.html#torch.bartlett_window"
"torch.bernoulli","Draws binary random numbers (0 or 1) from a Bernoulli distribution.","torch.bernoulli(input\, *\, generator=None\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.bernoulli.html#torch.bernoulli"
"torch.bincount","Count the frequency of each value in an array of non-negative ints.","torch.bincount(input\, weights=None\, minlength=0) → Tensor","https://pytorch.org/docs/stable/generated/torch.bincount.html#torch.bincount"
"torch.bitwise_and","Computes the bitwise AND of input and other. The input tensor must be of integral or Boolean types. For bool tensors\, it computes the logical AND.","torch.bitwise_and(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.bitwise_and.html#torch.bitwise_and"
"torch.bitwise_not","Computes the bitwise NOT of the given input tensor. The input tensor must be of integral or Boolean types. For bool tensors\, it computes the logical NOT.","torch.bitwise_not(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.bitwise_not.html#torch.bitwise_not"
"torch.bitwise_or","Computes the bitwise OR of input and other. The input tensor must be of integral or Boolean types. For bool tensors\, it computes the logical OR.","torch.bitwise_or(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.bitwise_or.html#torch.bitwise_or"
"torch.bitwise_xor","Computes the bitwise XOR of input and other. The input tensor must be of integral or Boolean types. For bool tensors\, it computes the logical XOR.","torch.bitwise_xor(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.bitwise_xor.html#torch.bitwise_xor"
"torch.blackman_window","Blackman window function.","torch.blackman_window(window_length\, periodic=True\, *\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.blackman_window.html#torch.blackman_window"
"torch.block_diag","Create a block diagonal matrix from provided tensors.","torch.block_diag(*tensors)","https://pytorch.org/docs/stable/generated/torch.block_diag.html#torch.block_diag"
"torch.bmm","Performs a batch matrix-matrix product of matrices stored in input and mat2.","torch.bmm(input\, mat2\, *\, deterministic=False\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.bmm.html#torch.bmm"
"torch.broadcast_shapes","Similar to broadcast_tensors() but for shapes.","torch.broadcast_shapes(*shapes) → Size","https://pytorch.org/docs/stable/generated/torch.broadcast_shapes.html#torch.broadcast_shapes"
"torch.broadcast_tensors","Broadcasts the given tensors according to Broadcasting semantics.","torch.broadcast_tensors(*tensors) → List of Tensors","https://pytorch.org/docs/stable/generated/torch.broadcast_tensors.html#torch.broadcast_tensors"
"torch.broadcast_to","Broadcasts input to the shape shape. Equivalent to calling input.expand(shape). See expand() for details.","torch.broadcast_to(input\, shape) → Tensor","https://pytorch.org/docs/stable/generated/torch.broadcast_to.html#torch.broadcast_to"
"torch.bucketize","Returns the indices of the buckets to which each value in the input belongs\, where the boundaries of the buckets are set by boundaries. Return a new tensor with the same size as input. If right is False (default)\, then the left boundary is closed. More formally\, the returned index satisfies the following rules:","torch.bucketize(input\, boundaries\, *\, out_int32=False\, right=False\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
"torch.can_cast","Determines if a type conversion is allowed under PyTorch casting rules described in the type promotion documentation.","torch.can_cast(from\, to) → bool","https://pytorch.org/docs/stable/generated/torch.can_cast.html#torch.can_cast"
"torch.cartesian_prod","Do cartesian product of the given sequence of tensors. The behavior is similar to python’s itertools.product.","torch.cartesian_prod(*tensors)","https://pytorch.org/docs/stable/generated/torch.cartesian_prod.html#torch.cartesian_prod"
"torch.cat","Concatenates the given sequence of seq tensors in the given dimension. All tensors must either have the same shape (except in the concatenating dimension) or be empty.","torch.cat(tensors\, dim=0\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.cat.html#torch.cat"
"torch.cdist","Computes batched the p-norm distance between each pair of the two collections of row vectors.","torch.cdist(x1\, x2\, p=2.0\, compute_mode='use_mm_for_euclid_dist_if_necessary')","https://pytorch.org/docs/stable/generated/torch.cdist.html#torch.cdist"
"torch.ceil","Returns a new tensor with the ceil of the elements of input\, the smallest integer greater than or equal to each element.","torch.ceil(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.ceil.html#torch.ceil"
"torch.chain_matmul","Returns the matrix product of the NNN   2-D tensors. This product is efficiently computed using the matrix chain order algorithm which selects the order in which incurs the lowest cost in terms of arithmetic operations ([CLRS]). Note that since this is a function to compute the product\, NNN   needs to be greater than or equal to 2; if equal to 2 then a trivial matrix-matrix product is returned. If NNN   is 1\, then this is a no-op - the original matrix is returned as is.","torch.chain_matmul(*matrices)","https://pytorch.org/docs/stable/generated/torch.chain_matmul.html#torch.chain_matmul"
"torch.cholesky","Computes the Cholesky decomposition of a symmetric positive-definite matrix AAA   or for batches of symmetric positive-definite matrices.","torch.cholesky(input\, upper=False\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
"torch.cholesky_inverse","Computes the inverse of a symmetric positive-definite matrix AAA   using its Cholesky factor uuu  : returns matrix inv. The inverse is computed using LAPACK routines dpotri and spotri (and the corresponding MAGMA routines).","torch.cholesky_inverse(input\, upper=False\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.cholesky_inverse.html#torch.cholesky_inverse"
"torch.cholesky_solve","Solves a linear system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrix uuu  .","torch.cholesky_solve(input\, input2\, upper=False\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.cholesky_solve.html#torch.cholesky_solve"
"torch.chunk","Splits a tensor into a specific number of chunks. Each chunk is a view of the input tensor.","torch.chunk(input\, chunks\, dim=0) → List of Tensors","https://pytorch.org/docs/stable/generated/torch.chunk.html#torch.chunk"
"torch.clamp","Clamp all elements in input into the range [ min\, max ]. Let min_value and max_value be min and max\, respectively\, this returns:","torch.clamp(input\, min\, max\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.clamp.html#torch.clamp"
"torch.clip","Alias for torch.clamp().","torch.clip(input\, min\, max\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.clip.html#torch.clip"
"torch.clone","Returns a copy of input.","torch.clone(input\, *\, memory_format=torch.preserve_format) → Tensor","https://pytorch.org/docs/stable/generated/torch.clone.html#torch.clone"
"torch.column_stack","Creates a new tensor by horizontally stacking the tensors in tensors.","torch.column_stack(tensors\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.column_stack.html#torch.column_stack"
"torch.combinations","Compute combinations of length rrr   of the given tensor. The behavior is similar to python’s itertools.combinations when with_replacement is set to False\, and itertools.combinations_with_replacement when with_replacement is set to True.","torch.combinations(input\, r=2\, with_replacement=False) → seq","https://pytorch.org/docs/stable/generated/torch.combinations.html#torch.combinations"
"torch.compiled_with_cxx11_abi","Returns whether PyTorch was built with _GLIBCXX_USE_CXX11_ABI=1","torch.compiled_with_cxx11_abi()","https://pytorch.org/docs/stable/generated/torch.compiled_with_cxx11_abi.html#torch.compiled_with_cxx11_abi"
"torch.complex","Constructs a complex tensor with its real part equal to real and its imaginary part equal to imag.","torch.complex(real\, imag\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.complex.html#torch.complex"
"torch.conj","Computes the element-wise conjugate of the given input tensor. If :attr`input` has a non-complex dtype\, this function just returns input.","torch.conj(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.conj.html#torch.conj"
"torch.copysign","Create a new floating-point tensor with the magnitude of input and the sign of other\, elementwise.","torch.copysign(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.copysign.html#torch.copysign"
"torch.cos","Returns a new tensor with the cosine  of the elements of input.","torch.cos(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.cos.html#torch.cos"
"torch.cosh","Returns a new tensor with the hyperbolic cosine  of the elements of input.","torch.cosh(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.cosh.html#torch.cosh"
"torch.count_nonzero","Counts the number of non-zero values in the tensor input along the given dim. If no dim is specified then all non-zeros in the tensor are counted.","torch.count_nonzero(input\, dim=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.count_nonzero.html#torch.count_nonzero"
"torch.cross","Returns the cross product of vectors in dimension dim of input and other.","torch.cross(input\, other\, dim=None\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.cross.html#torch.cross"
"torch.cummax","Returns a namedtuple (values\, indices) where values is the cumulative maximum of elements of input in the dimension dim. And indices is the index location of each maximum value found in the dimension dim.","torch.cummax(input\, dim\, *\, out=None) -> (Tensor\, LongTensor)","https://pytorch.org/docs/stable/generated/torch.cummax.html#torch.cummax"
"torch.cummin","Returns a namedtuple (values\, indices) where values is the cumulative minimum of elements of input in the dimension dim. And indices is the index location of each maximum value found in the dimension dim.","torch.cummin(input\, dim\, *\, out=None) -> (Tensor\, LongTensor)","https://pytorch.org/docs/stable/generated/torch.cummin.html#torch.cummin"
"torch.cumprod","Returns the cumulative product of elements of input in the dimension dim.","torch.cumprod(input\, dim\, *\, dtype=None\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.cumprod.html#torch.cumprod"
"torch.cumsum","Returns the cumulative sum of elements of input in the dimension dim.","torch.cumsum(input\, dim\, *\, dtype=None\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.cumsum.html#torch.cumsum"
"torch.deg2rad","Returns a new tensor with each of the elements of input converted from angles in degrees to radians.","torch.deg2rad(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.deg2rad.html#torch.deg2rad"
"torch.dequantize","Returns an fp32 Tensor by dequantizing a quantized Tensor","torch.dequantize(tensor) → Tensor","https://pytorch.org/docs/stable/generated/torch.dequantize.html#torch.dequantize"
"torch.det","Calculates determinant of a square matrix or batches of square matrices.","torch.det(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.det.html#torch.det"
"torch.diag"," If input is a vector (1-D tensor)\, then returns a 2-D square tensor with the elements of input as the diagonal. If input is a matrix (2-D tensor)\, then returns a 1-D tensor with the diagonal elements of input. ","torch.diag(input\, diagonal=0\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.diag.html#torch.diag"
"torch.diag_embed","Creates a tensor whose diagonals of certain 2D planes (specified by dim1 and dim2) are filled by input. To facilitate creating batched diagonal matrices\, the 2D planes formed by the last two dimensions of the returned tensor are chosen by default.","torch.diag_embed(input\, offset=0\, dim1=-2\, dim2=-1) → Tensor","https://pytorch.org/docs/stable/generated/torch.diag_embed.html#torch.diag_embed"
"torch.diagflat"," If input is a vector (1-D tensor)\, then returns a 2-D square tensor with the elements of input as the diagonal. If input is a tensor with more than one dimension\, then returns a 2-D tensor with diagonal elements equal to a flattened input. ","torch.diagflat(input\, offset=0) → Tensor","https://pytorch.org/docs/stable/generated/torch.diagflat.html#torch.diagflat"
"torch.diagonal","Returns a partial view of input with the its diagonal elements with respect to dim1 and dim2 appended as a dimension at the end of the shape.","torch.diagonal(input\, offset=0\, dim1=0\, dim2=1) → Tensor","https://pytorch.org/docs/stable/generated/torch.diagonal.html#torch.diagonal"
"torch.diff","Computes the n-th forward difference along the given dimension.","torch.diff(input\, n=1\, dim=-1\, prepend=None\, append=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.diff.html#torch.diff"
"torch.digamma","Computes the logarithmic derivative of the gamma function on input.","torch.digamma(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.digamma.html#torch.digamma"
"torch.dist","Returns the p-norm of (input - other)","torch.dist(input\, other\, p=2) → Tensor","https://pytorch.org/docs/stable/generated/torch.dist.html#torch.dist"
"torch.div","Divides each element of the input input by the corresponding element of other.","torch.div(input\, other\, *\, rounding_mode=None\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.div.html#torch.div"
"torch.divide","Alias for torch.div().","torch.divide(input\, other\, *\, rounding_mode=None\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.divide.html#torch.divide"
"torch.dot","Computes the dot product of two 1D tensors.","torch.dot(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.dot.html#torch.dot"
"torch.dstack","Stack tensors in sequence depthwise (along third axis).","torch.dstack(tensors\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.dstack.html#torch.dstack"
"torch.eig","Computes the eigenvalues and eigenvectors of a real square matrix.","torch.eig(input\, eigenvectors=False\, *\, out=None) -> (Tensor\, Tensor)","https://pytorch.org/docs/stable/generated/torch.eig.html#torch.eig"
"torch.einsum","Sums the product of the elements of the input operands along dimensions specified using a notation based on the Einstein summation convention.","torch.einsum(equation\, *operands) → Tensor","https://pytorch.org/docs/stable/generated/torch.einsum.html#torch.einsum"
"torch.empty","Returns a tensor filled with uninitialized data. The shape of the tensor is defined by the variable argument size.","torch.empty(*size\, *\, out=None\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False\, pin_memory=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.empty.html#torch.empty"
"torch.empty_like","Returns an uninitialized tensor with the same size as input. torch.empty_like(input) is equivalent to torch.empty(input.size()\, dtype=input.dtype\, layout=input.layout\, device=input.device).","torch.empty_like(input\, *\, dtype=None\, layout=None\, device=None\, requires_grad=False\, memory_format=torch.preserve_format) → Tensor","https://pytorch.org/docs/stable/generated/torch.empty_like.html#torch.empty_like"
"torch.empty_strided","Returns a tensor filled with uninitialized data. The shape and strides of the tensor is defined by the variable argument size and stride respectively. torch.empty_strided(size\, stride) is equivalent to torch.empty(size).as_strided(size\, stride).","torch.empty_strided(size\, stride\, *\, dtype=None\, layout=None\, device=None\, requires_grad=False\, pin_memory=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.empty_strided.html#torch.empty_strided"
"torch.eq","Computes element-wise equality","torch.eq(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.eq.html#torch.eq"
"torch.equal","True if two tensors have the same size and elements\, False otherwise.","torch.equal(input\, other) → bool","https://pytorch.org/docs/stable/generated/torch.equal.html#torch.equal"
"torch.erf","Computes the error function of each element. The error function is defined as follows:","torch.erf(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.erf.html#torch.erf"
"torch.erfc","Computes the complementary error function of each element of input. The complementary error function is defined as follows:","torch.erfc(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.erfc.html#torch.erfc"
"torch.erfinv","Computes the inverse error function of each element of input. The inverse error function is defined in the range (−1\,1)(-1\, 1)(−1\,1)   as:","torch.erfinv(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.erfinv.html#torch.erfinv"
"torch.exp","Returns a new tensor with the exponential of the elements of the input tensor input.","torch.exp(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.exp.html#torch.exp"
"torch.exp2","Computes the base two exponential function of input.","torch.exp2(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.exp2.html#torch.exp2"
"torch.expm1","Returns a new tensor with the exponential of the elements minus 1 of input.","torch.expm1(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.expm1.html#torch.expm1"
"torch.eye","Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.","torch.eye(n\, m=None\, *\, out=None\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.eye.html#torch.eye"
"torch.fake_quantize_per_channel_affine","Returns a new tensor with the data in input fake quantized per channel using scale\, zero_point\, quant_min and quant_max\, across the channel specified by axis.","torch.fake_quantize_per_channel_affine(input\, scale\, zero_point\, quant_min\, quant_max) → Tensor","https://pytorch.org/docs/stable/generated/torch.fake_quantize_per_channel_affine.html#torch.fake_quantize_per_channel_affine"
"torch.fake_quantize_per_tensor_affine","Returns a new tensor with the data in input fake quantized using scale\, zero_point\, quant_min and quant_max.","torch.fake_quantize_per_tensor_affine(input\, scale\, zero_point\, quant_min\, quant_max) → Tensor","https://pytorch.org/docs/stable/generated/torch.fake_quantize_per_tensor_affine.html#torch.fake_quantize_per_tensor_affine"
"torch.fix","Alias for torch.trunc()","torch.fix(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.fix.html#torch.fix"
"torch.flatten","Flattens input by reshaping it into a one-dimensional tensor. If start_dim or end_dim are passed\, only dimensions starting with start_dim and ending with end_dim are flattened. The order of elements in input is unchanged.","torch.flatten(input\, start_dim=0\, end_dim=-1) → Tensor","https://pytorch.org/docs/stable/generated/torch.flatten.html#torch.flatten"
"torch.flip","Reverse the order of a n-D tensor along given axis in dims.","torch.flip(input\, dims) → Tensor","https://pytorch.org/docs/stable/generated/torch.flip.html#torch.flip"
"torch.fliplr","Flip tensor in the left/right direction\, returning a new tensor.","torch.fliplr(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.fliplr.html#torch.fliplr"
"torch.flipud","Flip tensor in the up/down direction\, returning a new tensor.","torch.flipud(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.flipud.html#torch.flipud"
"torch.float_power","Raises input to the power of exponent\, elementwise\, in double precision. If neither input is complex returns a torch.float64 tensor\, and if one or more inputs is complex returns a torch.complex128 tensor.","torch.float_power(input\, exponent\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.float_power.html#torch.float_power"
"torch.floor","Returns a new tensor with the floor of the elements of input\, the largest integer less than or equal to each element.","torch.floor(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.floor.html#torch.floor"
"torch.floor_divide"," Warning This function’s name is a misnomer. It actually rounds the quotient towards zero instead of taking its floor. This behavior will be deprecated in a future PyTorch release. ","torch.floor_divide(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.floor_divide.html#torch.floor_divide"
"torch.fmax","Computes the element-wise maximum of input and other.","torch.fmax(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.fmax.html#torch.fmax"
"torch.fmin","Computes the element-wise minimum of input and other.","torch.fmin(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.fmin.html#torch.fmin"
"torch.fmod","Computes the element-wise remainder of division.","torch.fmod(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.fmod.html#torch.fmod"
"torch.frac","Computes the fractional portion of each element in input.","torch.frac(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.frac.html#torch.frac"
"torch.from_numpy","Creates a Tensor from a numpy.ndarray.","torch.from_numpy(ndarray) → Tensor","https://pytorch.org/docs/stable/generated/torch.from_numpy.html#torch.from_numpy"
"torch.full","Creates a tensor of size size filled with fill_value. The tensor’s dtype is inferred from fill_value.","torch.full(size\, fill_value\, *\, out=None\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.full.html#torch.full"
"torch.full_like","Returns a tensor with the same size as input filled with fill_value. torch.full_like(input\, fill_value) is equivalent to torch.full(input.size()\, fill_value\, dtype=input.dtype\, layout=input.layout\, device=input.device).","torch.full_like(input\, fill_value\, *\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False\, memory_format=torch.preserve_format) → Tensor","https://pytorch.org/docs/stable/generated/torch.full_like.html#torch.full_like"
"torch.gather","Gathers values along an axis specified by dim.","torch.gather(input\, dim\, index\, *\, sparse_grad=False\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.gather.html#torch.gather"
"torch.gcd","Computes the element-wise greatest common divisor (GCD) of input and other.","torch.gcd(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.gcd.html#torch.gcd"
"torch.ge","Computes input≥other\text{input} \geq \text{other}input≥other   element-wise.","torch.ge(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.ge.html#torch.ge"
"torch.geqrf","This is a low-level function for calling LAPACK directly. This function returns a namedtuple (a\, tau) as defined in LAPACK documentation for geqrf .","torch.geqrf(input\, *\, out=None) -> (Tensor\, Tensor)","https://pytorch.org/docs/stable/generated/torch.geqrf.html#torch.geqrf"
"torch.ger","Alias of torch.outer().","torch.ger(input\, vec2\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.ger.html#torch.ger"
"torch.get_default_dtype","Get the current default floating point torch.dtype.","torch.get_default_dtype() → torch.dtype","https://pytorch.org/docs/stable/generated/torch.get_default_dtype.html#torch.get_default_dtype"
"torch.get_rng_state","Returns the random number generator state as a torch.ByteTensor.","torch.get_rng_state()","https://pytorch.org/docs/stable/generated/torch.get_rng_state.html#torch.get_rng_state"
"torch.greater","Alias for torch.gt().","torch.greater(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.greater.html#torch.greater"
"torch.greater_equal","Alias for torch.ge().","torch.greater_equal(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.greater_equal.html#torch.greater_equal"
"torch.gt","Computes input>other\text{input} > \text{other}input>other   element-wise.","torch.gt(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.gt.html#torch.gt"
"torch.hamming_window","Hamming window function.","torch.hamming_window(window_length\, periodic=True\, alpha=0.54\, beta=0.46\, *\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.hamming_window.html#torch.hamming_window"
"torch.hann_window","Hann window function.","torch.hann_window(window_length\, periodic=True\, *\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.hann_window.html#torch.hann_window"
"torch.heaviside","Computes the Heaviside step function for each element in input. The Heaviside step function is defined as:","torch.heaviside(input\, values\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.heaviside.html#torch.heaviside"
"torch.histc","Computes the histogram of a tensor.","torch.histc(input\, bins=100\, min=0\, max=0\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.histc.html#torch.histc"
"torch.hstack","Stack tensors in sequence horizontally (column wise).","torch.hstack(tensors\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.hstack.html#torch.hstack"
"torch.hypot","Given the legs of a right triangle\, return its hypotenuse.","torch.hypot(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.hypot.html#torch.hypot"
"torch.i0","Computes the zeroth order modified Bessel function of the first kind for each element of input.","torch.i0(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.i0.html#torch.i0"
"torch.igamma","Computes the regularized lower incomplete gamma function:","torch.igamma(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.igamma.html#torch.igamma"
"torch.igammac","Computes the regularized upper incomplete gamma function:","torch.igammac(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.igammac.html#torch.igammac"
"torch.imag","Returns a new tensor containing imaginary values of the self tensor. The returned tensor and self share the same underlying storage.","torch.imag(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.imag.html#torch.imag"
"torch.index_select","Returns a new tensor which indexes the input tensor along dimension dim using the entries in index which is a LongTensor.","torch.index_select(input\, dim\, index\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.index_select.html#torch.index_select"
"torch.initial_seed","Returns the initial seed for generating random numbers as a Python long.","torch.initial_seed()","https://pytorch.org/docs/stable/generated/torch.initial_seed.html#torch.initial_seed"
"torch.inner","Computes the dot product for 1D tensors. For higher dimensions\, sums the product of elements from input and other along their last dimension.","torch.inner(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.inner.html#torch.inner"
"torch.inverse","Takes the inverse of the square matrix input. input can be batches of 2D square tensors\, in which case this function would return a tensor composed of individual inverses.","torch.inverse(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.inverse.html#torch.inverse"
"torch.is_complex","Returns True if the data type of input is a complex data type i.e.\, one of torch.complex64\, and torch.complex128.","torch.is_complex(input) -> (bool)","https://pytorch.org/docs/stable/generated/torch.is_complex.html#torch.is_complex"
"torch.is_floating_point","Returns True if the data type of input is a floating point data type i.e.\, one of torch.float64\, torch.float32\, torch.float16\, and torch.bfloat16.","torch.is_floating_point(input) -> (bool)","https://pytorch.org/docs/stable/generated/torch.is_floating_point.html#torch.is_floating_point"
"torch.is_nonzero","Returns True if the input is a single element tensor which is not equal to zero after type conversions. i.e. not equal to torch.tensor([0.]) or torch.tensor([0]) or torch.tensor([False]). Throws a RuntimeError if torch.numel() != 1 (even in case of sparse tensors).","torch.is_nonzero(input) -> (bool)","https://pytorch.org/docs/stable/generated/torch.is_nonzero.html#torch.is_nonzero"
"torch.is_storage","Returns True if obj is a PyTorch storage object.","torch.is_storage(obj)","https://pytorch.org/docs/stable/generated/torch.is_storage.html#torch.is_storage"
"torch.is_tensor","Returns True if obj is a PyTorch tensor.","torch.is_tensor(obj)","https://pytorch.org/docs/stable/generated/torch.is_tensor.html#torch.is_tensor"
"torch.isclose","Returns a new tensor with boolean elements representing if each element of input is “close” to the corresponding element of other. Closeness is defined as:","torch.isclose(input\, other\, rtol=1e-05\, atol=1e-08\, equal_nan=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.isclose.html#torch.isclose"
"torch.isfinite","Returns a new tensor with boolean elements representing if each element is finite or not.","torch.isfinite(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.isfinite.html#torch.isfinite"
"torch.isinf","Tests if each element of input is infinite (positive or negative infinity) or not.","torch.isinf(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.isinf.html#torch.isinf"
"torch.isnan","Returns a new tensor with boolean elements representing if each element of input is NaN or not. Complex values are considered NaN when either their real and/or imaginary part is NaN.","torch.isnan(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.isnan.html#torch.isnan"
"torch.isneginf","Tests if each element of input is negative infinity or not.","torch.isneginf(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.isneginf.html#torch.isneginf"
"torch.isposinf","Tests if each element of input is positive infinity or not.","torch.isposinf(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.isposinf.html#torch.isposinf"
"torch.isreal","Returns a new tensor with boolean elements representing if each element of input is real-valued or not. All real-valued types are considered real. Complex values are considered real when their imaginary part is 0.","torch.isreal(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.isreal.html#torch.isreal"
"torch.istft","Inverse short time Fourier Transform. This is expected to be the inverse of stft(). It has the same parameters (+ additional optional parameter of length) and it should return the least squares estimation of the original signal. The algorithm will check using the NOLA condition ( nonzero overlap).","torch.istft(input\, n_fft\, hop_length=None\, win_length=None\, window=None\, center=True\, normalized=False\, onesided=None\, length=None\, return_complex=False)","https://pytorch.org/docs/stable/generated/torch.istft.html#torch.istft"
"torch.kaiser_window","Computes the Kaiser window with window length window_length and shape parameter beta.","torch.kaiser_window(window_length\, periodic=True\, beta=12.0\, *\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.kaiser_window.html#torch.kaiser_window"
"torch.kron","Computes the Kronecker product\, denoted by ⊗\otimes⊗  \, of input and other.","torch.kron(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.kron.html#torch.kron"
"torch.kthvalue","Returns a namedtuple (values\, indices) where values is the k th smallest element of each row of the input tensor in the given dimension dim. And indices is the index location of each element found.","torch.kthvalue(input\, k\, dim=None\, keepdim=False\, *\, out=None) -> (Tensor\, LongTensor)","https://pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
"torch.lcm","Computes the element-wise least common multiple (LCM) of input and other.","torch.lcm(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.lcm.html#torch.lcm"
"torch.ldexp","Multiplies input by 2**:attr:other.","torch.ldexp(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.ldexp.html#torch.ldexp"
"torch.le","Computes input≤other\text{input} \leq \text{other}input≤other   element-wise.","torch.le(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.le.html#torch.le"
"torch.lerp","Does a linear interpolation of two tensors start (given by input) and end based on a scalar or tensor weight and returns the resulting out tensor.","torch.lerp(input\, end\, weight\, *\, out=None)","https://pytorch.org/docs/stable/generated/torch.lerp.html#torch.lerp"
"torch.less","Alias for torch.lt().","torch.less(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.less.html#torch.less"
"torch.less_equal","Alias for torch.le().","torch.less_equal(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.less_equal.html#torch.less_equal"
"torch.lgamma","Computes the logarithm of the gamma function on input.","torch.lgamma(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.lgamma.html#torch.lgamma"
"torch.linspace","Creates a one-dimensional tensor of size steps whose values are evenly spaced from start to end\, inclusive. That is\, the value are:","torch.linspace(start\, end\, steps\, *\, out=None\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.linspace.html#torch.linspace"
"torch.lobpcg","Find the k largest (or smallest) eigenvalues and the corresponding eigenvectors of a symmetric positive defined generalized eigenvalue problem using matrix-free LOBPCG methods.","torch.lobpcg(A\, k=None\, B=None\, X=None\, n=None\, iK=None\, niter=None\, tol=None\, largest=None\, method=None\, tracker=None\, ortho_iparams=None\, ortho_fparams=None\, ortho_bparams=None)","https://pytorch.org/docs/stable/generated/torch.lobpcg.html#torch.lobpcg"
"torch.log","Returns a new tensor with the natural logarithm of the elements of input.","torch.log(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.log.html#torch.log"
"torch.log10","Returns a new tensor with the logarithm to the base 10 of the elements of input.","torch.log10(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.log10.html#torch.log10"
"torch.log1p","Returns a new tensor with the natural logarithm of (1 + input).","torch.log1p(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.log1p.html#torch.log1p"
"torch.log2","Returns a new tensor with the logarithm to the base 2 of the elements of input.","torch.log2(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.log2.html#torch.log2"
"torch.logaddexp","Logarithm of the sum of exponentiations of the inputs.","torch.logaddexp(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.logaddexp.html#torch.logaddexp"
"torch.logaddexp2","Logarithm of the sum of exponentiations of the inputs in base-2.","torch.logaddexp2(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.logaddexp2.html#torch.logaddexp2"
"torch.logcumsumexp","Returns the logarithm of the cumulative summation of the exponentiation of elements of input in the dimension dim.","torch.logcumsumexp(input\, dim\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.logcumsumexp.html#torch.logcumsumexp"
"torch.logdet","Calculates log determinant of a square matrix or batches of square matrices.","torch.logdet(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.logdet.html#torch.logdet"
"torch.logical_and","Computes the element-wise logical AND of the given input tensors. Zeros are treated as False and nonzeros are treated as True.","torch.logical_and(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.logical_and.html#torch.logical_and"
"torch.logical_not","Computes the element-wise logical NOT of the given input tensor. If not specified\, the output tensor will have the bool dtype. If the input tensor is not a bool tensor\, zeros are treated as False and non-zeros are treated as True.","torch.logical_not(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.logical_not.html#torch.logical_not"
"torch.logical_or","Computes the element-wise logical OR of the given input tensors. Zeros are treated as False and nonzeros are treated as True.","torch.logical_or(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.logical_or.html#torch.logical_or"
"torch.logical_xor","Computes the element-wise logical XOR of the given input tensors. Zeros are treated as False and nonzeros are treated as True.","torch.logical_xor(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.logical_xor.html#torch.logical_xor"
"torch.logit","Returns a new tensor with the logit of the elements of input. input is clamped to [eps\, 1 - eps] when eps is not None. When eps is None and input < 0 or input > 1\, the function will yields NaN.","torch.logit(input\, eps=None\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.logit.html#torch.logit"
"torch.logspace","Creates a one-dimensional tensor of size steps whose values are evenly spaced from basestart{{\text{{base}}}}^{{\text{{start}}}}basestart   to baseend{{\text{{base}}}}^{{\text{{end}}}}baseend  \, inclusive\, on a logarithmic scale with base base. That is\, the values are:","torch.logspace(start\, end\, steps\, base=10.0\, *\, out=None\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.logspace.html#torch.logspace"
"torch.logsumexp","Returns the log of summed exponentials of each row of the input tensor in the given dimension dim. The computation is numerically stabilized.","torch.logsumexp(input\, dim\, keepdim=False\, *\, out=None)","https://pytorch.org/docs/stable/generated/torch.logsumexp.html#torch.logsumexp"
"torch.lstsq","Computes the solution to the least squares and least norm problems for a full rank matrix AAA   of size (m×n)(m \times n)(m×n)   and a matrix BBB   of size (m×k)(m \times k)(m×k)  .","torch.lstsq(input\, A\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.lstsq.html#torch.lstsq"
"torch.lt","Computes input<other\text{input} < \text{other}input<other   element-wise.","torch.lt(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.lt.html#torch.lt"
"torch.lu","Computes the LU factorization of a matrix or batches of matrices A. Returns a tuple containing the LU factorization and pivots of A.  Pivoting is done if pivot is set to True.","torch.lu(*args\, **kwargs)","https://pytorch.org/docs/stable/generated/torch.lu.html#torch.lu"
"torch.lu_solve","Returns the LU solve of the linear system Ax=bAx = bAx=b   using the partially pivoted LU factorization of A from torch.lu().","torch.lu_solve(b\, LU_data\, LU_pivots\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.lu_solve.html#torch.lu_solve"
"torch.lu_unpack","Unpacks the data and pivots from a LU factorization of a tensor.","torch.lu_unpack(LU_data\, LU_pivots\, unpack_data=True\, unpack_pivots=True)","https://pytorch.org/docs/stable/generated/torch.lu_unpack.html#torch.lu_unpack"
"torch.manual_seed","Sets the seed for generating random numbers. Returns a torch.Generator object.","torch.manual_seed(seed)","https://pytorch.org/docs/stable/generated/torch.manual_seed.html#torch.manual_seed"
"torch.masked_select","Returns a new 1-D tensor which indexes the input tensor according to the boolean mask mask which is a BoolTensor.","torch.masked_select(input\, mask\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.masked_select.html#torch.masked_select"
"torch.matmul","Matrix product of two tensors.","torch.matmul(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.matmul.html#torch.matmul"
"torch.matrix_exp","Returns the matrix exponential. Supports batched input. For a matrix A\, the matrix exponential is defined as","torch.matrix_exp()","https://pytorch.org/docs/stable/generated/torch.matrix_exp.html#torch.matrix_exp"
"torch.matrix_power","Returns the matrix raised to the power n for square matrices. For batch of matrices\, each individual matrix is raised to the power n.","torch.matrix_power(input\, n) → Tensor","https://pytorch.org/docs/stable/generated/torch.matrix_power.html#torch.matrix_power"
"torch.matrix_rank","Returns the numerical rank of a 2-D tensor. The method to compute the matrix rank is done using SVD by default. If symmetric is True\, then input is assumed to be symmetric\, and the computation of the rank is done by obtaining the eigenvalues.","torch.matrix_rank(input\, tol=None\, symmetric=False\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.matrix_rank.html#torch.matrix_rank"
"torch.max","Returns the maximum value of all elements in the input tensor.","torch.max(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.max.html#torch.max"
"torch.maximum","Computes the element-wise maximum of input and other.","torch.maximum(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.maximum.html#torch.maximum"
"torch.mean","Returns the mean value of all elements in the input tensor.","torch.mean(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.mean.html#torch.mean"
"torch.median","Returns the median of the values in input.","torch.median(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.median.html#torch.median"
"torch.meshgrid","Take NNN   tensors\, each of which can be either scalar or 1-dimensional vector\, and create NNN   N-dimensional grids\, where the iii   th grid is defined by expanding the iii   th input over dimensions defined by other inputs.","torch.meshgrid(*tensors)","https://pytorch.org/docs/stable/generated/torch.meshgrid.html#torch.meshgrid"
"torch.min","Returns the minimum value of all elements in the input tensor.","torch.min(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.min.html#torch.min"
"torch.minimum","Computes the element-wise minimum of input and other.","torch.minimum(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.minimum.html#torch.minimum"
"torch.mm","Performs a matrix multiplication of the matrices input and mat2.","torch.mm(input\, mat2\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.mm.html#torch.mm"
"torch.mode","Returns a namedtuple (values\, indices) where values is the mode value of each row of the input tensor in the given dimension dim\, i.e. a value which appears most often in that row\, and indices is the index location of each mode value found.","torch.mode(input\, dim=-1\, keepdim=False\, *\, out=None) -> (Tensor\, LongTensor)","https://pytorch.org/docs/stable/generated/torch.mode.html#torch.mode"
"torch.moveaxis","Alias for torch.movedim().","torch.moveaxis(input\, source\, destination) → Tensor","https://pytorch.org/docs/stable/generated/torch.moveaxis.html#torch.moveaxis"
"torch.movedim","Moves the dimension(s) of input at the position(s) in source to the position(s) in destination.","torch.movedim(input\, source\, destination) → Tensor","https://pytorch.org/docs/stable/generated/torch.movedim.html#torch.movedim"
"torch.msort","Sorts the elements of the input tensor along its first dimension in ascending order by value.","torch.msort(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.msort.html#torch.msort"
"torch.mul","Multiplies each element of the input input with the scalar other and returns a new resulting tensor.","torch.mul(input\, other\, *\, out=None)","https://pytorch.org/docs/stable/generated/torch.mul.html#torch.mul"
"torch.multinomial","Returns a tensor where each row contains num_samples indices sampled from the multinomial probability distribution located in the corresponding row of tensor input.","torch.multinomial(input\, num_samples\, replacement=False\, *\, generator=None\, out=None) → LongTensor","https://pytorch.org/docs/stable/generated/torch.multinomial.html#torch.multinomial"
"torch.multiply","Alias for torch.mul().","torch.multiply(input\, other\, *\, out=None)","https://pytorch.org/docs/stable/generated/torch.multiply.html#torch.multiply"
"torch.mv","Performs a matrix-vector product of the matrix input and the vector vec.","torch.mv(input\, vec\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.mv.html#torch.mv"
"torch.mvlgamma","Computes the multivariate log-gamma function) with dimension ppp   element-wise\, given by","torch.mvlgamma(input\, p) → Tensor","https://pytorch.org/docs/stable/generated/torch.mvlgamma.html#torch.mvlgamma"
"torch.nan_to_num","Replaces NaN\, positive infinity\, and negative infinity values in input with the values specified by nan\, posinf\, and neginf\, respectively. By default\, NaN`s are replaced with zero\, positive infinity is replaced with the greatest finite value representable by :attr:`input’s dtype\, and negative infinity is replaced with the least finite value representable by input’s dtype.","torch.nan_to_num(input\, nan=0.0\, posinf=None\, neginf=None\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.nan_to_num.html#torch.nan_to_num"
"torch.nanmedian","Returns the median of the values in input\, ignoring NaN values.","torch.nanmedian(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.nanmedian.html#torch.nanmedian"
"torch.nanquantile","This is a variant of torch.quantile() that “ignores” NaN values\, computing the quantiles q as if NaN values in input did not exist. If all values in a reduced row are NaN then the quantiles for that reduction will be NaN. See the documentation for torch.quantile().","torch.nanquantile(input\, q\, dim=None\, keepdim=False\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.nanquantile.html#torch.nanquantile"
"torch.nansum","Returns the sum of all elements\, treating Not a Numbers (NaNs) as zero.","torch.nansum(input\, *\, dtype=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.nansum.html#torch.nansum"
"torch.narrow","Returns a new tensor that is a narrowed version of input tensor. The dimension dim is input from start to start + length. The returned tensor and input tensor share the same underlying storage.","torch.narrow(input\, dim\, start\, length) → Tensor","https://pytorch.org/docs/stable/generated/torch.narrow.html#torch.narrow"
"torch.ne","Computes input≠other\text{input} \neq \text{other}input=other   element-wise.","torch.ne(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.ne.html#torch.ne"
"torch.neg","Returns a new tensor with the negative of the elements of input.","torch.neg(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.neg.html#torch.neg"
"torch.negative","Alias for torch.neg()","torch.negative(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.negative.html#torch.negative"
"torch.nextafter","Return the next floating-point value after input towards other\, elementwise.","torch.nextafter(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.nextafter.html#torch.nextafter"
"torch.nonzero"," Note torch.nonzero(...\, as_tuple=False) (default) returns a 2-D tensor where each row is the index for a nonzero value. torch.nonzero(...\, as_tuple=True) returns a tuple of 1-D index tensors\, allowing for advanced indexing\, so x[x.nonzero(as_tuple=True)] gives all nonzero values of tensor x. Of the returned tuple\, each index tensor contains nonzero indices for a certain dimension. See below for more details on the two behaviors. When input is on CUDA\, torch.nonzero() causes host-device synchronization. ","torch.nonzero(input\, *\, out=None\, as_tuple=False) → LongTensor or tuple of LongTensors","https://pytorch.org/docs/stable/generated/torch.nonzero.html#torch.nonzero"
"torch.norm","Returns the matrix norm or vector norm of a given tensor.","torch.norm(input\, p='fro'\, dim=None\, keepdim=False\, out=None\, dtype=None)","https://pytorch.org/docs/stable/generated/torch.norm.html#torch.norm"
"torch.normal","Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.","torch.normal(mean\, std\, *\, generator=None\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.normal.html#torch.normal"
"torch.not_equal","Alias for torch.ne().","torch.not_equal(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.not_equal.html#torch.not_equal"
"torch.numel","Returns the total number of elements in the input tensor.","torch.numel(input) → int","https://pytorch.org/docs/stable/generated/torch.numel.html#torch.numel"
"torch.ones","Returns a tensor filled with the scalar value 1\, with the shape defined by the variable argument size.","torch.ones(*size\, *\, out=None\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones"
"torch.ones_like","Returns a tensor filled with the scalar value 1\, with the same size as input. torch.ones_like(input) is equivalent to torch.ones(input.size()\, dtype=input.dtype\, layout=input.layout\, device=input.device).","torch.ones_like(input\, *\, dtype=None\, layout=None\, device=None\, requires_grad=False\, memory_format=torch.preserve_format) → Tensor","https://pytorch.org/docs/stable/generated/torch.ones_like.html#torch.ones_like"
"torch.orgqr","Computes the orthogonal matrix Q of a QR factorization\, from the (input\, input2) tuple returned by torch.geqrf().","torch.orgqr(input\, input2) → Tensor","https://pytorch.org/docs/stable/generated/torch.orgqr.html#torch.orgqr"
"torch.ormqr","Multiplies mat (given by input3) by the orthogonal Q matrix of the QR factorization formed by torch.geqrf() that is represented by (a\, tau) (given by (input\, input2)).","torch.ormqr(input\, input2\, input3\, left=True\, transpose=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
"torch.outer","Outer product of input and vec2. If input is a vector of size nnn   and vec2 is a vector of size mmm  \, then out must be a matrix of size (n×m)(n \times m)(n×m)  .","torch.outer(input\, vec2\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.outer.html#torch.outer"
"torch.pca_lowrank","Performs linear Principal Component Analysis (PCA) on a low-rank matrix\, batches of such matrices\, or sparse matrix.","torch.pca_lowrank(A\, q=None\, center=True\, niter=2)","https://pytorch.org/docs/stable/generated/torch.pca_lowrank.html#torch.pca_lowrank"
"torch.pinverse","Calculates the pseudo-inverse (also known as the Moore-Penrose inverse) of a 2D tensor. Please look at Moore-Penrose inverse for more details","torch.pinverse(input\, rcond=1e-15) → Tensor","https://pytorch.org/docs/stable/generated/torch.pinverse.html#torch.pinverse"
"torch.poisson","Returns a tensor of the same size as input with each element sampled from a Poisson distribution with rate parameter given by the corresponding element in input i.e.\,","torch.poisson(input\, generator=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.poisson.html#torch.poisson"
"torch.polar","Constructs a complex tensor whose elements are Cartesian coordinates corresponding to the polar coordinates with absolute value abs and angle angle.","torch.polar(abs\, angle\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.polar.html#torch.polar"
"torch.polygamma","Computes the nthn^{th}nth   derivative of the digamma function on input. n≥0n \geq 0n≥0   is called the order of the polygamma function.","torch.polygamma(n\, input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.polygamma.html#torch.polygamma"
"torch.pow","Takes the power of each element in input with exponent and returns a tensor with the result.","torch.pow(input\, exponent\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.pow.html#torch.pow"
"torch.prod","Returns the product of all elements in the input tensor.","torch.prod(input\, *\, dtype=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
"torch.promote_types","Returns the torch.dtype with the smallest size and scalar kind that is not smaller nor of lower kind than either type1 or type2. See type promotion documentation for more information on the type promotion logic.","torch.promote_types(type1\, type2) → dtype","https://pytorch.org/docs/stable/generated/torch.promote_types.html#torch.promote_types"
"torch.qr","Computes the QR decomposition of a matrix or a batch of matrices input\, and returns a namedtuple (Q\, R) of tensors such that input=QR\text{input} = Q Rinput=QR   with QQQ   being an orthogonal matrix or batch of orthogonal matrices and RRR   being an upper triangular matrix or batch of upper triangular matrices.","torch.qr(input\, some=True\, *\, out=None) -> (Tensor\, Tensor)","https://pytorch.org/docs/stable/generated/torch.qr.html#torch.qr"
"torch.quantile","Returns the q-th quantiles of all elements in the input tensor\, doing a linear interpolation when the q-th quantile lies between two data points.","torch.quantile(input\, q) → Tensor","https://pytorch.org/docs/stable/generated/torch.quantile.html#torch.quantile"
"torch.quantize_per_channel","Converts a float tensor to a per-channel quantized tensor with given scales and zero points.","torch.quantize_per_channel(input\, scales\, zero_points\, axis\, dtype) → Tensor","https://pytorch.org/docs/stable/generated/torch.quantize_per_channel.html#torch.quantize_per_channel"
"torch.quantize_per_tensor","Converts a float tensor to a quantized tensor with given scale and zero point.","torch.quantize_per_tensor(input\, scale\, zero_point\, dtype) → Tensor","https://pytorch.org/docs/stable/generated/torch.quantize_per_tensor.html#torch.quantize_per_tensor"
"torch.rad2deg","Returns a new tensor with each of the elements of input converted from angles in radians to degrees.","torch.rad2deg(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.rad2deg.html#torch.rad2deg"
"torch.rand","Returns a tensor filled with random numbers from a uniform distribution on the interval [0\,1)[0\, 1)[0\,1)  ","torch.rand(*size\, *\, out=None\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand"
"torch.rand_like","Returns a tensor with the same size as input that is filled with random numbers from a uniform distribution on the interval [0\,1)[0\, 1)[0\,1)  . torch.rand_like(input) is equivalent to torch.rand(input.size()\, dtype=input.dtype\, layout=input.layout\, device=input.device).","torch.rand_like(input\, *\, dtype=None\, layout=None\, device=None\, requires_grad=False\, memory_format=torch.preserve_format) → Tensor","https://pytorch.org/docs/stable/generated/torch.rand_like.html#torch.rand_like"
"torch.randint","Returns a tensor filled with random integers generated uniformly between low (inclusive) and high (exclusive).","torch.randint(low=0\, high\, size\, *\, generator=None\, out=None\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.randint.html#torch.randint"
"torch.randint_like","Returns a tensor with the same shape as Tensor input filled with random integers generated uniformly between low (inclusive) and high (exclusive).","torch.randint_like(input\, low=0\, high\, *\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False\, memory_format=torch.preserve_format) → Tensor","https://pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
"torch.randn","Returns a tensor filled with random numbers from a normal distribution with mean 0 and variance 1 (also called the standard normal distribution).","torch.randn(*size\, *\, out=None\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
"torch.randn_like","Returns a tensor with the same size as input that is filled with random numbers from a normal distribution with mean 0 and variance 1. torch.randn_like(input) is equivalent to torch.randn(input.size()\, dtype=input.dtype\, layout=input.layout\, device=input.device).","torch.randn_like(input\, *\, dtype=None\, layout=None\, device=None\, requires_grad=False\, memory_format=torch.preserve_format) → Tensor","https://pytorch.org/docs/stable/generated/torch.randn_like.html#torch.randn_like"
"torch.randperm","Returns a random permutation of integers from 0 to n - 1.","torch.randperm(n\, *\, generator=None\, out=None\, dtype=torch.int64\, layout=torch.strided\, device=None\, requires_grad=False\, pin_memory=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.randperm.html#torch.randperm"
"torch.range","Returns a 1-D tensor of size ⌊end−startstep⌋+1\left\lfloor \frac{\text{end} - \text{start}}{\text{step}} \right\rfloor + 1⌊stepend−start​⌋+1   with values from start to end with step step. Step is the gap between two values in the tensor.","torch.range(start=0\, end\, step=1\, *\, out=None\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.range.html#torch.range"
"torch.ravel","Return a contiguous flattened tensor. A copy is made only if needed.","torch.ravel(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.ravel.html#torch.ravel"
"torch.real","Returns a new tensor containing real values of the self tensor. The returned tensor and self share the same underlying storage.","torch.real(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.real.html#torch.real"
"torch.reciprocal","Returns a new tensor with the reciprocal of the elements of input","torch.reciprocal(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.reciprocal.html#torch.reciprocal"
"torch.remainder","Computes the element-wise remainder of division.","torch.remainder(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.remainder.html#torch.remainder"
"torch.renorm","Returns a tensor where each sub-tensor of input along dimension dim is normalized such that the p-norm of the sub-tensor is lower than the value maxnorm","torch.renorm(input\, p\, dim\, maxnorm\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.renorm.html#torch.renorm"
"torch.repeat_interleave","Repeat elements of a tensor.","torch.repeat_interleave(input\, repeats\, dim=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.repeat_interleave.html#torch.repeat_interleave"
"torch.reshape","Returns a tensor with the same data and number of elements as input\, but with the specified shape. When possible\, the returned tensor will be a view of input. Otherwise\, it will be a copy. Contiguous inputs and inputs with compatible strides can be reshaped without copying\, but you should not depend on the copying vs. viewing behavior.","torch.reshape(input\, shape) → Tensor","https://pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
"torch.result_type","Returns the torch.dtype that would result from performing an arithmetic operation on the provided input tensors. See type promotion documentation for more information on the type promotion logic.","torch.result_type(tensor1\, tensor2) → dtype","https://pytorch.org/docs/stable/generated/torch.result_type.html#torch.result_type"
"torch.roll","Roll the tensor along the given dimension(s). Elements that are shifted beyond the last position are re-introduced at the first position. If a dimension is not specified\, the tensor will be flattened before rolling and then restored to the original shape.","torch.roll(input\, shifts\, dims=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.roll.html#torch.roll"
"torch.rot90","Rotate a n-D tensor by 90 degrees in the plane specified by dims axis. Rotation direction is from the first towards the second axis if k > 0\, and from the second towards the first for k < 0.","torch.rot90(input\, k\, dims) → Tensor","https://pytorch.org/docs/stable/generated/torch.rot90.html#torch.rot90"
"torch.round","Returns a new tensor with each of the elements of input rounded to the closest integer.","torch.round(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.round.html#torch.round"
"torch.row_stack","Alias of torch.vstack().","torch.row_stack(tensors\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.row_stack.html#torch.row_stack"
"torch.rsqrt","Returns a new tensor with the reciprocal of the square-root of each of the elements of input.","torch.rsqrt(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.rsqrt.html#torch.rsqrt"
"torch.scatter","Out-of-place version of torch.Tensor.scatter_()","torch.scatter(input\, dim\, index\, src) → Tensor","https://pytorch.org/docs/stable/generated/torch.scatter.html#torch.scatter"
"torch.scatter_add","Out-of-place version of torch.Tensor.scatter_add_()","torch.scatter_add(input\, dim\, index\, src) → Tensor","https://pytorch.org/docs/stable/generated/torch.scatter_add.html#torch.scatter_add"
"torch.searchsorted","Find the indices from the innermost dimension of sorted_sequence such that\, if the corresponding values in values were inserted before the indices\, the order of the corresponding innermost dimension within sorted_sequence would be preserved. Return a new tensor with the same size as values. If right is False (default)\, then the left boundary of sorted_sequence is closed. More formally\, the returned index satisfies the following rules:","torch.searchsorted(sorted_sequence\, values\, *\, out_int32=False\, right=False\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.searchsorted.html#torch.searchsorted"
"torch.seed","Sets the seed for generating random numbers to a non-deterministic random number. Returns a 64 bit number used to seed the RNG.","torch.seed()","https://pytorch.org/docs/stable/generated/torch.seed.html#torch.seed"
"torch.set_default_dtype","Sets the default floating point dtype to d. This dtype is:","torch.set_default_dtype(d)","https://pytorch.org/docs/stable/generated/torch.set_default_dtype.html#torch.set_default_dtype"
"torch.set_default_tensor_type","Sets the default torch.Tensor type to floating point tensor type t. This type will also be used as default floating point type for type inference in torch.tensor().","torch.set_default_tensor_type(t)","https://pytorch.org/docs/stable/generated/torch.set_default_tensor_type.html#torch.set_default_tensor_type"
"torch.set_flush_denormal","Disables denormal floating numbers on CPU.","torch.set_flush_denormal(mode) → bool","https://pytorch.org/docs/stable/generated/torch.set_flush_denormal.html#torch.set_flush_denormal"
"torch.set_printoptions","Set options for printing. Items shamelessly taken from NumPy","torch.set_printoptions(precision=None\, threshold=None\, edgeitems=None\, linewidth=None\, profile=None\, sci_mode=None)","https://pytorch.org/docs/stable/generated/torch.set_printoptions.html#torch.set_printoptions"
"torch.set_rng_state","Sets the random number generator state.","torch.set_rng_state(new_state)","https://pytorch.org/docs/stable/generated/torch.set_rng_state.html#torch.set_rng_state"
"torch.sgn","For complex tensors\, this function returns a new tensor whose elemants have the same angle as that of the elements of input and absolute value 1. For a non-complex tensor\, this function returns the signs of the elements of input (see torch.sign()).","torch.sgn(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.sgn.html#torch.sgn"
"torch.sigmoid","Returns a new tensor with the sigmoid of the elements of input.","torch.sigmoid(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.sigmoid.html#torch.sigmoid"
"torch.sign","Returns a new tensor with the signs of the elements of input.","torch.sign(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.sign.html#torch.sign"
"torch.signbit","Tests if each element of input has its sign bit set (is less than zero) or not.","torch.signbit(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.signbit.html#torch.signbit"
"torch.sin","Returns a new tensor with the sine of the elements of input.","torch.sin(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.sin.html#torch.sin"
"torch.sinc","Computes the normalized sinc of input.","torch.sinc(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.sinc.html#torch.sinc"
"torch.sinh","Returns a new tensor with the hyperbolic sine of the elements of input.","torch.sinh(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.sinh.html#torch.sinh"
"torch.slogdet","Calculates the sign and log absolute value of the determinant(s) of a square matrix or batches of square matrices.","torch.slogdet(input) -> (Tensor\, Tensor)","https://pytorch.org/docs/stable/generated/torch.slogdet.html#torch.slogdet"
"torch.solve","This function returns the solution to the system of linear equations represented by AX=BAX = BAX=B   and the LU factorization of A\, in order as a namedtuple solution\, LU.","torch.solve(input\, A\, *\, out=None) -> (Tensor\, Tensor)","https://pytorch.org/docs/stable/generated/torch.solve.html#torch.solve"
"torch.sort","Sorts the elements of the input tensor along a given dimension in ascending order by value.","torch.sort(input\, dim=-1\, descending=False\, *\, out=None) -> (Tensor\, LongTensor)","https://pytorch.org/docs/stable/generated/torch.sort.html#torch.sort"
"torch.sparse_coo_tensor","Constructs a sparse tensor in COO(rdinate) format with specified values at the given indices.","torch.sparse_coo_tensor(indices\, values\, size=None\, *\, dtype=None\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.sparse_coo_tensor.html#torch.sparse_coo_tensor"
"torch.split","Splits the tensor into chunks. Each chunk is a view of the original tensor.","torch.split(tensor\, split_size_or_sections\, dim=0)","https://pytorch.org/docs/stable/generated/torch.split.html#torch.split"
"torch.sqrt","Returns a new tensor with the square-root of the elements of input.","torch.sqrt(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.sqrt.html#torch.sqrt"
"torch.square","Returns a new tensor with the square of the elements of input.","torch.square(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.square.html#torch.square"
"torch.squeeze","Returns a tensor with all the dimensions of input of size 1 removed.","torch.squeeze(input\, dim=None\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
"torch.stack","Concatenates a sequence of tensors along a new dimension.","torch.stack(tensors\, dim=0\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.stack.html#torch.stack"
"torch.std","Returns the standard-deviation of all elements in the input tensor.","torch.std(input\, unbiased=True) → Tensor","https://pytorch.org/docs/stable/generated/torch.std.html#torch.std"
"torch.std_mean","Returns the standard-deviation and mean of all elements in the input tensor.","torch.std_mean(input\, unbiased=True) -> (Tensor\, Tensor)","https://pytorch.org/docs/stable/generated/torch.std_mean.html#torch.std_mean"
"torch.stft","Short-time Fourier transform (STFT).","torch.stft(input\, n_fft\, hop_length=None\, win_length=None\, window=None\, center=True\, pad_mode='reflect'\, normalized=False\, onesided=None\, return_complex=None)","https://pytorch.org/docs/stable/generated/torch.stft.html#torch.stft"
"torch.sub","Subtracts other\, scaled by alpha\, from input.","torch.sub(input\, other\, *\, alpha=1\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.sub.html#torch.sub"
"torch.subtract","Alias for torch.sub().","torch.subtract(input\, other\, *\, alpha=1\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.subtract.html#torch.subtract"
"torch.sum","Returns the sum of all elements in the input tensor.","torch.sum(input\, *\, dtype=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.sum.html#torch.sum"
"torch.svd","Computes the singular value decomposition of either a matrix or batch of matrices input. The singular value decomposition is represented as a namedtuple (U\,S\,V)\, such that input = U diag(S) Vᴴ\, where Vᴴ is the transpose of V for the real-valued inputs\, or the conjugate transpose of V for the complex-valued inputs. If input is a batch of tensors\, then U\, S\, and V are also batched with the same batch dimensions as input.","torch.svd(input\, some=True\, compute_uv=True\, *\, out=None) -> (Tensor\, Tensor\, Tensor)","https://pytorch.org/docs/stable/generated/torch.svd.html#torch.svd"
"torch.svd_lowrank","Return the singular value decomposition (U\, S\, V) of a matrix\, batches of matrices\, or a sparse matrix AAA   such that A≈Udiag(S)VTA \approx U diag(S) V^TA≈Udiag(S)VT  . In case MMM   is given\, then SVD is computed for the matrix A−MA - MA−M  .","torch.svd_lowrank(A\, q=6\, niter=2\, M=None)","https://pytorch.org/docs/stable/generated/torch.svd_lowrank.html#torch.svd_lowrank"
"torch.swapaxes","Alias for torch.transpose().","torch.swapaxes(input\, axis0\, axis1) → Tensor","https://pytorch.org/docs/stable/generated/torch.swapaxes.html#torch.swapaxes"
"torch.swapdims","Alias for torch.transpose().","torch.swapdims(input\, dim0\, dim1) → Tensor","https://pytorch.org/docs/stable/generated/torch.swapdims.html#torch.swapdims"
"torch.symeig","This function returns eigenvalues and eigenvectors of a real symmetric matrix input or a batch of real symmetric matrices\, represented by a namedtuple (eigenvalues\, eigenvectors).","torch.symeig(input\, eigenvectors=False\, upper=True\, *\, out=None) -> (Tensor\, Tensor)","https://pytorch.org/docs/stable/generated/torch.symeig.html#torch.symeig"
"torch.t","Expects input to be <= 2-D tensor and transposes dimensions 0 and 1.","torch.t(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.t.html#torch.t"
"torch.take","Returns a new tensor with the elements of input at the given indices. The input tensor is treated as if it were viewed as a 1-D tensor. The result takes the same shape as the indices.","torch.take(input\, index) → Tensor","https://pytorch.org/docs/stable/generated/torch.take.html#torch.take"
"torch.tan","Returns a new tensor with the tangent of the elements of input.","torch.tan(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.tan.html#torch.tan"
"torch.tanh","Returns a new tensor with the hyperbolic tangent of the elements of input.","torch.tanh(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.tanh.html#torch.tanh"
"torch.tensor","Constructs a tensor with data.","torch.tensor(data\, *\, dtype=None\, device=None\, requires_grad=False\, pin_memory=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor"
"torch.tensor_split","Splits a tensor into multiple sub-tensors\, all of which are views of input\, along dimension dim according to the indices or number of sections specified by indices_or_sections. This function is based on NumPy’s numpy.array_split().","torch.tensor_split(input\, indices_or_sections\, dim=0) → List of Tensors","https://pytorch.org/docs/stable/generated/torch.tensor_split.html#torch.tensor_split"
"torch.tensordot","Returns a contraction of a and b over multiple dimensions.","torch.tensordot(a\, b\, dims=2\, out=None)","https://pytorch.org/docs/stable/generated/torch.tensordot.html#torch.tensordot"
"torch.tile","Constructs a tensor by repeating the elements of input. The reps argument specifies the number of repetitions in each dimension.","torch.tile(input\, reps) → Tensor","https://pytorch.org/docs/stable/generated/torch.tile.html#torch.tile"
"torch.topk","Returns the k largest elements of the given input tensor along a given dimension.","torch.topk(input\, k\, dim=None\, largest=True\, sorted=True\, *\, out=None) -> (Tensor\, LongTensor)","https://pytorch.org/docs/stable/generated/torch.topk.html#torch.topk"
"torch.trace","Returns the sum of the elements of the diagonal of the input 2-D matrix.","torch.trace(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.trace.html#torch.trace"
"torch.transpose","Returns a tensor that is a transposed version of input. The given dimensions dim0 and dim1 are swapped.","torch.transpose(input\, dim0\, dim1) → Tensor","https://pytorch.org/docs/stable/generated/torch.transpose.html#torch.transpose"
"torch.trapz","Estimate ∫y dx\int y\\,dx∫ydx   along dim\, using the trapezoid rule.","torch.trapz(y\, x\, *\, dim=-1) → Tensor","https://pytorch.org/docs/stable/generated/torch.trapz.html#torch.trapz"
"torch.triangular_solve","Solves a system of equations with a triangular coefficient matrix AAA   and multiple right-hand sides bbb  .","torch.triangular_solve(input\, A\, upper=True\, transpose=False\, unitriangular=False) -> (Tensor\, Tensor)","https://pytorch.org/docs/stable/generated/torch.triangular_solve.html#torch.triangular_solve"
"torch.tril","Returns the lower triangular part of the matrix (2-D tensor) or batch of matrices input\, the other elements of the result tensor out are set to 0.","torch.tril(input\, diagonal=0\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.tril.html#torch.tril"
"torch.tril_indices","Returns the indices of the lower triangular part of a row-by- col matrix in a 2-by-N Tensor\, where the first row contains row coordinates of all indices and the second row contains column coordinates. Indices are ordered based on rows and then columns.","torch.tril_indices(row\, col\, offset=0\, *\, dtype=torch.long\, device='cpu'\, layout=torch.strided) → Tensor","https://pytorch.org/docs/stable/generated/torch.tril_indices.html#torch.tril_indices"
"torch.triu","Returns the upper triangular part of a matrix (2-D tensor) or batch of matrices input\, the other elements of the result tensor out are set to 0.","torch.triu(input\, diagonal=0\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.triu.html#torch.triu"
"torch.triu_indices","Returns the indices of the upper triangular part of a row by col matrix in a 2-by-N Tensor\, where the first row contains row coordinates of all indices and the second row contains column coordinates. Indices are ordered based on rows and then columns.","torch.triu_indices(row\, col\, offset=0\, *\, dtype=torch.long\, device='cpu'\, layout=torch.strided) → Tensor","https://pytorch.org/docs/stable/generated/torch.triu_indices.html#torch.triu_indices"
"torch.true_divide","Alias for torch.div() with rounding_mode=None.","torch.true_divide(dividend\, divisor\, *\, out) → Tensor","https://pytorch.org/docs/stable/generated/torch.true_divide.html#torch.true_divide"
"torch.trunc","Returns a new tensor with the truncated integer values of the elements of input.","torch.trunc(input\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.trunc.html#torch.trunc"
"torch.unbind","Removes a tensor dimension.","torch.unbind(input\, dim=0) → seq","https://pytorch.org/docs/stable/generated/torch.unbind.html#torch.unbind"
"torch.unique","Returns the unique elements of the input tensor.","torch.unique(*args\, **kwargs)","https://pytorch.org/docs/stable/generated/torch.unique.html#torch.unique"
"torch.unique_consecutive","Eliminates all but the first element from every consecutive group of equivalent elements.","torch.unique_consecutive(*args\, **kwargs)","https://pytorch.org/docs/stable/generated/torch.unique_consecutive.html#torch.unique_consecutive"
"torch.unsqueeze","Returns a new tensor with a dimension of size one inserted at the specified position.","torch.unsqueeze(input\, dim) → Tensor","https://pytorch.org/docs/stable/generated/torch.unsqueeze.html#torch.unsqueeze"
"torch.use_deterministic_algorithms","Sets whether PyTorch operations must use “deterministic” algorithms. That is\, algorithms which\, given the same input\, and when run on the same software and hardware\, always produce the same output. When True\, operations will use deterministic algorithms when available\, and if only nondeterministic algorithms are available they will throw a :class:RuntimeError when called.","torch.use_deterministic_algorithms(d)","https://pytorch.org/docs/stable/generated/torch.use_deterministic_algorithms.html#torch.use_deterministic_algorithms"
"torch.vander","Generates a Vandermonde matrix.","torch.vander(x\, N=None\, increasing=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.vander.html#torch.vander"
"torch.var","Returns the variance of all elements in the input tensor.","torch.var(input\, unbiased=True) → Tensor","https://pytorch.org/docs/stable/generated/torch.var.html#torch.var"
"torch.var_mean","Returns the variance and mean of all elements in the input tensor.","torch.var_mean(input\, unbiased=True) -> (Tensor\, Tensor)","https://pytorch.org/docs/stable/generated/torch.var_mean.html#torch.var_mean"
"torch.vdot","Computes the dot product of two 1D tensors. The vdot(a\, b) function handles complex numbers differently than dot(a\, b). If the first argument is complex\, the complex conjugate of the first argument is used for the calculation of the dot product.","torch.vdot(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.vdot.html#torch.vdot"
"torch.view_as_complex","Returns a view of input as a complex tensor. For an input complex tensor of size m1\,m2\,…\,mi\,2m1\, m2\, \dots\, mi\, 2m1\,m2\,…\,mi\,2  \, this function returns a new complex tensor of size m1\,m2\,…\,mim1\, m2\, \dots\, mim1\,m2\,…\,mi   where the last dimension of the input tensor is expected to represent the real and imaginary components of complex numbers.","torch.view_as_complex(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.view_as_complex.html#torch.view_as_complex"
"torch.view_as_real","Returns a view of input as a real tensor. For an input complex tensor of size m1\,m2\,…\,mim1\, m2\, \dots\, mim1\,m2\,…\,mi  \, this function returns a new real tensor of size m1\,m2\,…\,mi\,2m1\, m2\, \dots\, mi\, 2m1\,m2\,…\,mi\,2  \, where the last dimension of size 2 represents the real and imaginary components of complex numbers.","torch.view_as_real(input) → Tensor","https://pytorch.org/docs/stable/generated/torch.view_as_real.html#torch.view_as_real"
"torch.vstack","Stack tensors in sequence vertically (row wise).","torch.vstack(tensors\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.vstack.html#torch.vstack"
"torch.where","Return a tensor of elements selected from either x or y\, depending on condition.","torch.where(condition\, x\, y) → Tensor","https://pytorch.org/docs/stable/generated/torch.where.html#torch.where"
"torch.xlogy","Computes input * log(other) with the following cases.","torch.xlogy(input\, other\, *\, out=None) → Tensor","https://pytorch.org/docs/stable/generated/torch.xlogy.html#torch.xlogy"
"torch.zeros","Returns a tensor filled with the scalar value 0\, with the shape defined by the variable argument size.","torch.zeros(*size\, *\, out=None\, dtype=None\, layout=torch.strided\, device=None\, requires_grad=False) → Tensor","https://pytorch.org/docs/stable/generated/torch.zeros.html#torch.zeros"
"torch.zeros_like","Returns a tensor filled with the scalar value 0\, with the same size as input. torch.zeros_like(input) is equivalent to torch.zeros(input.size()\, dtype=input.dtype\, layout=input.layout\, device=input.device).","torch.zeros_like(input\, *\, dtype=None\, layout=None\, device=None\, requires_grad=False\, memory_format=torch.preserve_format) → Tensor","https://pytorch.org/docs/stable/generated/torch.zeros_like.html#torch.zeros_like"
