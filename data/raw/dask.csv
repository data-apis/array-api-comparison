name,description,signature,url
"add","This docstring was copied from numpy.add.","add(x1\, x2\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.add"
"all","Test whether all array elements along a given axis evaluate to True.","all(a[\, axis\, keepdims\, split_every\, out])","https://docs.dask.org/en/latest/array-api.html#dask.array.all"
"allclose","Returns True if two arrays are element-wise equal within a tolerance.","allclose(arr1\, arr2[\, rtol\, atol\, equal_nan])","https://docs.dask.org/en/latest/array-api.html#dask.array.allclose"
"angle","Return the angle of the complex argument.","angle(x[\, deg])","https://docs.dask.org/en/latest/array-api.html#dask.array.angle"
"any","Test whether any array element along a given axis evaluates to True.","any(a[\, axis\, keepdims\, split_every\, out])","https://docs.dask.org/en/latest/array-api.html#dask.array.any"
"append","Append values to the end of an array.","append(arr\, values[\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.append"
"apply_along_axis","Apply a function to 1-D slices along the given axis.","apply_along_axis(func1d\, axis\, arr\, *args[\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.apply_along_axis"
"apply_gufunc","Apply a generalized ufunc or similar python function to arrays.","apply_gufunc(func\, signature\, *args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.gufunc.apply_gufunc"
"apply_over_axes","Apply a function repeatedly over multiple axes.","apply_over_axes(func\, a\, axes)","https://docs.dask.org/en/latest/array-api.html#dask.array.apply_over_axes"
"arange","Return evenly spaced values from start to stop with step size step.","arange(*args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.arange"
"arccos","This docstring was copied from numpy.arccos.","arccos(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.arccos"
"arccosh","This docstring was copied from numpy.arccosh.","arccosh(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.arccosh"
"arcsin","This docstring was copied from numpy.arcsin.","arcsin(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.arcsin"
"arcsinh","This docstring was copied from numpy.arcsinh.","arcsinh(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.arcsinh"
"arctan","This docstring was copied from numpy.arctan.","arctan(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.arctan"
"arctan2","This docstring was copied from numpy.arctan2.","arctan2(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.arctan2"
"arctanh","This docstring was copied from numpy.arctanh.","arctanh(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.arctanh"
"argmax","Return the maximum of an array or maximum along an axis.","argmax(x[\, axis\, split_every\, out])","https://docs.dask.org/en/latest/array-api.html#dask.array.argmax"
"argmin","Return the minimum of an array or minimum along an axis.","argmin(x[\, axis\, split_every\, out])","https://docs.dask.org/en/latest/array-api.html#dask.array.argmin"
"argtopk","Extract the indices of the k largest elements from a on the given axis\, and return them sorted from largest to smallest.","argtopk(a\, k[\, axis\, split_every])","https://docs.dask.org/en/latest/array-api.html#dask.array.argtopk"
"argwhere","Find the indices of array elements that are non-zero\, grouped by element.","argwhere(a)","https://docs.dask.org/en/latest/array-api.html#dask.array.argwhere"
"around","Evenly round to the given number of decimals.","around(x[\, decimals])","https://docs.dask.org/en/latest/array-api.html#dask.array.around"
"array","This docstring was copied from numpy.array.","array(object[\, dtype\, copy\, order\, subok\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.array"
"as_gufunc","Decorator for dask.array.gufunc.","as_gufunc([signature])","https://docs.dask.org/en/latest/array-api.html#dask.array.gufunc.as_gufunc"
"asanyarray","Convert the input to a dask array.","asanyarray(a)","https://docs.dask.org/en/latest/array-api.html#dask.array.asanyarray"
"asarray","Convert the input to a dask array.","asarray(a\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.asarray"
"atleast_1d","Convert inputs to arrays with at least one dimension.","atleast_1d(*arys)","https://docs.dask.org/en/latest/array-api.html#dask.array.atleast_1d"
"atleast_2d","View inputs as arrays with at least two dimensions.","atleast_2d(*arys)","https://docs.dask.org/en/latest/array-api.html#dask.array.atleast_2d"
"atleast_3d","View inputs as arrays with at least three dimensions.","atleast_3d(*arys)","https://docs.dask.org/en/latest/array-api.html#dask.array.atleast_3d"
"average","Compute the weighted average along the specified axis.","average(a[\, axis\, weights\, returned])","https://docs.dask.org/en/latest/array-api.html#dask.array.average"
"bincount","This docstring was copied from numpy.bincount.","bincount(x[\, weights\, minlength])","https://docs.dask.org/en/latest/array-api.html#dask.array.bincount"
"bitwise_and","This docstring was copied from numpy.bitwise_and.","bitwise_and(x1\, x2\, /[\, out\, where\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.bitwise_and"
"bitwise_not","This docstring was copied from numpy.invert.","bitwise_not(x\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.bitwise_not"
"bitwise_or","This docstring was copied from numpy.bitwise_or.","bitwise_or(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.bitwise_or"
"bitwise_xor","This docstring was copied from numpy.bitwise_xor.","bitwise_xor(x1\, x2\, /[\, out\, where\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.bitwise_xor"
"block","Assemble an nd-array from nested lists of blocks.","block(arrays[\, allow_unknown_chunksizes])","https://docs.dask.org/en/latest/array-api.html#dask.array.block"
"blockwise","Tensor operation: Generalized inner and outer products","blockwise(func\, out_ind\, *args[\, name\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.blockwise"
"blockwise","Tensor operation: Generalized inner and outer products","blockwise(func\, out_ind\, *args[\, name\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.core.blockwise"
"broadcast_arrays","Broadcast any number of arrays against each other.","broadcast_arrays(*args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.broadcast_arrays"
"broadcast_to","Broadcast an array to a new shape.","broadcast_to(x\, shape[\, chunks\, meta])","https://docs.dask.org/en/latest/array-api.html#dask.array.broadcast_to"
"cbrt","This docstring was copied from numpy.cbrt.","cbrt(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.cbrt"
"ceil","This docstring was copied from numpy.ceil.","ceil(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.ceil"
"choose","Construct an array from an index array and a set of arrays to choose from.","choose(a\, choices)","https://docs.dask.org/en/latest/array-api.html#dask.array.choose"
"clip","Clip (limit) the values in an array.","clip(*args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.clip"
"coarsen","Coarsen array by applying reduction to fixed size neighborhoods","coarsen(reduction\, x\, axes[\, trim_excess])","https://docs.dask.org/en/latest/array-api.html#dask.array.coarsen"
"compress","Return selected slices of an array along given axis.","compress(condition\, a[\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.compress"
"concatenate","Concatenate arrays along an existing axis","concatenate(seq[\, axis\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.concatenate"
"conj","This docstring was copied from numpy.conjugate.","conj(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.conj"
"copysign","This docstring was copied from numpy.copysign.","copysign(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.copysign"
"corrcoef","Return Pearson product-moment correlation coefficients.","corrcoef(x[\, y\, rowvar])","https://docs.dask.org/en/latest/array-api.html#dask.array.corrcoef"
"cos","This docstring was copied from numpy.cos.","cos(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.cos"
"cosh","This docstring was copied from numpy.cosh.","cosh(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.cosh"
"count_nonzero","Counts the number of non-zero values in the array a.","count_nonzero(a[\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.count_nonzero"
"cov","Estimate a covariance matrix\, given data and weights.","cov(m[\, y\, rowvar\, bias\, ddof])","https://docs.dask.org/en/latest/array-api.html#dask.array.cov"
"cumprod","Return the cumulative product of elements along a given axis.","cumprod(x[\, axis\, dtype\, out\, method])","https://docs.dask.org/en/latest/array-api.html#dask.array.cumprod"
"cumsum","Return the cumulative sum of the elements along a given axis.","cumsum(x[\, axis\, dtype\, out\, method])","https://docs.dask.org/en/latest/array-api.html#dask.array.cumsum"
"deg2rad","This docstring was copied from numpy.deg2rad.","deg2rad(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.deg2rad"
"degrees","This docstring was copied from numpy.degrees.","degrees(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.degrees"
"diag","Extract a diagonal or construct a diagonal array.","diag(v)","https://docs.dask.org/en/latest/array-api.html#dask.array.diag"
"diagonal","Return specified diagonals.","diagonal(a[\, offset\, axis1\, axis2])","https://docs.dask.org/en/latest/array-api.html#dask.array.diagonal"
"diff","Calculate the n-th discrete difference along the given axis.","diff(a[\, n\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.diff"
"digitize","Return the indices of the bins to which each value in input array belongs.","digitize(a\, bins[\, right])","https://docs.dask.org/en/latest/array-api.html#dask.array.digitize"
"dot","This docstring was copied from numpy.dot.","dot(a\, b[\, out])","https://docs.dask.org/en/latest/array-api.html#dask.array.dot"
"dstack","Stack arrays in sequence depth wise (along third axis).","dstack(tup[\, allow_unknown_chunksizes])","https://docs.dask.org/en/latest/array-api.html#dask.array.dstack"
"ediff1d","The differences between consecutive elements of an array.","ediff1d(ary[\, to_end\, to_begin])","https://docs.dask.org/en/latest/array-api.html#dask.array.ediff1d"
"einsum","This docstring was copied from numpy.einsum.","einsum(subscripts\, *operands[\, out\, dtype\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.einsum"
"empty","Blocked variant of empty","empty(*args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.empty"
"empty_like","Return a new array with the same shape and type as a given array.","empty_like(a[\, dtype\, order\, chunks\, name\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.empty_like"
"equal","This docstring was copied from numpy.equal.","equal(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.equal"
"exp","This docstring was copied from numpy.exp.","exp(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.exp"
"exp2","This docstring was copied from numpy.exp2.","exp2(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.exp2"
"expm1","This docstring was copied from numpy.expm1.","expm1(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.expm1"
"eye","Return a 2-D Array with ones on the diagonal and zeros elsewhere.","eye(N[\, chunks\, M\, k\, dtype])","https://docs.dask.org/en/latest/array-api.html#dask.array.eye"
"fabs","This docstring was copied from numpy.fabs.","fabs(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.fabs"
"fft.fft","Wrapping of numpy.fft.fft","fft.fft(a[\, n\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.fft"
"fft.fft2","Wrapping of numpy.fft.fft2","fft.fft2(a[\, s\, axes])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.fft2"
"fft.fft_wrap","Wrap 1D\, 2D\, and ND real and complex FFT functions","fft.fft_wrap(fft_func[\, kind\, dtype])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.fft_wrap"
"fft.fftfreq","Return the Discrete Fourier Transform sample frequencies.","fft.fftfreq(n[\, d\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.fftfreq"
"fft.fftn","Wrapping of numpy.fft.fftn","fft.fftn(a[\, s\, axes])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.fftn"
"fft.fftshift","Shift the zero-frequency component to the center of the spectrum.","fft.fftshift(x[\, axes])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.fftshift"
"fft.hfft","Wrapping of numpy.fft.hfft","fft.hfft(a[\, n\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.hfft"
"fft.ifft","Wrapping of numpy.fft.ifft","fft.ifft(a[\, n\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.ifft"
"fft.ifft2","Wrapping of numpy.fft.ifft2","fft.ifft2(a[\, s\, axes])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.ifft2"
"fft.ifftn","Wrapping of numpy.fft.ifftn","fft.ifftn(a[\, s\, axes])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.ifftn"
"fft.ifftshift","The inverse of fftshift.","fft.ifftshift(x[\, axes])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.ifftshift"
"fft.ihfft","Wrapping of numpy.fft.ihfft","fft.ihfft(a[\, n\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.ihfft"
"fft.irfft","Wrapping of numpy.fft.irfft","fft.irfft(a[\, n\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.irfft"
"fft.irfft2","Wrapping of numpy.fft.irfft2","fft.irfft2(a[\, s\, axes])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.irfft2"
"fft.irfftn","Wrapping of numpy.fft.irfftn","fft.irfftn(a[\, s\, axes])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.irfftn"
"fft.rfft","Wrapping of numpy.fft.rfft","fft.rfft(a[\, n\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.rfft"
"fft.rfft2","Wrapping of numpy.fft.rfft2","fft.rfft2(a[\, s\, axes])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.rfft2"
"fft.rfftfreq","Return the Discrete Fourier Transform sample frequencies (for usage with rfft\, irfft).","fft.rfftfreq(n[\, d\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.rfftfreq"
"fft.rfftn","Wrapping of numpy.fft.rfftn","fft.rfftn(a[\, s\, axes])","https://docs.dask.org/en/latest/array-api.html#dask.array.fft.rfftn"
"fix","Round to nearest integer towards zero.","fix(*args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.fix"
"flatnonzero","Return indices that are non-zero in the flattened version of a.","flatnonzero(a)","https://docs.dask.org/en/latest/array-api.html#dask.array.flatnonzero"
"flip","Reverse element order along axis.","flip(m\, axis)","https://docs.dask.org/en/latest/array-api.html#dask.array.flip"
"fliplr","Flip array in the left/right direction.","fliplr(m)","https://docs.dask.org/en/latest/array-api.html#dask.array.fliplr"
"flipud","Flip array in the up/down direction.","flipud(m)","https://docs.dask.org/en/latest/array-api.html#dask.array.flipud"
"float_power","This docstring was copied from numpy.float_power.","float_power(x1\, x2\, /[\, out\, where\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.float_power"
"floor","This docstring was copied from numpy.floor.","floor(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.floor"
"floor_divide","This docstring was copied from numpy.floor_divide.","floor_divide(x1\, x2\, /[\, out\, where\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.floor_divide"
"fmax","This docstring was copied from numpy.fmax.","fmax(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.fmax"
"fmin","This docstring was copied from numpy.fmin.","fmin(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.fmin"
"fmod","This docstring was copied from numpy.fmod.","fmod(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.fmod"
"frexp","This docstring was copied from numpy.frexp.","frexp(x[\, out1\, out2]\, / [[\, out\, where\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.frexp"
"from_array","Create dask array from something that looks like an array.","from_array(x[\, chunks\, name\, lock\, asarray\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.from_array"
"from_delayed","Create a dask array from a dask delayed value","from_delayed(value\, shape[\, dtype\, meta\, name])","https://docs.dask.org/en/latest/array-api.html#dask.array.from_delayed"
"from_npy_stack","Load dask array from stack of npy files","from_npy_stack(dirname[\, mmap_mode])","https://docs.dask.org/en/latest/array-api.html#dask.array.from_npy_stack"
"from_tiledb","Load array from the TileDB storage format","from_tiledb(uri[\, attribute\, chunks\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.from_tiledb"
"from_zarr","Load array from the zarr storage format","from_zarr(url[\, component\, storage_options\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.from_zarr"
"fromfunction","Construct an array by executing a function over each coordinate.","fromfunction(func[\, chunks\, shape\, dtype])","https://docs.dask.org/en/latest/array-api.html#dask.array.fromfunction"
"frompyfunc","This docstring was copied from numpy.frompyfunc.","frompyfunc(func\, nin\, nout\, *[\, identity])","https://docs.dask.org/en/latest/array-api.html#dask.array.frompyfunc"
"full","Blocked variant of full","full(shape\, fill_value\, *args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.full"
"full_like","Return a full array with the same shape and type as a given array.","full_like(a\, fill_value[\, order\, dtype\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.full_like"
"gradient","Return the gradient of an N-dimensional array.","gradient(f\, *varargs\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.gradient"
"greater","This docstring was copied from numpy.greater.","greater(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.greater"
"greater_equal","This docstring was copied from numpy.greater_equal.","greater_equal(x1\, x2\, /[\, out\, where\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.greater_equal"
"gufunc","Binds pyfunc into dask.array.apply_gufunc when called.","gufunc(pyfunc\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.gufunc.gufunc"
"histogram","Blocked variant of numpy.histogram().","histogram(a[\, bins\, range\, normed\, weights\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.histogram"
"histogramdd","Blocked variant of numpy.histogramdd().","histogramdd(sample\, bins[\, range\, normed\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.histogramdd"
"hstack","Stack arrays in sequence horizontally (column wise).","hstack(tup[\, allow_unknown_chunksizes])","https://docs.dask.org/en/latest/array-api.html#dask.array.hstack"
"hypot","This docstring was copied from numpy.hypot.","hypot(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.hypot"
"imag","Return the imaginary part of the complex argument.","imag(*args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.imag"
"image.imread","Read a stack of images into a dask array","image.imread(filename[\, imread\, preprocess])","https://docs.dask.org/en/latest/array-api.html#dask.array.image.imread"
"indices","Implements NumPy’s indices for Dask Arrays.","indices(dimensions[\, dtype\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.indices"
"insert","Insert values along the given axis before the given indices.","insert(arr\, obj\, values\, axis)","https://docs.dask.org/en/latest/array-api.html#dask.array.insert"
"invert","This docstring was copied from numpy.invert.","invert(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.invert"
"isclose","Returns a boolean array where two arrays are element-wise equal within a tolerance.","isclose(arr1\, arr2[\, rtol\, atol\, equal_nan])","https://docs.dask.org/en/latest/array-api.html#dask.array.isclose"
"iscomplex","Returns a bool array\, where True if input element is complex.","iscomplex(*args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.iscomplex"
"isfinite","This docstring was copied from numpy.isfinite.","isfinite(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.isfinite"
"isin","Calculates element in test_elements\, broadcasting over element only.","isin(element\, test_elements[\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.isin"
"isinf","This docstring was copied from numpy.isinf.","isinf(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.isinf"
"isnan","This docstring was copied from numpy.isnan.","isnan(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.isnan"
"isneginf","This docstring was copied from numpy.equal.","isneginf","https://docs.dask.org/en/latest/array-api.html#dask.array.isneginf"
"isnull","pandas.isnull for dask arrays","isnull(values)","https://docs.dask.org/en/latest/array-api.html#dask.array.isnull"
"isposinf","This docstring was copied from numpy.equal.","isposinf","https://docs.dask.org/en/latest/array-api.html#dask.array.isposinf"
"isreal","Returns a bool array\, where True if input element is real.","isreal(*args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.isreal"
"ldexp","This docstring was copied from numpy.ldexp.","ldexp(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.ldexp"
"less","This docstring was copied from numpy.less.","less(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.less"
"linalg.cholesky","Returns the Cholesky decomposition\, A=LL∗𝐴=𝐿𝐿∗ or A=U∗U𝐴=𝑈∗𝑈 of a Hermitian positive-definite matrix A.","linalg.cholesky(a[\, lower])","https://docs.dask.org/en/latest/array-api.html#dask.array.linalg.cholesky"
"linalg.inv","Compute the inverse of a matrix with LU decomposition and forward / backward substitutions.","linalg.inv(a)","https://docs.dask.org/en/latest/array-api.html#dask.array.linalg.inv"
"linalg.lstsq","Return the least-squares solution to a linear matrix equation using QR decomposition.","linalg.lstsq(a\, b)","https://docs.dask.org/en/latest/array-api.html#dask.array.linalg.lstsq"
"linalg.lu","Compute the lu decomposition of a matrix.","linalg.lu(a)","https://docs.dask.org/en/latest/array-api.html#dask.array.linalg.lu"
"linalg.norm","Matrix or vector norm.","linalg.norm(x[\, ord\, axis\, keepdims])","https://docs.dask.org/en/latest/array-api.html#dask.array.linalg.norm"
"linalg.qr","Compute the qr factorization of a matrix.","linalg.qr(a)","https://docs.dask.org/en/latest/array-api.html#dask.array.linalg.qr"
"linalg.sfqr","Direct Short-and-Fat QR","linalg.sfqr(data[\, name])","https://docs.dask.org/en/latest/array-api.html#dask.array.linalg.sfqr"
"linalg.solve","Solve the equation a x = b for x.","linalg.solve(a\, b[\, sym_pos])","https://docs.dask.org/en/latest/array-api.html#dask.array.linalg.solve"
"linalg.solve_triangular","Solve the equation a x = b for x\, assuming a is a triangular matrix.","linalg.solve_triangular(a\, b[\, lower])","https://docs.dask.org/en/latest/array-api.html#dask.array.linalg.solve_triangular"
"linalg.svd","Compute the singular value decomposition of a matrix.","linalg.svd(a[\, coerce_signs])","https://docs.dask.org/en/latest/array-api.html#dask.array.linalg.svd"
"linalg.svd_compressed","Randomly compressed rank-k thin Singular Value Decomposition.","linalg.svd_compressed(a\, k[\, iterator\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.linalg.svd_compressed"
"linalg.tsqr","Direct Tall-and-Skinny QR algorithm","linalg.tsqr(data[\, compute_svd\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.linalg.tsqr"
"linspace","Return num evenly spaced values over the closed interval [start\, stop].","linspace(start\, stop[\, num\, endpoint\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.linspace"
"log","This docstring was copied from numpy.log.","log(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.log"
"log10","This docstring was copied from numpy.log10.","log10(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.log10"
"log1p","This docstring was copied from numpy.log1p.","log1p(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.log1p"
"log2","This docstring was copied from numpy.log2.","log2(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.log2"
"logaddexp","This docstring was copied from numpy.logaddexp.","logaddexp(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.logaddexp"
"logaddexp2","This docstring was copied from numpy.logaddexp2.","logaddexp2(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.logaddexp2"
"logical_and","This docstring was copied from numpy.logical_and.","logical_and(x1\, x2\, /[\, out\, where\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.logical_and"
"logical_not","This docstring was copied from numpy.logical_not.","logical_not(x\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.logical_not"
"logical_or","This docstring was copied from numpy.logical_or.","logical_or(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.logical_or"
"logical_xor","This docstring was copied from numpy.logical_xor.","logical_xor(x1\, x2\, /[\, out\, where\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.logical_xor"
"ma.average","Return the weighted average of array over the given axis.","ma.average(a[\, axis\, weights\, returned])","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.average"
"ma.filled","Return input as an array with masked data replaced by a fill value.","ma.filled(a[\, fill_value])","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.filled"
"ma.fix_invalid","Return input with invalid data masked and replaced by a fill value.","ma.fix_invalid(a[\, fill_value])","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.fix_invalid"
"ma.getdata","Return the data of a masked array as an ndarray.","ma.getdata(a)","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.getdata"
"ma.getmaskarray","Return the mask of a masked array\, or full boolean array of False.","ma.getmaskarray(a)","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.getmaskarray"
"ma.masked_array","An array class with possibly masked values.","ma.masked_array(data[\, mask\, fill_value])","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.masked_array"
"ma.masked_equal","Mask an array where equal to a given value.","ma.masked_equal(a\, value)","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.masked_equal"
"ma.masked_greater","Mask an array where greater than a given value.","ma.masked_greater(x\, value[\, copy])","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.masked_greater"
"ma.masked_greater_equal","Mask an array where greater than or equal to a given value.","ma.masked_greater_equal(x\, value[\, copy])","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.masked_greater_equal"
"ma.masked_inside","Mask an array inside a given interval.","ma.masked_inside(x\, v1\, v2)","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.masked_inside"
"ma.masked_invalid","Mask an array where invalid values occur (NaNs or infs).","ma.masked_invalid(a)","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.masked_invalid"
"ma.masked_less","Mask an array where less than a given value.","ma.masked_less(x\, value[\, copy])","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.masked_less"
"ma.masked_less_equal","Mask an array where less than or equal to a given value.","ma.masked_less_equal(x\, value[\, copy])","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.masked_less_equal"
"ma.masked_not_equal","Mask an array where not equal to a given value.","ma.masked_not_equal(x\, value[\, copy])","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.masked_not_equal"
"ma.masked_outside","Mask an array outside a given interval.","ma.masked_outside(x\, v1\, v2)","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.masked_outside"
"ma.masked_values","Mask using floating point equality.","ma.masked_values(x\, value[\, rtol\, atol\, shrink])","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.masked_values"
"ma.masked_where","Mask an array where a condition is met.","ma.masked_where(condition\, a)","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.masked_where"
"ma.set_fill_value","Set the filling value of a\, if a is a masked array.","ma.set_fill_value(a\, fill_value)","https://docs.dask.org/en/latest/array-api.html#dask.array.ma.set_fill_value"
"map_blocks","Map a function across all blocks of a dask array.","map_blocks(func\, *args[\, name\, token\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.map_blocks"
"map_overlap","Map a function over blocks of arrays with some overlap","map_overlap(func\, *args[\, depth\, boundary\, …])","https://docs.dask.org/en/latest/array-api.htmlarray-overlap.html#dask.array.map_overlap"
"matmul","This docstring was copied from numpy.matmul.","matmul(x1\, x2\, /[\, out\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.matmul"
"max","Return the maximum of an array or maximum along an axis.","max(a[\, axis\, keepdims\, split_every\, out])","https://docs.dask.org/en/latest/array-api.html#dask.array.max"
"maximum","This docstring was copied from numpy.maximum.","maximum(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.maximum"
"mean","Compute the arithmetic mean along the specified axis.","mean(a[\, axis\, dtype\, keepdims\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.mean"
"median","Compute the median along the specified axis.","median(a[\, axis\, keepdims\, out])","https://docs.dask.org/en/latest/array-api.html#dask.array.median"
"meshgrid","Return coordinate matrices from coordinate vectors.","meshgrid(*xi\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.meshgrid"
"min","Return the minimum of an array or minimum along an axis.","min(a[\, axis\, keepdims\, split_every\, out])","https://docs.dask.org/en/latest/array-api.html#dask.array.min"
"minimum","This docstring was copied from numpy.minimum.","minimum(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.minimum"
"mod","This docstring was copied from numpy.remainder.","mod(x1\, x2\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.mod"
"modf","This docstring was copied from numpy.modf.","modf(x[\, out1\, out2]\, / [[\, out\, where\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.modf"
"moment","","moment(a\, order[\, axis\, dtype\, keepdims\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.moment"
"moveaxis","Move axes of an array to new positions.","moveaxis(a\, source\, destination)","https://docs.dask.org/en/latest/array-api.html#dask.array.moveaxis"
"multiply","This docstring was copied from numpy.multiply.","multiply(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.multiply"
"nan_to_num","Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the nan\,  posinf and/or neginf keywords.","nan_to_num(*args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.nan_to_num"
"nanargmax","Return the maximum of an array or maximum along an axis\, ignoring any NaNs.","nanargmax(x[\, axis\, split_every\, out])","https://docs.dask.org/en/latest/array-api.html#dask.array.nanargmax"
"nanargmin","Return minimum of an array or minimum along an axis\, ignoring any NaNs.","nanargmin(x[\, axis\, split_every\, out])","https://docs.dask.org/en/latest/array-api.html#dask.array.nanargmin"
"nancumprod","Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one.","nancumprod(x\, axis[\, dtype\, out\, method])","https://docs.dask.org/en/latest/array-api.html#dask.array.nancumprod"
"nancumsum","Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero.","nancumsum(x\, axis[\, dtype\, out\, method])","https://docs.dask.org/en/latest/array-api.html#dask.array.nancumsum"
"nanmax","Return the maximum of an array or maximum along an axis\, ignoring any NaNs.","nanmax(a[\, axis\, keepdims\, split_every\, out])","https://docs.dask.org/en/latest/array-api.html#dask.array.nanmax"
"nanmean","Compute the arithmetic mean along the specified axis\, ignoring NaNs.","nanmean(a[\, axis\, dtype\, keepdims\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.nanmean"
"nanmedian","Compute the median along the specified axis\, while ignoring NaNs.","nanmedian(a[\, axis\, keepdims\, out])","https://docs.dask.org/en/latest/array-api.html#dask.array.nanmedian"
"nanmin","Return minimum of an array or minimum along an axis\, ignoring any NaNs.","nanmin(a[\, axis\, keepdims\, split_every\, out])","https://docs.dask.org/en/latest/array-api.html#dask.array.nanmin"
"nanprod","Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones.","nanprod(a[\, axis\, dtype\, keepdims\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.nanprod"
"nanstd","Compute the standard deviation along the specified axis\, while ignoring NaNs.","nanstd(a[\, axis\, dtype\, keepdims\, ddof\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.nanstd"
"nansum","Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero.","nansum(a[\, axis\, dtype\, keepdims\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.nansum"
"nanvar","Compute the variance along the specified axis\, while ignoring NaNs.","nanvar(a[\, axis\, dtype\, keepdims\, ddof\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.nanvar"
"negative","This docstring was copied from numpy.negative.","negative(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.negative"
"nextafter","This docstring was copied from numpy.nextafter.","nextafter(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.nextafter"
"nonzero","Return the indices of the elements that are non-zero.","nonzero(a)","https://docs.dask.org/en/latest/array-api.html#dask.array.nonzero"
"normalize_chunks","Normalize chunks to tuple of tuples","normalize_chunks(chunks[\, shape\, limit\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.core.normalize_chunks"
"not_equal","This docstring was copied from numpy.not_equal.","not_equal(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.not_equal"
"notnull","pandas.notnull for dask arrays","notnull(values)","https://docs.dask.org/en/latest/array-api.html#dask.array.notnull"
"ones","Blocked variant of ones","ones(*args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.ones"
"ones_like","Return an array of ones with the same shape and type as a given array.","ones_like(a[\, dtype\, order\, chunks\, name\, shape])","https://docs.dask.org/en/latest/array-api.html#dask.array.ones_like"
"outer","Compute the outer product of two vectors.","outer(a\, b)","https://docs.dask.org/en/latest/array-api.html#dask.array.outer"
"overlap.map_overlap","Map a function over blocks of arrays with some overlap","overlap.map_overlap(func\, *args[\, depth\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.overlap.map_overlap"
"overlap.overlap","Share boundaries between neighboring blocks","overlap.overlap(x\, depth\, boundary)","https://docs.dask.org/en/latest/array-api.html#dask.array.overlap.overlap"
"overlap.trim_internal","Trim sides from each block","overlap.trim_internal(x\, axes[\, boundary])","https://docs.dask.org/en/latest/array-api.html#dask.array.overlap.trim_internal"
"overlap.trim_overlap","Trim sides from each block.","overlap.trim_overlap(x\, depth[\, boundary])","https://docs.dask.org/en/latest/array-api.html#dask.array.overlap.trim_overlap"
"pad","Pad an array.","pad(array\, pad_width[\, mode])","https://docs.dask.org/en/latest/array-api.html#dask.array.pad"
"percentile","Approximate percentile of 1-D array","percentile(a\, q[\, interpolation\, method])","https://docs.dask.org/en/latest/array-api.html#dask.array.percentile"
"piecewise","Evaluate a piecewise-defined function.","piecewise(x\, condlist\, funclist\, *args\, **kw)","https://docs.dask.org/en/latest/array-api.html#dask.array.piecewise"
"power","This docstring was copied from numpy.power.","power(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.power"
"prod","Return the product of array elements over a given axis.","prod(a[\, axis\, dtype\, keepdims\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.prod"
"ptp","Range of values (maximum - minimum) along an axis.","ptp(a[\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.ptp"
"rad2deg","This docstring was copied from numpy.rad2deg.","rad2deg(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.rad2deg"
"radians","This docstring was copied from numpy.radians.","radians(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.radians"
"random.beta","Draw samples from a Beta distribution.","random.beta(a\, b[\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.beta"
"random.binomial","Draw samples from a binomial distribution.","random.binomial(n\, p[\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.binomial"
"random.chisquare","Draw samples from a chi-square distribution.","random.chisquare(df[\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.chisquare"
"random.choice","Generates a random sample from a given 1-D array","random.choice(a[\, size\, replace\, p\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.choice"
"random.exponential","Draw samples from an exponential distribution.","random.exponential([scale\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.exponential"
"random.f","Draw samples from an F distribution.","random.f(dfnum\, dfden[\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.f"
"random.gamma","Draw samples from a Gamma distribution.","random.gamma(shape[\, scale\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.gamma"
"random.geometric","Draw samples from the geometric distribution.","random.geometric(p[\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.geometric"
"random.gumbel","Draw samples from a Gumbel distribution.","random.gumbel([loc\, scale\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.gumbel"
"random.hypergeometric","Draw samples from a Hypergeometric distribution.","random.hypergeometric(ngood\, nbad\, nsample)","https://docs.dask.org/en/latest/array-api.html#dask.array.random.hypergeometric"
"random.laplace","Draw samples from the Laplace or double exponential distribution with specified location (or mean) and scale (decay).","random.laplace([loc\, scale\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.laplace"
"random.logistic","Draw samples from a logistic distribution.","random.logistic([loc\, scale\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.logistic"
"random.lognormal","Draw samples from a log-normal distribution.","random.lognormal([mean\, sigma\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.lognormal"
"random.logseries","Draw samples from a logarithmic series distribution.","random.logseries(p[\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.logseries"
"random.negative_binomial","Draw samples from a negative binomial distribution.","random.negative_binomial(n\, p[\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.negative_binomial"
"random.noncentral_chisquare","Draw samples from a noncentral chi-square distribution.","random.noncentral_chisquare(df\, nonc[\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.noncentral_chisquare"
"random.noncentral_f","Draw samples from the noncentral F distribution.","random.noncentral_f(dfnum\, dfden\, nonc[\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.noncentral_f"
"random.normal","Draw random samples from a normal (Gaussian) distribution.","random.normal([loc\, scale\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.normal"
"random.pareto","Draw samples from a Pareto II or Lomax distribution with specified shape.","random.pareto(a[\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.pareto"
"random.poisson","Draw samples from a Poisson distribution.","random.poisson([lam\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.poisson"
"random.power","Draws samples in [0\, 1] from a power distribution with positive exponent a - 1.","random.power(a[\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.power"
"random.randint","Return random integers from low (inclusive) to high (exclusive).","random.randint(low[\, high\, size\, chunks\, dtype])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.randint"
"random.random","Return random floats in the half-open interval [0.0\, 1.0).","random.random([size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.random"
"random.random_sample","Return random floats in the half-open interval [0.0\, 1.0).","random.random_sample([size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.random_sample"
"random.rayleigh","Draw samples from a Rayleigh distribution.","random.rayleigh([scale\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.rayleigh"
"random.standard_cauchy","Draw samples from a standard Cauchy distribution with mode = 0.","random.standard_cauchy([size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.standard_cauchy"
"random.standard_exponential","Draw samples from the standard exponential distribution.","random.standard_exponential([size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.standard_exponential"
"random.standard_gamma","Draw samples from a standard Gamma distribution.","random.standard_gamma(shape[\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.standard_gamma"
"random.standard_normal","Draw samples from a standard Normal distribution (mean=0\, stdev=1).","random.standard_normal([size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.standard_normal"
"random.standard_t","Draw samples from a standard Student’s t distribution with df degrees of freedom.","random.standard_t(df[\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.standard_t"
"random.triangular","Draw samples from the triangular distribution over the interval [left\, right].","random.triangular(left\, mode\, right[\, size\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.triangular"
"random.uniform","Draw samples from a uniform distribution.","random.uniform([low\, high\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.uniform"
"random.vonmises","Draw samples from a von Mises distribution.","random.vonmises(mu\, kappa[\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.vonmises"
"random.wald","Draw samples from a Wald\, or inverse Gaussian\, distribution.","random.wald(mean\, scale[\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.wald"
"random.weibull","Draw samples from a Weibull distribution.","random.weibull(a[\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.weibull"
"random.zipf","Standard distributions","random.zipf(a[\, size\, chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.random.zipf"
"ravel","Return a contiguous flattened array.","ravel(array_like)","https://docs.dask.org/en/latest/array-api.html#dask.array.ravel"
"real","Return the real part of the complex argument.","real(*args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.real"
"rechunk","Convert blocks in dask array x for new chunks.","rechunk(x[\, chunks\, threshold\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.rechunk"
"reciprocal","This docstring was copied from numpy.reciprocal.","reciprocal(x\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.reciprocal"
"reduction","General version of reductions","reduction(x\, chunk\, aggregate[\, axis\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.reduction"
"register_chunk_type","Register the given type as a valid chunk and downcast array type","register_chunk_type(type)","https://docs.dask.org/en/latest/array-api.html#dask.array.register_chunk_type"
"remainder","This docstring was copied from numpy.remainder.","remainder(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.remainder"
"repeat","Repeat elements of an array.","repeat(a\, repeats[\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.repeat"
"reshape","Reshape array to new shape","reshape(x\, shape[\, merge_chunks])","https://docs.dask.org/en/latest/array-api.html#dask.array.reshape"
"result_type","This docstring was copied from numpy.result_type.","result_type(*arrays_and_dtypes)","https://docs.dask.org/en/latest/array-api.html#dask.array.result_type"
"rint","This docstring was copied from numpy.rint.","rint(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.rint"
"roll","Roll array elements along a given axis.","roll(array\, shift[\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.roll"
"rollaxis","","rollaxis(a\, axis[\, start])","https://docs.dask.org/en/latest/array-api.html#dask.array.rollaxis"
"rot90","Rotate an array by 90 degrees in the plane specified by axes.","rot90(m[\, k\, axes])","https://docs.dask.org/en/latest/array-api.html#dask.array.rot90"
"round","Round an array to the given number of decimals.","round(a[\, decimals])","https://docs.dask.org/en/latest/array-api.html#dask.array.round"
"sign","This docstring was copied from numpy.sign.","sign(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.sign"
"signbit","This docstring was copied from numpy.signbit.","signbit(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.signbit"
"sin","This docstring was copied from numpy.sin.","sin(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.sin"
"sinc","Return the normalized sinc function.","sinc(*args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.sinc"
"sinh","This docstring was copied from numpy.sinh.","sinh(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.sinh"
"sqrt","This docstring was copied from numpy.sqrt.","sqrt(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.sqrt"
"square","This docstring was copied from numpy.square.","square(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.square"
"squeeze","Remove axes of length one from a.","squeeze(a[\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.squeeze"
"stack","Stack arrays along a new axis","stack(seq[\, axis\, allow_unknown_chunksizes])","https://docs.dask.org/en/latest/array-api.html#dask.array.stack"
"stats.chisquare","Calculate a one-way chi-square test.","stats.chisquare(f_obs[\, f_exp\, ddof\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.stats.chisquare"
"stats.f_oneway","Perform one-way ANOVA.","stats.f_oneway(*args)","https://docs.dask.org/en/latest/array-api.html#dask.array.stats.f_oneway"
"stats.kurtosis","Compute the kurtosis (Fisher or Pearson) of a dataset.","stats.kurtosis(a[\, axis\, fisher\, bias\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.stats.kurtosis"
"stats.kurtosistest","Test whether a dataset has normal kurtosis.","stats.kurtosistest(a[\, axis\, nan_policy])","https://docs.dask.org/en/latest/array-api.html#dask.array.stats.kurtosistest"
"stats.moment","Calculate the nth moment about the mean for a sample.","stats.moment(a[\, moment\, axis\, nan_policy])","https://docs.dask.org/en/latest/array-api.html#dask.array.stats.moment"
"stats.normaltest","Test whether a sample differs from a normal distribution.","stats.normaltest(a[\, axis\, nan_policy])","https://docs.dask.org/en/latest/array-api.html#dask.array.stats.normaltest"
"stats.power_divergence","Cressie-Read power divergence statistic and goodness of fit test.","stats.power_divergence(f_obs[\, f_exp\, ddof\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.stats.power_divergence"
"stats.skew","Compute the sample skewness of a data set.","stats.skew(a[\, axis\, bias\, nan_policy])","https://docs.dask.org/en/latest/array-api.html#dask.array.stats.skew"
"stats.skewtest","Test whether the skew is different from the normal distribution.","stats.skewtest(a[\, axis\, nan_policy])","https://docs.dask.org/en/latest/array-api.html#dask.array.stats.skewtest"
"stats.ttest_1samp","Calculate the T-test for the mean of ONE group of scores.","stats.ttest_1samp(a\, popmean[\, axis\, nan_policy])","https://docs.dask.org/en/latest/array-api.html#dask.array.stats.ttest_1samp"
"stats.ttest_ind","Calculate the T-test for the means of two independent samples of scores.","stats.ttest_ind(a\, b[\, axis\, equal_var])","https://docs.dask.org/en/latest/array-api.html#dask.array.stats.ttest_ind"
"stats.ttest_rel","Calculate the t-test on TWO RELATED samples of scores\, a and b.","stats.ttest_rel(a\, b[\, axis\, nan_policy])","https://docs.dask.org/en/latest/array-api.html#dask.array.stats.ttest_rel"
"std","Compute the standard deviation along the specified axis.","std(a[\, axis\, dtype\, keepdims\, ddof\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.std"
"store","Store dask arrays in array-like objects\, overwrite data in target","store(sources\, targets[\, lock\, regions\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.store"
"subtract","This docstring was copied from numpy.subtract.","subtract(x1\, x2\, /[\, out\, where\, casting\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.subtract"
"sum","Sum of array elements over a given axis.","sum(a[\, axis\, dtype\, keepdims\, split_every\, out])","https://docs.dask.org/en/latest/array-api.html#dask.array.sum"
"take","Take elements from an array along an axis.","take(a\, indices[\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.take"
"tan","This docstring was copied from numpy.tan.","tan(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.tan"
"tanh","This docstring was copied from numpy.tanh.","tanh(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.tanh"
"tensordot","Compute tensor dot product along specified axes.","tensordot(lhs\, rhs[\, axes])","https://docs.dask.org/en/latest/array-api.html#dask.array.tensordot"
"tile","Construct an array by repeating A the number of times given by reps.","tile(A\, reps)","https://docs.dask.org/en/latest/array-api.html#dask.array.tile"
"to_hdf5","Store arrays in HDF5 file","to_hdf5(filename\, *args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.to_hdf5"
"to_npy_stack","Write dask array to a stack of .npy files","to_npy_stack(dirname\, x[\, axis])","https://docs.dask.org/en/latest/array-api.html#dask.array.to_npy_stack"
"to_tiledb","Save array to the TileDB storage format","to_tiledb(darray\, uri[\, compute\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.to_tiledb"
"to_zarr","Save array to the zarr storage format","to_zarr(arr\, url[\, component\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.to_zarr"
"topk","Extract the k largest elements from a on the given axis\, and return them sorted from largest to smallest.","topk(a\, k[\, axis\, split_every])","https://docs.dask.org/en/latest/array-api.html#dask.array.topk"
"transpose","Reverse or permute the axes of an array; returns the modified array.","transpose(a[\, axes])","https://docs.dask.org/en/latest/array-api.html#dask.array.transpose"
"tril","Lower triangle of an array.","tril(m[\, k])","https://docs.dask.org/en/latest/array-api.html#dask.array.tril"
"triu","Upper triangle of an array.","triu(m[\, k])","https://docs.dask.org/en/latest/array-api.html#dask.array.triu"
"true_divide","This docstring was copied from numpy.true_divide.","true_divide(x1\, x2\, /[\, out\, where\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.true_divide"
"trunc","This docstring was copied from numpy.trunc.","trunc(x\, /[\, out\, where\, casting\, order\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.trunc"
"unique","Find the unique elements of an array.","unique(ar[\, return_index\, return_inverse\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.unique"
"unravel_index","This docstring was copied from numpy.unravel_index.","unravel_index(indices\, shape[\, order])","https://docs.dask.org/en/latest/array-api.html#dask.array.unravel_index"
"var","Compute the variance along the specified axis.","var(a[\, axis\, dtype\, keepdims\, ddof\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.var"
"vdot","This docstring was copied from numpy.vdot.","vdot(a\, b)","https://docs.dask.org/en/latest/array-api.html#dask.array.vdot"
"vstack","Stack arrays in sequence vertically (row wise).","vstack(tup[\, allow_unknown_chunksizes])","https://docs.dask.org/en/latest/array-api.html#dask.array.vstack"
"where","This docstring was copied from numpy.where.","where(condition\, [x\, y])","https://docs.dask.org/en/latest/array-api.html#dask.array.where"
"zeros","Blocked variant of zeros","zeros(*args\, **kwargs)","https://docs.dask.org/en/latest/array-api.html#dask.array.zeros"
"zeros_like","Return an array of zeros with the same shape and type as a given array.","zeros_like(a[\, dtype\, order\, chunks\, name\, …])","https://docs.dask.org/en/latest/array-api.html#dask.array.zeros_like"
