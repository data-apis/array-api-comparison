[{"name":"tensor.T","description":"Is this Tensor with its dimensions reversed.","signature":"tensor.T","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.T"},{"name":"tensor.abs","description":"See torch.abs()","signature":"tensor.abs() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.abs"},{"name":"tensor.abs_","description":"In-place version of abs()","signature":"tensor.abs_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.abs_"},{"name":"tensor.acos","description":"See torch.acos()","signature":"tensor.acos() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.acos"},{"name":"tensor.acos_","description":"In-place version of acos()","signature":"tensor.acos_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.acos_"},{"name":"tensor.add","description":"Add a scalar or tensor to self tensor. If both alpha\nand other are specified, each element of other is scaled by\nalpha before being used.","signature":"tensor.add(other, *, alpha=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.add"},{"name":"tensor.add_","description":"In-place version of add()","signature":"tensor.add_(other, *, alpha=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.add_"},{"name":"tensor.addbmm","description":"See torch.addbmm()","signature":"tensor.addbmm(batch1, batch2, *, beta=1, alpha=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.addbmm"},{"name":"tensor.addbmm_","description":"In-place version of addbmm()","signature":"tensor.addbmm_(batch1, batch2, *, beta=1, alpha=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.addbmm_"},{"name":"tensor.addcdiv","description":"See torch.addcdiv()","signature":"tensor.addcdiv(tensor1, tensor2, *, value=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.addcdiv"},{"name":"tensor.addcdiv_","description":"In-place version of addcdiv()","signature":"tensor.addcdiv_(tensor1, tensor2, *, value=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.addcdiv_"},{"name":"tensor.addcmul","description":"See torch.addcmul()","signature":"tensor.addcmul(tensor1, tensor2, *, value=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.addcmul"},{"name":"tensor.addcmul_","description":"In-place version of addcmul()","signature":"tensor.addcmul_(tensor1, tensor2, *, value=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.addcmul_"},{"name":"tensor.addmm","description":"See torch.addmm()","signature":"tensor.addmm(mat1, mat2, *, beta=1, alpha=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.addmm"},{"name":"tensor.addmm_","description":"In-place version of addmm()","signature":"tensor.addmm_(mat1, mat2, *, beta=1, alpha=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.addmm_"},{"name":"tensor.addmv","description":"See torch.addmv()","signature":"tensor.addmv(mat, vec, *, beta=1, alpha=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.addmv"},{"name":"tensor.addmv_","description":"In-place version of addmv()","signature":"tensor.addmv_(mat, vec, *, beta=1, alpha=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.addmv_"},{"name":"tensor.addr","description":"See torch.addr()","signature":"tensor.addr(vec1, vec2, *, beta=1, alpha=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.addr"},{"name":"tensor.addr_","description":"In-place version of addr()","signature":"tensor.addr_(vec1, vec2, *, beta=1, alpha=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.addr_"},{"name":"tensor.allclose","description":"See torch.allclose()","signature":"tensor.allclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.allclose"},{"name":"tensor.angle","description":"See torch.angle()","signature":"tensor.angle() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.angle"},{"name":"tensor.apply_","description":"Applies the function callable to each element in the tensor, replacing\neach element with the value returned by callable.","signature":"tensor.apply_(callable) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.apply_"},{"name":"tensor.argmax","description":"See torch.argmax()","signature":"tensor.argmax(dim=None, keepdim=False) → LongTensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.argmax"},{"name":"tensor.argmin","description":"See torch.argmin()","signature":"tensor.argmin(dim=None, keepdim=False) → LongTensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.argmin"},{"name":"tensor.argsort","description":"See torch.argsort()","signature":"tensor.argsort(dim=-1, descending=False) → LongTensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.argsort"},{"name":"tensor.as_strided","description":"See torch.as_strided()","signature":"tensor.as_strided(size, stride, storage_offset=0) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.as_strided"},{"name":"tensor.asin","description":"See torch.asin()","signature":"tensor.asin() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.asin"},{"name":"tensor.asin_","description":"In-place version of asin()","signature":"tensor.asin_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.asin_"},{"name":"tensor.atan","description":"See torch.atan()","signature":"tensor.atan() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.atan"},{"name":"tensor.atan2","description":"See torch.atan2()","signature":"tensor.atan2(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.atan2"},{"name":"tensor.atan2_","description":"In-place version of atan2()","signature":"tensor.atan2_(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.atan2_"},{"name":"tensor.atan_","description":"In-place version of atan()","signature":"tensor.atan_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.atan_"},{"name":"tensor.baddbmm","description":"See torch.baddbmm()","signature":"tensor.baddbmm(batch1, batch2, *, beta=1, alpha=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.baddbmm"},{"name":"tensor.baddbmm_","description":"In-place version of baddbmm()","signature":"tensor.baddbmm_(batch1, batch2, *, beta=1, alpha=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.baddbmm_"},{"name":"tensor.bernoulli","description":"Returns a result tensor where each result[i]\\texttt{result[i]}result[i]\n\n is independently\nsampled from Bernoulli(self[i])\\text{Bernoulli}(\\texttt{self[i]})Bernoulli(self[i])\n\n. self must have\nfloating point dtype, and the result will have the same dtype.","signature":"tensor.bernoulli(*, generator=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.bernoulli"},{"name":"tensor.bernoulli_","description":"\n\nbernoulli_(p=0.5, *, generator=None) → Tensor\nFills each location of self with an independent sample from\nBernoulli(p)\\text{Bernoulli}(\\texttt{p})Bernoulli(p)\n\n. self can have integral\ndtype.\n","signature":"tensor.bernoulli_()","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.bernoulli_"},{"name":"tensor.bfloat16","description":"self.bfloat16() is equivalent to self.to(torch.bfloat16). See to().","signature":"tensor.bfloat16(memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.bfloat16"},{"name":"tensor.bincount","description":"See torch.bincount()","signature":"tensor.bincount(weights=None, minlength=0) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.bincount"},{"name":"tensor.bitwise_and","description":"See torch.bitwise_and()","signature":"tensor.bitwise_and() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.bitwise_and"},{"name":"tensor.bitwise_and_","description":"In-place version of bitwise_and()","signature":"tensor.bitwise_and_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.bitwise_and_"},{"name":"tensor.bitwise_not","description":"See torch.bitwise_not()","signature":"tensor.bitwise_not() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.bitwise_not"},{"name":"tensor.bitwise_not_","description":"In-place version of bitwise_not()","signature":"tensor.bitwise_not_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.bitwise_not_"},{"name":"tensor.bitwise_or","description":"See torch.bitwise_or()","signature":"tensor.bitwise_or() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.bitwise_or"},{"name":"tensor.bitwise_or_","description":"In-place version of bitwise_or()","signature":"tensor.bitwise_or_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.bitwise_or_"},{"name":"tensor.bitwise_xor","description":"See torch.bitwise_xor()","signature":"tensor.bitwise_xor() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.bitwise_xor"},{"name":"tensor.bitwise_xor_","description":"In-place version of bitwise_xor()","signature":"tensor.bitwise_xor_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.bitwise_xor_"},{"name":"tensor.bmm","description":"See torch.bmm()","signature":"tensor.bmm(batch2) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.bmm"},{"name":"tensor.bool","description":"self.bool() is equivalent to self.to(torch.bool). See to().","signature":"tensor.bool(memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.bool"},{"name":"tensor.byte","description":"self.byte() is equivalent to self.to(torch.uint8). See to().","signature":"tensor.byte(memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.byte"},{"name":"tensor.cauchy_","description":"Fills the tensor with numbers drawn from the Cauchy distribution:","signature":"tensor.cauchy_(median=0, sigma=1, *, generator=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cauchy_"},{"name":"tensor.ceil","description":"See torch.ceil()","signature":"tensor.ceil() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.ceil"},{"name":"tensor.ceil_","description":"In-place version of ceil()","signature":"tensor.ceil_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.ceil_"},{"name":"tensor.char","description":"self.char() is equivalent to self.to(torch.int8). See to().","signature":"tensor.char(memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.char"},{"name":"tensor.cholesky","description":"See torch.cholesky()","signature":"tensor.cholesky(upper=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cholesky"},{"name":"tensor.cholesky_inverse","description":"See torch.cholesky_inverse()","signature":"tensor.cholesky_inverse(upper=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cholesky_inverse"},{"name":"tensor.cholesky_solve","description":"See torch.cholesky_solve()","signature":"tensor.cholesky_solve(input2, upper=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cholesky_solve"},{"name":"tensor.chunk","description":"See torch.chunk()","signature":"tensor.chunk(chunks, dim=0) → List of Tensors","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.chunk"},{"name":"tensor.clamp","description":"See torch.clamp()","signature":"tensor.clamp(min, max) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.clamp"},{"name":"tensor.clamp_","description":"In-place version of clamp()","signature":"tensor.clamp_(min, max) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.clamp_"},{"name":"tensor.clone","description":"Returns a copy of the self tensor. The copy has the same size and data\ntype as self.","signature":"tensor.clone(memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.clone"},{"name":"tensor.conj","description":"See torch.conj()","signature":"tensor.conj() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.conj"},{"name":"tensor.contiguous","description":"Returns a contiguous in memory tensor containing the same data as self tensor. If\nself tensor is already in the specified memory format, this function returns the\nself tensor.","signature":"tensor.contiguous(memory_format=torch.contiguous_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.contiguous"},{"name":"tensor.copy_","description":"Copies the elements from src into self tensor and returns\nself.","signature":"tensor.copy_(src, non_blocking=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.copy_"},{"name":"tensor.cos","description":"See torch.cos()","signature":"tensor.cos() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cos"},{"name":"tensor.cos_","description":"In-place version of cos()","signature":"tensor.cos_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cos_"},{"name":"tensor.cosh","description":"See torch.cosh()","signature":"tensor.cosh() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cosh"},{"name":"tensor.cosh_","description":"In-place version of cosh()","signature":"tensor.cosh_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cosh_"},{"name":"tensor.cpu","description":"Returns a copy of this object in CPU memory.","signature":"tensor.cpu(memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cpu"},{"name":"tensor.cross","description":"See torch.cross()","signature":"tensor.cross(other, dim=-1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cross"},{"name":"tensor.cuda","description":"Returns a copy of this object in CUDA memory.","signature":"tensor.cuda(device=None, non_blocking=False, memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cuda"},{"name":"tensor.cummax","description":"See torch.cummax()","signature":"tensor.cummax(dim) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cummax"},{"name":"tensor.cummin","description":"See torch.cummin()","signature":"tensor.cummin(dim) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cummin"},{"name":"tensor.cumprod","description":"See torch.cumprod()","signature":"tensor.cumprod(dim, dtype=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cumprod"},{"name":"tensor.cumsum","description":"See torch.cumsum()","signature":"tensor.cumsum(dim, dtype=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cumsum"},{"name":"tensor.data_ptr","description":"Returns the address of the first element of self tensor.","signature":"tensor.data_ptr() → int","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.data_ptr"},{"name":"tensor.dense_dim","description":"If self is a sparse COO tensor (i.e., with torch.sparse_coo layout),\nthis returns the number of dense dimensions. Otherwise, this throws an error.","signature":"tensor.dense_dim() → int","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.dense_dim"},{"name":"tensor.dequantize","description":"Given a quantized Tensor, dequantize it and return the dequantized float Tensor.","signature":"tensor.dequantize() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.dequantize"},{"name":"tensor.det","description":"See torch.det()","signature":"tensor.det() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.det"},{"name":"tensor.device","description":"Is the torch.device where this Tensor is.","signature":"tensor.device","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.device"},{"name":"tensor.diag","description":"See torch.diag()","signature":"tensor.diag(diagonal=0) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.diag"},{"name":"tensor.diag_embed","description":"See torch.diag_embed()","signature":"tensor.diag_embed(offset=0, dim1=-2, dim2=-1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.diag_embed"},{"name":"tensor.diagflat","description":"See torch.diagflat()","signature":"tensor.diagflat(offset=0) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.diagflat"},{"name":"tensor.diagonal","description":"See torch.diagonal()","signature":"tensor.diagonal(offset=0, dim1=0, dim2=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.diagonal"},{"name":"tensor.digamma","description":"See torch.digamma()","signature":"tensor.digamma() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.digamma"},{"name":"tensor.digamma_","description":"In-place version of digamma()","signature":"tensor.digamma_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.digamma_"},{"name":"tensor.dim","description":"Returns the number of dimensions of self tensor.","signature":"tensor.dim() → int","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.dim"},{"name":"tensor.dist","description":"See torch.dist()","signature":"tensor.dist(other, p=2) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.dist"},{"name":"tensor.div","description":"See torch.div()","signature":"tensor.div(value) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.div"},{"name":"tensor.div_","description":"In-place version of div()","signature":"tensor.div_(value) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.div_"},{"name":"tensor.dot","description":"See torch.dot()","signature":"tensor.dot(tensor2) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.dot"},{"name":"tensor.double","description":"self.double() is equivalent to self.to(torch.float64). See to().","signature":"tensor.double(memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.double"},{"name":"tensor.eig","description":"See torch.eig()","signature":"tensor.eig(eigenvectors=False) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.eig"},{"name":"tensor.element_size","description":"Returns the size in bytes of an individual element.","signature":"tensor.element_size() → int","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.element_size"},{"name":"tensor.eq","description":"See torch.eq()","signature":"tensor.eq(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.eq"},{"name":"tensor.eq_","description":"In-place version of eq()","signature":"tensor.eq_(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.eq_"},{"name":"tensor.equal","description":"See torch.equal()","signature":"tensor.equal(other) → bool","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.equal"},{"name":"tensor.erf","description":"See torch.erf()","signature":"tensor.erf() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.erf"},{"name":"tensor.erf_","description":"In-place version of erf()","signature":"tensor.erf_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.erf_"},{"name":"tensor.erfc","description":"See torch.erfc()","signature":"tensor.erfc() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.erfc"},{"name":"tensor.erfc_","description":"In-place version of erfc()","signature":"tensor.erfc_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.erfc_"},{"name":"tensor.erfinv","description":"See torch.erfinv()","signature":"tensor.erfinv() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.erfinv"},{"name":"tensor.erfinv_","description":"In-place version of erfinv()","signature":"tensor.erfinv_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.erfinv_"},{"name":"tensor.exp","description":"See torch.exp()","signature":"tensor.exp() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.exp"},{"name":"tensor.exp_","description":"In-place version of exp()","signature":"tensor.exp_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.exp_"},{"name":"tensor.expand","description":"Returns a new view of the self tensor with singleton dimensions expanded\nto a larger size.","signature":"tensor.expand(*sizes) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.expand"},{"name":"tensor.expand_as","description":"Expand this tensor to the same size as other.\nself.expand_as(other) is equivalent to self.expand(other.size()).","signature":"tensor.expand_as(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.expand_as"},{"name":"tensor.expm1","description":"See torch.expm1()","signature":"tensor.expm1() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.expm1"},{"name":"tensor.expm1_","description":"In-place version of expm1()","signature":"tensor.expm1_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.expm1_"},{"name":"tensor.exponential_","description":"Fills self tensor with elements drawn from the exponential distribution:","signature":"tensor.exponential_(lambd=1, *, generator=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.exponential_"},{"name":"tensor.fft","description":"See torch.fft()","signature":"tensor.fft(signal_ndim, normalized=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.fft"},{"name":"tensor.fill_","description":"Fills self tensor with the specified value.","signature":"tensor.fill_(value) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.fill_"},{"name":"tensor.fill_diagonal_","description":"Fill the main diagonal of a tensor that has at least 2-dimensions.\nWhen dims>2, all dimensions of input must be of equal length.\nThis function modifies the input tensor in-place, and returns the input tensor.","signature":"tensor.fill_diagonal_(fill_value, wrap=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.fill_diagonal_"},{"name":"tensor.flatten","description":"see torch.flatten()","signature":"tensor.flatten(input, start_dim=0, end_dim=-1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.flatten"},{"name":"tensor.flip","description":"See torch.flip()","signature":"tensor.flip(dims) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.flip"},{"name":"tensor.float","description":"self.float() is equivalent to self.to(torch.float32). See to().","signature":"tensor.float(memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.float"},{"name":"tensor.floor","description":"See torch.floor()","signature":"tensor.floor() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.floor"},{"name":"tensor.floor_","description":"In-place version of floor()","signature":"tensor.floor_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.floor_"},{"name":"tensor.floor_divide","description":"See torch.floor_divide()","signature":"tensor.floor_divide(value) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.floor_divide"},{"name":"tensor.floor_divide_","description":"In-place version of floor_divide()","signature":"tensor.floor_divide_(value) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.floor_divide_"},{"name":"tensor.fmod","description":"See torch.fmod()","signature":"tensor.fmod(divisor) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.fmod"},{"name":"tensor.fmod_","description":"In-place version of fmod()","signature":"tensor.fmod_(divisor) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.fmod_"},{"name":"tensor.frac","description":"See torch.frac()","signature":"tensor.frac() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.frac"},{"name":"tensor.frac_","description":"In-place version of frac()","signature":"tensor.frac_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.frac_"},{"name":"tensor.gather","description":"See torch.gather()","signature":"tensor.gather(dim, index) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.gather"},{"name":"tensor.ge","description":"See torch.ge()","signature":"tensor.ge(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.ge"},{"name":"tensor.ge_","description":"In-place version of ge()","signature":"tensor.ge_(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.ge_"},{"name":"tensor.geometric_","description":"Fills self tensor with elements drawn from the geometric distribution:","signature":"tensor.geometric_(p, *, generator=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.geometric_"},{"name":"tensor.geqrf","description":"See torch.geqrf()","signature":"tensor.geqrf() -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.geqrf"},{"name":"tensor.ger","description":"See torch.ger()","signature":"tensor.ger(vec2) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.ger"},{"name":"tensor.get_device","description":"For CUDA tensors, this function returns the device ordinal of the GPU on which the tensor resides.\nFor CPU tensors, an error is thrown.","signature":"tensor.get_device() -> Device ordinal (Integer)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.get_device"},{"name":"tensor.gt","description":"See torch.gt()","signature":"tensor.gt(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.gt"},{"name":"tensor.gt_","description":"In-place version of gt()","signature":"tensor.gt_(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.gt_"},{"name":"tensor.half","description":"self.half() is equivalent to self.to(torch.float16). See to().","signature":"tensor.half(memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.half"},{"name":"tensor.hardshrink","description":"See torch.nn.functional.hardshrink()","signature":"tensor.hardshrink(lambd=0.5) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.hardshrink"},{"name":"tensor.histc","description":"See torch.histc()","signature":"tensor.histc(bins=100, min=0, max=0) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.histc"},{"name":"tensor.ifft","description":"See torch.ifft()","signature":"tensor.ifft(signal_ndim, normalized=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.ifft"},{"name":"tensor.index_add","description":"Out-of-place version of torch.Tensor.index_add_()","signature":"tensor.index_add(dim, index, tensor) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.index_add"},{"name":"tensor.index_add_","description":"Accumulate the elements of tensor into the self tensor by adding\nto the indices in the order given in index. For example, if dim == 0\nand index[i] == j, then the ith row of tensor is added to the\njth row of self.","signature":"tensor.index_add_(dim, index, tensor) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.index_add_"},{"name":"tensor.index_copy","description":"Out-of-place version of torch.Tensor.index_copy_()","signature":"tensor.index_copy(dim, index, tensor) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.index_copy"},{"name":"tensor.index_copy_","description":"Copies the elements of tensor into the self tensor by selecting\nthe indices in the order given in index. For example, if dim == 0\nand index[i] == j, then the ith row of tensor is copied to the\njth row of self.","signature":"tensor.index_copy_(dim, index, tensor) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.index_copy_"},{"name":"tensor.index_fill","description":"Out-of-place version of torch.Tensor.index_fill_()","signature":"tensor.index_fill(dim, index, value) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.index_fill"},{"name":"tensor.index_fill_","description":"Fills the elements of the self tensor with value val by\nselecting the indices in the order given in index.","signature":"tensor.index_fill_(dim, index, val) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.index_fill_"},{"name":"tensor.index_put","description":"Out-place version of index_put_()","signature":"tensor.index_put(indices, value, accumulate=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.index_put"},{"name":"tensor.index_put_","description":"Puts values from the tensor value into the tensor self using\nthe indices specified in indices (which is a tuple of Tensors). The\nexpression tensor.index_put_(indices, value) is equivalent to\ntensor[indices] = value. Returns self.","signature":"tensor.index_put_(indices, value, accumulate=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.index_put_"},{"name":"tensor.index_select","description":"See torch.index_select()","signature":"tensor.index_select(dim, index) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.index_select"},{"name":"tensor.indices","description":"If self is a sparse COO tensor (i.e., with torch.sparse_coo layout),\nthis returns a view of the contained indices tensor. Otherwise, this throws an\nerror.","signature":"tensor.indices() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.indices"},{"name":"tensor.int","description":"self.int() is equivalent to self.to(torch.int32). See to().","signature":"tensor.int(memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.int"},{"name":"tensor.int_repr","description":"Given a quantized Tensor,\nself.int_repr() returns a CPU Tensor with uint8_t as data type that stores the\nunderlying uint8_t values of the given Tensor.","signature":"tensor.int_repr() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.int_repr"},{"name":"tensor.inverse","description":"See torch.inverse()","signature":"tensor.inverse() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.inverse"},{"name":"tensor.irfft","description":"See torch.irfft()","signature":"tensor.irfft(signal_ndim, normalized=False, onesided=True, signal_sizes=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.irfft"},{"name":"tensor.is_complex","description":"Returns True if the data type of self is a complex data type.","signature":"tensor.is_complex() → bool","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.is_complex"},{"name":"tensor.is_contiguous","description":"Returns True if self tensor is contiguous in memory in the order specified\nby memory format.","signature":"tensor.is_contiguous(memory_format=torch.contiguous_format) → bool","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.is_contiguous"},{"name":"tensor.is_cuda","description":"Is True if the Tensor is stored on the GPU, False otherwise.","signature":"tensor.is_cuda","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.is_cuda"},{"name":"tensor.is_floating_point","description":"Returns True if the data type of self is a floating point data type.","signature":"tensor.is_floating_point() → bool","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.is_floating_point"},{"name":"tensor.is_pinned","description":"Returns true if this tensor resides in pinned memory.","signature":"tensor.is_pinned()","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.is_pinned"},{"name":"tensor.is_quantized","description":"Is True if the Tensor is quantized, False otherwise.","signature":"tensor.is_quantized","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.is_quantized"},{"name":"tensor.is_set_to","description":"Returns True if this object refers to the same THTensor object from the\nTorch C API as the given tensor.","signature":"tensor.is_set_to(tensor) → bool","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.is_set_to"},{"name":"tensor.is_shared","description":"Checks if tensor is in shared memory.","signature":"tensor.is_shared()[source]","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.is_shared"},{"name":"tensor.is_signed","description":"Returns True if the data type of self is a signed data type.","signature":"tensor.is_signed() → bool","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.is_signed"},{"name":"tensor.is_sparse","description":"","signature":"tensor.is_sparse","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.is_sparse"},{"name":"tensor.item","description":"Returns the value of this tensor as a standard Python number. This only works\nfor tensors with one element. For other cases, see tolist().","signature":"tensor.item() → number","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.item"},{"name":"tensor.kthvalue","description":"See torch.kthvalue()","signature":"tensor.kthvalue(k, dim=None, keepdim=False) -> (Tensor, LongTensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.kthvalue"},{"name":"tensor.le","description":"See torch.le()","signature":"tensor.le(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.le"},{"name":"tensor.le_","description":"In-place version of le()","signature":"tensor.le_(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.le_"},{"name":"tensor.lerp","description":"See torch.lerp()","signature":"tensor.lerp(end, weight) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.lerp"},{"name":"tensor.lerp_","description":"In-place version of lerp()","signature":"tensor.lerp_(end, weight) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.lerp_"},{"name":"tensor.lgamma","description":"See torch.lgamma()","signature":"tensor.lgamma() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.lgamma"},{"name":"tensor.lgamma_","description":"In-place version of lgamma()","signature":"tensor.lgamma_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.lgamma_"},{"name":"tensor.log","description":"See torch.log()","signature":"tensor.log() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.log"},{"name":"tensor.log10","description":"See torch.log10()","signature":"tensor.log10() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.log10"},{"name":"tensor.log10_","description":"In-place version of log10()","signature":"tensor.log10_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.log10_"},{"name":"tensor.log1p","description":"See torch.log1p()","signature":"tensor.log1p() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.log1p"},{"name":"tensor.log1p_","description":"In-place version of log1p()","signature":"tensor.log1p_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.log1p_"},{"name":"tensor.log2","description":"See torch.log2()","signature":"tensor.log2() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.log2"},{"name":"tensor.log2_","description":"In-place version of log2()","signature":"tensor.log2_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.log2_"},{"name":"tensor.log_","description":"In-place version of log()","signature":"tensor.log_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.log_"},{"name":"tensor.log_normal_","description":"Fills self tensor with numbers samples from the log-normal distribution\nparameterized by the given mean μ\\muμ\n\n and standard deviation\nσ\\sigmaσ\n\n. Note that mean and std are the mean and\nstandard deviation of the underlying normal distribution, and not of the\nreturned distribution:","signature":"tensor.log_normal_(mean=1, std=2, *, generator=None)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.log_normal_"},{"name":"tensor.logdet","description":"See torch.logdet()","signature":"tensor.logdet() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.logdet"},{"name":"tensor.logical_and","description":"See torch.logical_and()","signature":"tensor.logical_and() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.logical_and"},{"name":"tensor.logical_and_","description":"In-place version of logical_and()","signature":"tensor.logical_and_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.logical_and_"},{"name":"tensor.logical_not","description":"See torch.logical_not()","signature":"tensor.logical_not() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.logical_not"},{"name":"tensor.logical_not_","description":"In-place version of logical_not()","signature":"tensor.logical_not_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.logical_not_"},{"name":"tensor.logical_or","description":"See torch.logical_or()","signature":"tensor.logical_or() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.logical_or"},{"name":"tensor.logical_or_","description":"In-place version of logical_or()","signature":"tensor.logical_or_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.logical_or_"},{"name":"tensor.logical_xor","description":"See torch.logical_xor()","signature":"tensor.logical_xor() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.logical_xor"},{"name":"tensor.logical_xor_","description":"In-place version of logical_xor()","signature":"tensor.logical_xor_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.logical_xor_"},{"name":"tensor.logsumexp","description":"See torch.logsumexp()","signature":"tensor.logsumexp(dim, keepdim=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.logsumexp"},{"name":"tensor.long","description":"self.long() is equivalent to self.to(torch.int64). See to().","signature":"tensor.long(memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.long"},{"name":"tensor.lstsq","description":"See torch.lstsq()","signature":"tensor.lstsq(A) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.lstsq"},{"name":"tensor.lt","description":"See torch.lt()","signature":"tensor.lt(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.lt"},{"name":"tensor.lt_","description":"In-place version of lt()","signature":"tensor.lt_(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.lt_"},{"name":"tensor.lu","description":"See torch.lu()","signature":"tensor.lu(pivot=True, get_infos=False)[source]","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.lu"},{"name":"tensor.lu_solve","description":"See torch.lu_solve()","signature":"tensor.lu_solve(LU_data, LU_pivots) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.lu_solve"},{"name":"tensor.map_","description":"Applies callable for each element in self tensor and the given\ntensor and stores the results in self tensor. self tensor and\nthe given tensor must be broadcastable.","signature":"tensor.map_(tensor, callable)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.map_"},{"name":"tensor.masked_fill","description":"Out-of-place version of torch.Tensor.masked_fill_()","signature":"tensor.masked_fill(mask, value) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.masked_fill"},{"name":"tensor.masked_fill_","description":"Fills elements of self tensor with value where mask is\nTrue. The shape of mask must be\nbroadcastable with the shape of the underlying\ntensor.","signature":"tensor.masked_fill_(mask, value)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.masked_fill_"},{"name":"tensor.masked_scatter","description":"Out-of-place version of torch.Tensor.masked_scatter_()","signature":"tensor.masked_scatter(mask, tensor) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.masked_scatter"},{"name":"tensor.masked_scatter_","description":"Copies elements from source into self tensor at positions where\nthe mask is True.\nThe shape of mask must be broadcastable\nwith the shape of the underlying tensor. The source should have at least\nas many elements as the number of ones in mask","signature":"tensor.masked_scatter_(mask, source)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.masked_scatter_"},{"name":"tensor.masked_select","description":"See torch.masked_select()","signature":"tensor.masked_select(mask) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.masked_select"},{"name":"tensor.matmul","description":"See torch.matmul()","signature":"tensor.matmul(tensor2) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.matmul"},{"name":"tensor.matrix_power","description":"See torch.matrix_power()","signature":"tensor.matrix_power(n) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.matrix_power"},{"name":"tensor.max","description":"See torch.max()","signature":"tensor.max(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.max"},{"name":"tensor.mean","description":"See torch.mean()","signature":"tensor.mean(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.mean"},{"name":"tensor.median","description":"See torch.median()","signature":"tensor.median(dim=None, keepdim=False) -> (Tensor, LongTensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.median"},{"name":"tensor.min","description":"See torch.min()","signature":"tensor.min(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.min"},{"name":"tensor.mm","description":"See torch.mm()","signature":"tensor.mm(mat2) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.mm"},{"name":"tensor.mode","description":"See torch.mode()","signature":"tensor.mode(dim=None, keepdim=False) -> (Tensor, LongTensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.mode"},{"name":"tensor.mul","description":"See torch.mul()","signature":"tensor.mul(value) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.mul"},{"name":"tensor.mul_","description":"In-place version of mul()","signature":"tensor.mul_(value)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.mul_"},{"name":"tensor.multinomial","description":"See torch.multinomial()","signature":"tensor.multinomial(num_samples, replacement=False, *, generator=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.multinomial"},{"name":"tensor.mv","description":"See torch.mv()","signature":"tensor.mv(vec) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.mv"},{"name":"tensor.mvlgamma","description":"See torch.mvlgamma()","signature":"tensor.mvlgamma(p) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.mvlgamma"},{"name":"tensor.mvlgamma_","description":"In-place version of mvlgamma()","signature":"tensor.mvlgamma_(p) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.mvlgamma_"},{"name":"tensor.narrow","description":"See torch.narrow()","signature":"tensor.narrow(dimension, start, length) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.narrow"},{"name":"tensor.narrow_copy","description":"Same as Tensor.narrow() except returning a copy rather\nthan shared storage.  This is primarily for sparse tensors, which\ndo not have a shared-storage narrow method.  Calling `narrow_copy\nwith `dimemsion > self.sparse_dim()` will return a copy with the\nrelevant dense dimension narrowed, and `self.shape` updated accordingly.","signature":"tensor.narrow_copy(dimension, start, length) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.narrow_copy"},{"name":"tensor.ndim","description":"Alias for dim()","signature":"tensor.ndim","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.ndim"},{"name":"tensor.ndimension","description":"Alias for dim()","signature":"tensor.ndimension() → int","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.ndimension"},{"name":"tensor.ne","description":"See torch.ne()","signature":"tensor.ne(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.ne"},{"name":"tensor.ne_","description":"In-place version of ne()","signature":"tensor.ne_(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.ne_"},{"name":"tensor.neg","description":"See torch.neg()","signature":"tensor.neg() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.neg"},{"name":"tensor.neg_","description":"In-place version of neg()","signature":"tensor.neg_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.neg_"},{"name":"tensor.nelement","description":"Alias for numel()","signature":"tensor.nelement() → int","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.nelement"},{"name":"tensor.new_empty","description":"Returns a Tensor of size size filled with uninitialized data.\nBy default, the returned Tensor has the same torch.dtype and\ntorch.device as this tensor.","signature":"tensor.new_empty(size, dtype=None, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.new_empty"},{"name":"tensor.new_full","description":"Returns a Tensor of size size filled with fill_value.\nBy default, the returned Tensor has the same torch.dtype and\ntorch.device as this tensor.","signature":"tensor.new_full(size, fill_value, dtype=None, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.new_full"},{"name":"tensor.new_ones","description":"Returns a Tensor of size size filled with 1.\nBy default, the returned Tensor has the same torch.dtype and\ntorch.device as this tensor.","signature":"tensor.new_ones(size, dtype=None, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.new_ones"},{"name":"tensor.new_tensor","description":"Returns a new Tensor with data as the tensor data.\nBy default, the returned Tensor has the same torch.dtype and\ntorch.device as this tensor.","signature":"tensor.new_tensor(data, dtype=None, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.new_tensor"},{"name":"tensor.new_zeros","description":"Returns a Tensor of size size filled with 0.\nBy default, the returned Tensor has the same torch.dtype and\ntorch.device as this tensor.","signature":"tensor.new_zeros(size, dtype=None, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.new_zeros"},{"name":"tensor.nonzero","description":"See torch.nonzero()","signature":"tensor.nonzero() → LongTensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.nonzero"},{"name":"tensor.norm","description":"See torch.norm()","signature":"tensor.norm(p='fro', dim=None, keepdim=False, dtype=None)[source]","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.norm"},{"name":"tensor.normal_","description":"Fills self tensor with elements samples from the normal distribution\nparameterized by mean and std.","signature":"tensor.normal_(mean=0, std=1, *, generator=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.normal_"},{"name":"tensor.numel","description":"See torch.numel()","signature":"tensor.numel() → int","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.numel"},{"name":"tensor.numpy","description":"Returns self tensor as a NumPy ndarray. This tensor and the\nreturned ndarray share the same underlying storage. Changes to\nself tensor will be reflected in the ndarray and vice versa.","signature":"tensor.numpy() → numpy.ndarray","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.numpy"},{"name":"tensor.orgqr","description":"See torch.orgqr()","signature":"tensor.orgqr(input2) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.orgqr"},{"name":"tensor.ormqr","description":"See torch.ormqr()","signature":"tensor.ormqr(input2, input3, left=True, transpose=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.ormqr"},{"name":"tensor.permute","description":"Returns a view of the original tensor with its dimensions permuted.","signature":"tensor.permute(*dims) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.permute"},{"name":"tensor.pin_memory","description":"Copies the tensor to pinned memory, if it’s not already pinned.","signature":"tensor.pin_memory() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.pin_memory"},{"name":"tensor.pinverse","description":"See torch.pinverse()","signature":"tensor.pinverse() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.pinverse"},{"name":"tensor.polygamma","description":"See torch.polygamma()","signature":"tensor.polygamma(n) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.polygamma"},{"name":"tensor.polygamma_","description":"In-place version of polygamma()","signature":"tensor.polygamma_(n) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.polygamma_"},{"name":"tensor.pow","description":"See torch.pow()","signature":"tensor.pow(exponent) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.pow"},{"name":"tensor.pow_","description":"In-place version of pow()","signature":"tensor.pow_(exponent) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.pow_"},{"name":"tensor.prod","description":"See torch.prod()","signature":"tensor.prod(dim=None, keepdim=False, dtype=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.prod"},{"name":"tensor.put_","description":"Copies the elements from tensor into the positions specified by\nindices. For the purpose of indexing, the self tensor is treated as if\nit were a 1-D tensor.","signature":"tensor.put_(indices, tensor, accumulate=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.put_"},{"name":"tensor.q_per_channel_axis","description":"Given a Tensor quantized by linear (affine) per-channel quantization,\nreturns the index of dimension on which per-channel quantization is applied.","signature":"tensor.q_per_channel_axis() → int","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.q_per_channel_axis"},{"name":"tensor.q_per_channel_scales","description":"Given a Tensor quantized by linear (affine) per-channel quantization,\nreturns a Tensor of scales of the underlying quantizer. It has the number of\nelements that matches the corresponding dimensions (from q_per_channel_axis) of\nthe tensor.","signature":"tensor.q_per_channel_scales() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.q_per_channel_scales"},{"name":"tensor.q_per_channel_zero_points","description":"Given a Tensor quantized by linear (affine) per-channel quantization,\nreturns a tensor of zero_points of the underlying quantizer. It has the number of\nelements that matches the corresponding dimensions (from q_per_channel_axis) of\nthe tensor.","signature":"tensor.q_per_channel_zero_points() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.q_per_channel_zero_points"},{"name":"tensor.q_scale","description":"Given a Tensor quantized by linear(affine) quantization,\nreturns the scale of the underlying quantizer().","signature":"tensor.q_scale() → float","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.q_scale"},{"name":"tensor.q_zero_point","description":"Given a Tensor quantized by linear(affine) quantization,\nreturns the zero_point of the underlying quantizer().","signature":"tensor.q_zero_point() → int","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.q_zero_point"},{"name":"tensor.qr","description":"See torch.qr()","signature":"tensor.qr(some=True) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.qr"},{"name":"tensor.qscheme","description":"Returns the quantization scheme of a given QTensor.","signature":"tensor.qscheme() → torch.qscheme","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.qscheme"},{"name":"tensor.random_","description":"Fills self tensor with numbers sampled from the discrete uniform\ndistribution over [from, to - 1]. If not specified, the values are usually\nonly bounded by self tensor’s data type. However, for floating point\ntypes, if unspecified, range will be [0, 2^mantissa] to ensure that every\nvalue is representable. For example, torch.tensor(1, dtype=torch.double).random_()\nwill be uniform in [0, 2^53].","signature":"tensor.random_(from=0, to=None, *, generator=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.random_"},{"name":"tensor.reciprocal","description":"See torch.reciprocal()","signature":"tensor.reciprocal() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.reciprocal"},{"name":"tensor.reciprocal_","description":"In-place version of reciprocal()","signature":"tensor.reciprocal_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.reciprocal_"},{"name":"tensor.record_stream","description":"Ensures that the tensor memory is not reused for another tensor until all\ncurrent work queued on stream are complete.","signature":"tensor.record_stream(stream)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.record_stream"},{"name":"tensor.remainder","description":"See torch.remainder()","signature":"tensor.remainder(divisor) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.remainder"},{"name":"tensor.remainder_","description":"In-place version of remainder()","signature":"tensor.remainder_(divisor) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.remainder_"},{"name":"tensor.renorm","description":"See torch.renorm()","signature":"tensor.renorm(p, dim, maxnorm) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.renorm"},{"name":"tensor.renorm_","description":"In-place version of renorm()","signature":"tensor.renorm_(p, dim, maxnorm) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.renorm_"},{"name":"tensor.repeat","description":"Repeats this tensor along the specified dimensions.","signature":"tensor.repeat(*sizes) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.repeat"},{"name":"tensor.repeat_interleave","description":"See torch.repeat_interleave().","signature":"tensor.repeat_interleave(repeats, dim=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.repeat_interleave"},{"name":"tensor.requires_grad_","description":"Change if autograd should record operations on this tensor: sets this tensor’s\nrequires_grad attribute in-place. Returns this tensor.","signature":"tensor.requires_grad_(requires_grad=True) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.requires_grad_"},{"name":"tensor.reshape","description":"Returns a tensor with the same data and number of elements as self\nbut with the specified shape. This method returns a view if shape is\ncompatible with the current shape. See torch.Tensor.view() on when it is\npossible to return a view.","signature":"tensor.reshape(*shape) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.reshape"},{"name":"tensor.reshape_as","description":"Returns this tensor as the same shape as other.\nself.reshape_as(other) is equivalent to self.reshape(other.sizes()).\nThis method returns a view if other.sizes() is compatible with the current\nshape. See torch.Tensor.view() on when it is possible to return a view.","signature":"tensor.reshape_as(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.reshape_as"},{"name":"tensor.resize_","description":"Resizes self tensor to the specified size. If the number of elements is\nlarger than the current storage size, then the underlying storage is resized\nto fit the new number of elements. If the number of elements is smaller, the\nunderlying storage is not changed. Existing elements are preserved but any new\nmemory is uninitialized.","signature":"tensor.resize_(*sizes, memory_format=torch.contiguous_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.resize_"},{"name":"tensor.resize_as_","description":"Resizes the self tensor to be the same size as the specified\ntensor. This is equivalent to self.resize_(tensor.size()).","signature":"tensor.resize_as_(tensor, memory_format=torch.contiguous_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.resize_as_"},{"name":"tensor.rfft","description":"See torch.rfft()","signature":"tensor.rfft(signal_ndim, normalized=False, onesided=True) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.rfft"},{"name":"tensor.roll","description":"See torch.roll()","signature":"tensor.roll(shifts, dims) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.roll"},{"name":"tensor.rot90","description":"See torch.rot90()","signature":"tensor.rot90(k, dims) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.rot90"},{"name":"tensor.round","description":"See torch.round()","signature":"tensor.round() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.round"},{"name":"tensor.round_","description":"In-place version of round()","signature":"tensor.round_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.round_"},{"name":"tensor.rsqrt","description":"See torch.rsqrt()","signature":"tensor.rsqrt() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.rsqrt"},{"name":"tensor.rsqrt_","description":"In-place version of rsqrt()","signature":"tensor.rsqrt_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.rsqrt_"},{"name":"tensor.scatter","description":"Out-of-place version of torch.Tensor.scatter_()","signature":"tensor.scatter(dim, index, src) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.scatter"},{"name":"tensor.scatter_","description":"Writes all values from the tensor src into self at the indices\nspecified in the index tensor. For each value in src, its output\nindex is specified by its index in src for dimension != dim and by\nthe corresponding value in index for dimension = dim.","signature":"tensor.scatter_(dim, index, src) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.scatter_"},{"name":"tensor.scatter_add","description":"Out-of-place version of torch.Tensor.scatter_add_()","signature":"tensor.scatter_add(dim, index, src) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.scatter_add"},{"name":"tensor.scatter_add_","description":"Adds all values from the tensor other into self at the indices\nspecified in the index tensor in a similar fashion as\nscatter_(). For each value in src, it is added to\nan index in self which is specified by its index in src\nfor dimension != dim and by the corresponding value in index for\ndimension = dim.","signature":"tensor.scatter_add_(dim, index, src) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.scatter_add_"},{"name":"tensor.select","description":"Slices the self tensor along the selected dimension at the given index.\nThis function returns a view of the original tensor with the given dimension removed.","signature":"tensor.select(dim, index) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.select"},{"name":"tensor.set_","description":"Sets the underlying storage, size, and strides. If source is a tensor,\nself tensor will share the same storage and have the same size and\nstrides as source. Changes to elements in one tensor will be reflected\nin the other.","signature":"tensor.set_(source=None, storage_offset=0, size=None, stride=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.set_"},{"name":"tensor.share_memory_","description":"Moves the underlying storage to shared memory.","signature":"tensor.share_memory_()[source]","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.share_memory_"},{"name":"tensor.short","description":"self.short() is equivalent to self.to(torch.int16). See to().","signature":"tensor.short(memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.short"},{"name":"tensor.sigmoid","description":"See torch.sigmoid()","signature":"tensor.sigmoid() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sigmoid"},{"name":"tensor.sigmoid_","description":"In-place version of sigmoid()","signature":"tensor.sigmoid_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sigmoid_"},{"name":"tensor.sign","description":"See torch.sign()","signature":"tensor.sign() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sign"},{"name":"tensor.sign_","description":"In-place version of sign()","signature":"tensor.sign_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sign_"},{"name":"tensor.sin","description":"See torch.sin()","signature":"tensor.sin() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sin"},{"name":"tensor.sin_","description":"In-place version of sin()","signature":"tensor.sin_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sin_"},{"name":"tensor.sinh","description":"See torch.sinh()","signature":"tensor.sinh() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sinh"},{"name":"tensor.sinh_","description":"In-place version of sinh()","signature":"tensor.sinh_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sinh_"},{"name":"tensor.size","description":"Returns the size of the self tensor. The returned value is a subclass of\ntuple.","signature":"tensor.size() → torch.Size","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.size"},{"name":"tensor.slogdet","description":"See torch.slogdet()","signature":"tensor.slogdet() -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.slogdet"},{"name":"tensor.solve","description":"See torch.solve()","signature":"tensor.solve(A) → Tensor, Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.solve"},{"name":"tensor.sort","description":"See torch.sort()","signature":"tensor.sort(dim=-1, descending=False) -> (Tensor, LongTensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sort"},{"name":"tensor.sparse_dim","description":"If self is a sparse COO tensor (i.e., with torch.sparse_coo layout),\nthis returns the number of sparse dimensions. Otherwise, this throws an error.","signature":"tensor.sparse_dim() → int","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sparse_dim"},{"name":"tensor.sparse_mask","description":"Returns a new SparseTensor with values from Tensor input filtered\nby indices of mask and values are ignored. input and mask\nmust have the same shape.","signature":"tensor.sparse_mask(input, mask) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sparse_mask"},{"name":"tensor.split","description":"See torch.split()","signature":"tensor.split(split_size, dim=0)[source]","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.split"},{"name":"tensor.sqrt","description":"See torch.sqrt()","signature":"tensor.sqrt() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sqrt"},{"name":"tensor.sqrt_","description":"In-place version of sqrt()","signature":"tensor.sqrt_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sqrt_"},{"name":"tensor.square","description":"See torch.square()","signature":"tensor.square() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.square"},{"name":"tensor.square_","description":"In-place version of square()","signature":"tensor.square_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.square_"},{"name":"tensor.squeeze","description":"See torch.squeeze()","signature":"tensor.squeeze(dim=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.squeeze"},{"name":"tensor.squeeze_","description":"In-place version of squeeze()","signature":"tensor.squeeze_(dim=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.squeeze_"},{"name":"tensor.std","description":"See torch.std()","signature":"tensor.std(dim=None, unbiased=True, keepdim=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.std"},{"name":"tensor.stft","description":"See torch.stft()","signature":"tensor.stft(n_fft, hop_length=None, win_length=None, window=None, center=True, pad_mode='reflect', normalized=False, onesided=True)[source]","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.stft"},{"name":"tensor.storage","description":"Returns the underlying storage.","signature":"tensor.storage() → torch.Storage","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.storage"},{"name":"tensor.storage_offset","description":"Returns self tensor’s offset in the underlying storage in terms of\nnumber of storage elements (not bytes).","signature":"tensor.storage_offset() → int","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.storage_offset"},{"name":"tensor.storage_type","description":"Returns the type of the underlying storage.","signature":"tensor.storage_type() → type","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.storage_type"},{"name":"tensor.stride","description":"Returns the stride of self tensor.","signature":"tensor.stride(dim) → tuple or int","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.stride"},{"name":"tensor.sub","description":"Subtracts a scalar or tensor from self tensor. If both alpha\nand other are specified, each element of other is scaled by\nalpha before being used.","signature":"tensor.sub(other, *, alpha=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sub"},{"name":"tensor.sub_","description":"In-place version of sub()","signature":"tensor.sub_(other, *, alpha=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sub_"},{"name":"tensor.sum","description":"See torch.sum()","signature":"tensor.sum(dim=None, keepdim=False, dtype=None) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sum"},{"name":"tensor.sum_to_size","description":"Sum this tensor to size.\nsize must be broadcastable to this tensor size.","signature":"tensor.sum_to_size(*size) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.sum_to_size"},{"name":"tensor.svd","description":"See torch.svd()","signature":"tensor.svd(some=True, compute_uv=True) -> (Tensor, Tensor, Tensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.svd"},{"name":"tensor.symeig","description":"See torch.symeig()","signature":"tensor.symeig(eigenvectors=False, upper=True) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.symeig"},{"name":"tensor.t","description":"See torch.t()","signature":"tensor.t() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.t"},{"name":"tensor.t_","description":"In-place version of t()","signature":"tensor.t_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.t_"},{"name":"tensor.take","description":"See torch.take()","signature":"tensor.take(indices) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.take"},{"name":"tensor.tan","description":"See torch.tan()","signature":"tensor.tan() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.tan"},{"name":"tensor.tan_","description":"In-place version of tan()","signature":"tensor.tan_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.tan_"},{"name":"tensor.tanh","description":"See torch.tanh()","signature":"tensor.tanh() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.tanh"},{"name":"tensor.tanh_","description":"In-place version of tanh()","signature":"tensor.tanh_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.tanh_"},{"name":"tensor.to","description":"Performs Tensor dtype and/or device conversion. A torch.dtype and torch.device are\ninferred from the arguments of self.to(*args, **kwargs).","signature":"tensor.to(*args, **kwargs) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.to"},{"name":"tensor.to_mkldnn","description":"Returns a copy of the tensor in torch.mkldnn layout.","signature":"tensor.to_mkldnn() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.to_mkldnn"},{"name":"tensor.to_sparse","description":"Returns a sparse copy of the tensor.  PyTorch supports sparse tensors in\ncoordinate format.","signature":"tensor.to_sparse(sparseDims) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.to_sparse"},{"name":"tensor.tolist","description":"”\ntolist() -> list or number","signature":"tensor.tolist()","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.tolist"},{"name":"tensor.topk","description":"See torch.topk()","signature":"tensor.topk(k, dim=None, largest=True, sorted=True) -> (Tensor, LongTensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.topk"},{"name":"tensor.trace","description":"See torch.trace()","signature":"tensor.trace() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.trace"},{"name":"tensor.transpose","description":"See torch.transpose()","signature":"tensor.transpose(dim0, dim1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.transpose"},{"name":"tensor.transpose_","description":"In-place version of transpose()","signature":"tensor.transpose_(dim0, dim1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.transpose_"},{"name":"tensor.triangular_solve","description":"See torch.triangular_solve()","signature":"tensor.triangular_solve(A, upper=True, transpose=False, unitriangular=False) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.triangular_solve"},{"name":"tensor.tril","description":"See torch.tril()","signature":"tensor.tril(k=0) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.tril"},{"name":"tensor.tril_","description":"In-place version of tril()","signature":"tensor.tril_(k=0) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.tril_"},{"name":"tensor.triu","description":"See torch.triu()","signature":"tensor.triu(k=0) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.triu"},{"name":"tensor.triu_","description":"In-place version of triu()","signature":"tensor.triu_(k=0) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.triu_"},{"name":"tensor.true_divide","description":"See torch.true_divide()","signature":"tensor.true_divide(value) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.true_divide"},{"name":"tensor.true_divide_","description":"In-place version of true_divide_()","signature":"tensor.true_divide_(value) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.true_divide_"},{"name":"tensor.trunc","description":"See torch.trunc()","signature":"tensor.trunc() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.trunc"},{"name":"tensor.trunc_","description":"In-place version of trunc()","signature":"tensor.trunc_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.trunc_"},{"name":"tensor.type","description":"Returns the type if dtype is not provided, else casts this object to\nthe specified type.","signature":"tensor.type(dtype=None, non_blocking=False, **kwargs) → str or Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.type"},{"name":"tensor.type_as","description":"Returns this tensor cast to the type of the given tensor.","signature":"tensor.type_as(tensor) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.type_as"},{"name":"tensor.unbind","description":"See torch.unbind()","signature":"tensor.unbind(dim=0) → seq","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.unbind"},{"name":"tensor.unfold","description":"Returns a view of the original tensor which contains all slices of size size from\nself tensor in the dimension dimension.","signature":"tensor.unfold(dimension, size, step) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.unfold"},{"name":"tensor.uniform_","description":"Fills self tensor with numbers sampled from the continuous uniform\ndistribution:","signature":"tensor.uniform_(from=0, to=1) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.uniform_"},{"name":"tensor.unique","description":"Returns the unique elements of the input tensor.","signature":"tensor.unique(sorted=True, return_inverse=False, return_counts=False, dim=None)[source]","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.unique"},{"name":"tensor.unique_consecutive","description":"Eliminates all but the first element from every consecutive group of equivalent elements.","signature":"tensor.unique_consecutive(return_inverse=False, return_counts=False, dim=None)[source]","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.unique_consecutive"},{"name":"tensor.unsqueeze","description":"See torch.unsqueeze()","signature":"tensor.unsqueeze(dim) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.unsqueeze"},{"name":"tensor.unsqueeze_","description":"In-place version of unsqueeze()","signature":"tensor.unsqueeze_(dim) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.unsqueeze_"},{"name":"tensor.values","description":"If self is a sparse COO tensor (i.e., with torch.sparse_coo layout),\nthis returns a view of the contained values tensor. Otherwise, this throws an\nerror.","signature":"tensor.values() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.values"},{"name":"tensor.var","description":"See torch.var()","signature":"tensor.var(dim=None, unbiased=True, keepdim=False) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.var"},{"name":"tensor.view","description":"Returns a new tensor with the same data as the self tensor but of a\ndifferent shape.","signature":"tensor.view(*shape) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.view"},{"name":"tensor.view_as","description":"View this tensor as the same size as other.\nself.view_as(other) is equivalent to self.view(other.size()).","signature":"tensor.view_as(other) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.view_as"},{"name":"tensor.where","description":"self.where(condition, y) is equivalent to torch.where(condition, self, y).\nSee torch.where()","signature":"tensor.where(condition, y) → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.where"},{"name":"tensor.zero_","description":"Fills self tensor with zeros.","signature":"tensor.zero_() → Tensor","url":"https://pytorch.org/docs/stable/tensors.html#torch.Tensor.zero_"}]