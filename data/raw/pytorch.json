[{"name":"device","description":"Generator.device -> device","signature":"device","url":"https://pytorch.org/docs/stable/torch.html#torch._C.Generator.device"},{"name":"torch.abs","description":"Computes the element-wise absolute value of the given input tensor.","signature":"torch.abs(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.abs"},{"name":"torch.acos","description":"Returns a new tensor with the arccosine  of the elements of input.","signature":"torch.acos(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.acos"},{"name":"torch.add","description":"  torch.add(input, other, out=None) ","signature":"torch.add()","url":"https://pytorch.org/docs/stable/torch.html#torch.add"},{"name":"torch.add","description":"","signature":"torch.add(input, other, out=None)","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.add","description":"","signature":"torch.add(input, other, *, alpha=1, out=None)","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.addbmm","description":"Performs a batch matrix-matrix product of matrices stored in batch1 and batch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension). input is added to the final result.","signature":"torch.addbmm(input, batch1, batch2, *, beta=1, alpha=1, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.addbmm"},{"name":"torch.addcdiv","description":"Performs the element-wise division of tensor1 by tensor2, multiply the result by the scalar value and add it to input.","signature":"torch.addcdiv(input, tensor1, tensor2, *, value=1, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.addcdiv"},{"name":"torch.addcmul","description":"Performs the element-wise multiplication of tensor1 by tensor2, multiply the result by the scalar value and add it to input.","signature":"torch.addcmul(input, tensor1, tensor2, *, value=1, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.addcmul"},{"name":"torch.addmm","description":"Performs a matrix multiplication of the matrices mat1 and mat2. The matrix input is added to the final result.","signature":"torch.addmm(input, mat1, mat2, *, beta=1, alpha=1, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.addmm"},{"name":"torch.addmv","description":"Performs a matrix-vector product of the matrix mat and the vector vec. The vector input is added to the final result.","signature":"torch.addmv(input, mat, vec, *, beta=1, alpha=1, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.addmv"},{"name":"torch.addr","description":"Performs the outer-product of vectors vec1 and vec2 and adds it to the matrix input.","signature":"torch.addr(input, vec1, vec2, *, beta=1, alpha=1, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.addr"},{"name":"torch.allclose","description":"This function checks if all input and other satisfy the condition:","signature":"torch.allclose(input, other, rtol=1e-05, atol=1e-08, equal_nan=False) → bool","url":"https://pytorch.org/docs/stable/torch.html#torch.allclose"},{"name":"torch.angle","description":"Computes the element-wise angle (in radians) of the given input tensor.","signature":"torch.angle(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.angle"},{"name":"torch.arange","description":"Returns a 1-D tensor of size ⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉   with values from the interval [start, end) taken with common difference step beginning from start.","signature":"torch.arange(start=0, end, step=1, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.arange"},{"name":"torch.argmax","description":"  torch.argmax(input) → LongTensor ","signature":"torch.argmax()","url":"https://pytorch.org/docs/stable/torch.html#torch.argmax"},{"name":"torch.argmax","description":"","signature":"torch.argmax(input) → LongTensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.argmax","description":"","signature":"torch.argmax(input, dim, keepdim=False) → LongTensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.argmin","description":"  torch.argmin(input) → LongTensor ","signature":"torch.argmin()","url":"https://pytorch.org/docs/stable/torch.html#torch.argmin"},{"name":"torch.argmin","description":"","signature":"torch.argmin(input) → LongTensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.argmin","description":"","signature":"torch.argmin(input, dim, keepdim=False, out=None) → LongTensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.argsort","description":"Returns the indices that sort a tensor along a given dimension in ascending order by value.","signature":"torch.argsort(input, dim=-1, descending=False) → LongTensor","url":"https://pytorch.org/docs/stable/torch.html#torch.argsort"},{"name":"torch.as_strided","description":"Create a view of an existing torch.Tensor input with specified size, stride and storage_offset.","signature":"torch.as_strided(input, size, stride, storage_offset=0) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.as_strided"},{"name":"torch.as_tensor","description":"Convert the data into a torch.Tensor. If the data is already a Tensor with the same dtype and device, no copy will be performed, otherwise a new Tensor will be returned with computational graph retained if data Tensor has requires_grad=True. Similarly, if the data is an ndarray of the corresponding dtype and the device is the cpu, no copy will be performed.","signature":"torch.as_tensor(data, dtype=None, device=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.as_tensor"},{"name":"torch.asin","description":"Returns a new tensor with the arcsine  of the elements of input.","signature":"torch.asin(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.asin"},{"name":"torch.atan","description":"Returns a new tensor with the arctangent  of the elements of input.","signature":"torch.atan(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.atan"},{"name":"torch.atan2","description":"Element-wise arctangent of inputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​   with consideration of the quadrant. Returns a new tensor with the signed angles in radians between vector (otheri,inputi)(\\text{other}_{i}, \\text{input}_{i})(otheri​,inputi​)   and vector (1,0)(1, 0)(1,0)  . (Note that otheri\\text{other}_{i}otheri​  , the second parameter, is the x-coordinate, while inputi\\text{input}_{i}inputi​  , the first parameter, is the y-coordinate.)","signature":"torch.atan2(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.atan2"},{"name":"torch.baddbmm","description":"Performs a batch matrix-matrix product of matrices in batch1 and batch2. input is added to the final result.","signature":"torch.baddbmm(input, batch1, batch2, *, beta=1, alpha=1, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.baddbmm"},{"name":"torch.bartlett_window","description":"Bartlett window function.","signature":"torch.bartlett_window(window_length, periodic=True, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.bartlett_window"},{"name":"torch.bernoulli","description":"Draws binary random numbers (0 or 1) from a Bernoulli distribution.","signature":"torch.bernoulli(input, *, generator=None, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.bernoulli"},{"name":"torch.bincount","description":"Count the frequency of each value in an array of non-negative ints.","signature":"torch.bincount(input, weights=None, minlength=0) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.bincount"},{"name":"torch.bitwise_and","description":"Computes the bitwise AND of input and other. The input tensor must be of integral or Boolean types. For bool tensors, it computes the logical AND.","signature":"torch.bitwise_and(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.bitwise_and"},{"name":"torch.bitwise_not","description":"Computes the bitwise NOT of the given input tensor. The input tensor must be of integral or Boolean types. For bool tensors, it computes the logical NOT.","signature":"torch.bitwise_not(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.bitwise_not"},{"name":"torch.bitwise_or","description":"Computes the bitwise OR of input and other. The input tensor must be of integral or Boolean types. For bool tensors, it computes the logical OR.","signature":"torch.bitwise_or(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.bitwise_or"},{"name":"torch.bitwise_xor","description":"Computes the bitwise XOR of input and other. The input tensor must be of integral or Boolean types. For bool tensors, it computes the logical XOR.","signature":"torch.bitwise_xor(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.bitwise_xor"},{"name":"torch.blackman_window","description":"Blackman window function.","signature":"torch.blackman_window(window_length, periodic=True, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.blackman_window"},{"name":"torch.bmm","description":"Performs a batch matrix-matrix product of matrices stored in input and mat2.","signature":"torch.bmm(input, mat2, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.bmm"},{"name":"torch.broadcast_tensors","description":"Broadcasts the given tensors according to Broadcasting semantics.","signature":"torch.broadcast_tensors(*tensors) → List of Tensors[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.broadcast_tensors"},{"name":"torch.can_cast","description":"Determines if a type conversion is allowed under PyTorch casting rules described in the type promotion documentation.","signature":"torch.can_cast(from, to) → bool","url":"https://pytorch.org/docs/stable/torch.html#torch.can_cast"},{"name":"torch.cartesian_prod","description":"Do cartesian product of the given sequence of tensors. The behavior is similar to python’s itertools.product.","signature":"torch.cartesian_prod(*tensors)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.cartesian_prod"},{"name":"torch.cat","description":"Concatenates the given sequence of seq tensors in the given dimension. All tensors must either have the same shape (except in the concatenating dimension) or be empty.","signature":"torch.cat(tensors, dim=0, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.cat"},{"name":"torch.cdist","description":"Computes batched the p-norm distance between each pair of the two collections of row vectors.","signature":"torch.cdist(x1, x2, p=2.0, compute_mode='use_mm_for_euclid_dist_if_necessary')[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.cdist"},{"name":"torch.ceil","description":"Returns a new tensor with the ceil of the elements of input, the smallest integer greater than or equal to each element.","signature":"torch.ceil(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.ceil"},{"name":"torch.chain_matmul","description":"Returns the matrix product of the NNN   2-D tensors. This product is efficiently computed using the matrix chain order algorithm which selects the order in which incurs the lowest cost in terms of arithmetic operations ([CLRS]). Note that since this is a function to compute the product, NNN   needs to be greater than or equal to 2; if equal to 2 then a trivial matrix-matrix product is returned. If NNN   is 1, then this is a no-op - the original matrix is returned as is.","signature":"torch.chain_matmul(*matrices)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.chain_matmul"},{"name":"torch.cholesky","description":"Computes the Cholesky decomposition of a symmetric positive-definite matrix AAA   or for batches of symmetric positive-definite matrices.","signature":"torch.cholesky(input, upper=False, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.cholesky"},{"name":"torch.cholesky_inverse","description":"Computes the inverse of a symmetric positive-definite matrix AAA   using its Cholesky factor uuu  : returns matrix inv. The inverse is computed using LAPACK routines dpotri and spotri (and the corresponding MAGMA routines).","signature":"torch.cholesky_inverse(input, upper=False, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.cholesky_inverse"},{"name":"torch.cholesky_solve","description":"Solves a linear system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrix uuu  .","signature":"torch.cholesky_solve(input, input2, upper=False, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.cholesky_solve"},{"name":"torch.chunk","description":"Splits a tensor into a specific number of chunks. Each chunk is a view of the input tensor.","signature":"torch.chunk(input, chunks, dim=0) → List of Tensors","url":"https://pytorch.org/docs/stable/torch.html#torch.chunk"},{"name":"torch.clamp","description":"Clamp all elements in input into the range [ min, max ] and return a resulting tensor:","signature":"torch.clamp(input, min, max, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.clamp"},{"name":"torch.clamp","description":"","signature":"torch.clamp(input, *, min, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.clamp","description":"","signature":"torch.clamp(input, *, max, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.combinations","description":"Compute combinations of length rrr   of the given tensor. The behavior is similar to python’s itertools.combinations when with_replacement is set to False, and itertools.combinations_with_replacement when with_replacement is set to True.","signature":"torch.combinations(input, r=2, with_replacement=False) → seq","url":"https://pytorch.org/docs/stable/torch.html#torch.combinations"},{"name":"torch.compiled_with_cxx11_abi","description":"Returns whether PyTorch was built with _GLIBCXX_USE_CXX11_ABI=1","signature":"torch.compiled_with_cxx11_abi()[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.compiled_with_cxx11_abi"},{"name":"torch.conj","description":"Computes the element-wise conjugate of the given input tensor.","signature":"torch.conj(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.conj"},{"name":"torch.cos","description":"Returns a new tensor with the cosine  of the elements of input.","signature":"torch.cos(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.cos"},{"name":"torch.cosh","description":"Returns a new tensor with the hyperbolic cosine  of the elements of input.","signature":"torch.cosh(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.cosh"},{"name":"torch.cross","description":"Returns the cross product of vectors in dimension dim of input and other.","signature":"torch.cross(input, other, dim=-1, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.cross"},{"name":"torch.cummax","description":"Returns a namedtuple (values, indices) where values is the cumulative maximum of elements of input in the dimension dim. And indices is the index location of each maximum value found in the dimension dim.","signature":"torch.cummax(input, dim, out=None) -> (Tensor, LongTensor)","url":"https://pytorch.org/docs/stable/torch.html#torch.cummax"},{"name":"torch.cummin","description":"Returns a namedtuple (values, indices) where values is the cumulative minimum of elements of input in the dimension dim. And indices is the index location of each maximum value found in the dimension dim.","signature":"torch.cummin(input, dim, out=None) -> (Tensor, LongTensor)","url":"https://pytorch.org/docs/stable/torch.html#torch.cummin"},{"name":"torch.cumprod","description":"Returns the cumulative product of elements of input in the dimension dim.","signature":"torch.cumprod(input, dim, out=None, dtype=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.cumprod"},{"name":"torch.cumsum","description":"Returns the cumulative sum of elements of input in the dimension dim.","signature":"torch.cumsum(input, dim, out=None, dtype=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.cumsum"},{"name":"torch.default_generator Returns the default CPU torch.Generator","description":"","signature":"torch.default_generator Returns the default CPU torch.Generator","url":"https://pytorch.org/docs/stable/torch.html#torch.torch.default_generator"},{"name":"torch.det","description":"Calculates determinant of a square matrix or batches of square matrices.","signature":"torch.det(input) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.det"},{"name":"torch.diag","description":" If input is a vector (1-D tensor), then returns a 2-D square tensor with the elements of input as the diagonal. If input is a matrix (2-D tensor), then returns a 1-D tensor with the diagonal elements of input. ","signature":"torch.diag(input, diagonal=0, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.diag"},{"name":"torch.diag_embed","description":"Creates a tensor whose diagonals of certain 2D planes (specified by dim1 and dim2) are filled by input. To facilitate creating batched diagonal matrices, the 2D planes formed by the last two dimensions of the returned tensor are chosen by default.","signature":"torch.diag_embed(input, offset=0, dim1=-2, dim2=-1) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.diag_embed"},{"name":"torch.diagflat","description":" If input is a vector (1-D tensor), then returns a 2-D square tensor with the elements of input as the diagonal. If input is a tensor with more than one dimension, then returns a 2-D tensor with diagonal elements equal to a flattened input. ","signature":"torch.diagflat(input, offset=0) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.diagflat"},{"name":"torch.diagonal","description":"Returns a partial view of input with the its diagonal elements with respect to dim1 and dim2 appended as a dimension at the end of the shape.","signature":"torch.diagonal(input, offset=0, dim1=0, dim2=1) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.diagonal"},{"name":"torch.digamma","description":"Computes the logarithmic derivative of the gamma function on input.","signature":"torch.digamma(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.digamma"},{"name":"torch.dist","description":"Returns the p-norm of (input - other)","signature":"torch.dist(input, other, p=2) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.dist"},{"name":"torch.div","description":"  torch.div(input, other, out=None) → Tensor ","signature":"torch.div()","url":"https://pytorch.org/docs/stable/torch.html#torch.div"},{"name":"torch.div","description":"","signature":"torch.div(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.div","description":"","signature":"torch.div(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.dot","description":"Computes the dot product (inner product) of two tensors.","signature":"torch.dot(input, tensor) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.dot"},{"name":"torch.eig","description":"Computes the eigenvalues and eigenvectors of a real square matrix.","signature":"torch.eig(input, eigenvectors=False, out=None) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/torch.html#torch.eig"},{"name":"torch.einsum","description":"This function provides a way of computing multilinear expressions (i.e. sums of products) using the Einstein summation convention.","signature":"torch.einsum(equation, *operands) → Tensor[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.einsum"},{"name":"torch.empty","description":"Returns a tensor filled with uninitialized data. The shape of the tensor is defined by the variable argument size.","signature":"torch.empty(*size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False, pin_memory=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.empty"},{"name":"torch.empty_like","description":"Returns an uninitialized tensor with the same size as input. torch.empty_like(input) is equivalent to torch.empty(input.size(), dtype=input.dtype, layout=input.layout, device=input.device).","signature":"torch.empty_like(input, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.empty_like"},{"name":"torch.empty_strided","description":"Returns a tensor filled with uninitialized data. The shape and strides of the tensor is defined by the variable argument size and stride respectively. torch.empty_strided(size, stride) is equivalent to torch.empty(size).as_strided(size, stride).","signature":"torch.empty_strided(size, stride, dtype=None, layout=None, device=None, requires_grad=False, pin_memory=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.empty_strided"},{"name":"torch.eq","description":"Computes element-wise equality","signature":"torch.eq(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.eq"},{"name":"torch.equal","description":"True if two tensors have the same size and elements, False otherwise.","signature":"torch.equal(input, other) → bool","url":"https://pytorch.org/docs/stable/torch.html#torch.equal"},{"name":"torch.erf","description":"Computes the error function of each element. The error function is defined as follows:","signature":"torch.erf(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.erf"},{"name":"torch.erfc","description":"Computes the complementary error function of each element of input. The complementary error function is defined as follows:","signature":"torch.erfc(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.erfc"},{"name":"torch.erfinv","description":"Computes the inverse error function of each element of input. The inverse error function is defined in the range (−1,1)(-1, 1)(−1,1)   as:","signature":"torch.erfinv(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.erfinv"},{"name":"torch.exp","description":"Returns a new tensor with the exponential of the elements of the input tensor input.","signature":"torch.exp(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.exp"},{"name":"torch.expm1","description":"Returns a new tensor with the exponential of the elements minus 1 of input.","signature":"torch.expm1(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.expm1"},{"name":"torch.eye","description":"Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.","signature":"torch.eye(n, m=None, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.eye"},{"name":"torch.fft","description":"Complex-to-complex Discrete Fourier Transform","signature":"torch.fft(input, signal_ndim, normalized=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.fft"},{"name":"torch.flatten","description":"Flattens a contiguous range of dims in a tensor.","signature":"torch.flatten(input, start_dim=0, end_dim=-1) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.flatten"},{"name":"torch.flip","description":"Reverse the order of a n-D tensor along given axis in dims.","signature":"torch.flip(input, dims) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.flip"},{"name":"torch.floor","description":"Returns a new tensor with the floor of the elements of input, the largest integer less than or equal to each element.","signature":"torch.floor(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.floor"},{"name":"torch.floor_divide","description":"Return the division of the inputs rounded down to the nearest integer. See torch.div() for type promotion and broadcasting rules.","signature":"torch.floor_divide(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.floor_divide"},{"name":"torch.fmod","description":"Computes the element-wise remainder of division.","signature":"torch.fmod(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.fmod"},{"name":"torch.frac","description":"Computes the fractional portion of each element in input.","signature":"torch.frac(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.frac"},{"name":"torch.from_numpy","description":"Creates a Tensor from a numpy.ndarray.","signature":"torch.from_numpy(ndarray) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.from_numpy"},{"name":"torch.full","description":"Returns a tensor of size size filled with fill_value.","signature":"torch.full(size, fill_value, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.full"},{"name":"torch.full_like","description":"full_like(input, fill_value, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor","signature":"torch.full_like()","url":"https://pytorch.org/docs/stable/torch.html#torch.full_like"},{"name":"torch.gather","description":"Gathers values along an axis specified by dim.","signature":"torch.gather(input, dim, index, out=None, sparse_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.gather"},{"name":"torch.ge","description":"Computes input≥other\\text{input} \\geq \\text{other}input≥other   element-wise.","signature":"torch.ge(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.ge"},{"name":"torch.geqrf","description":"This is a low-level function for calling LAPACK directly. This function returns a namedtuple (a, tau) as defined in LAPACK documentation for geqrf .","signature":"torch.geqrf(input, out=None) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/torch.html#torch.geqrf"},{"name":"torch.ger","description":"Outer product of input and vec2. If input is a vector of size nnn   and vec2 is a vector of size mmm  , then out must be a matrix of size (n×m)(n \\times m)(n×m)  .","signature":"torch.ger(input, vec2, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.ger"},{"name":"torch.get_default_dtype","description":"Get the current default floating point torch.dtype.","signature":"torch.get_default_dtype() → torch.dtype","url":"https://pytorch.org/docs/stable/torch.html#torch.get_default_dtype"},{"name":"torch.get_rng_state","description":"Returns the random number generator state as a torch.ByteTensor.","signature":"torch.get_rng_state()[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.get_rng_state"},{"name":"torch.gt","description":"Computes input>other\\text{input} > \\text{other}input>other   element-wise.","signature":"torch.gt(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.gt"},{"name":"torch.hamming_window","description":"Hamming window function.","signature":"torch.hamming_window(window_length, periodic=True, alpha=0.54, beta=0.46, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.hamming_window"},{"name":"torch.hann_window","description":"Hann window function.","signature":"torch.hann_window(window_length, periodic=True, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.hann_window"},{"name":"torch.histc","description":"Computes the histogram of a tensor.","signature":"torch.histc(input, bins=100, min=0, max=0, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.histc"},{"name":"torch.ifft","description":"Complex-to-complex Inverse Discrete Fourier Transform","signature":"torch.ifft(input, signal_ndim, normalized=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.ifft"},{"name":"torch.imag","description":"Returns the imaginary part of the input tensor.","signature":"torch.imag(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.imag"},{"name":"torch.index_select","description":"Returns a new tensor which indexes the input tensor along dimension dim using the entries in index which is a LongTensor.","signature":"torch.index_select(input, dim, index, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.index_select"},{"name":"torch.initial_seed","description":"Returns the initial seed for generating random numbers as a Python long.","signature":"torch.initial_seed()[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.initial_seed"},{"name":"torch.inverse","description":"Takes the inverse of the square matrix input. input can be batches of 2D square tensors, in which case this function would return a tensor composed of individual inverses.","signature":"torch.inverse(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.inverse"},{"name":"torch.irfft","description":"Complex-to-real Inverse Discrete Fourier Transform","signature":"torch.irfft(input, signal_ndim, normalized=False, onesided=True, signal_sizes=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.irfft"},{"name":"torch.is_complex","description":"Returns True if the data type of input is a complex data type i.e., one of torch.complex64, and torch.complex128.","signature":"torch.is_complex(input) -> (bool)","url":"https://pytorch.org/docs/stable/torch.html#torch.is_complex"},{"name":"torch.is_floating_point","description":"Returns True if the data type of input is a floating point data type i.e., one of torch.float64, torch.float32 and torch.float16.","signature":"torch.is_floating_point(input) -> (bool)","url":"https://pytorch.org/docs/stable/torch.html#torch.is_floating_point"},{"name":"torch.is_storage","description":"Returns True if obj is a PyTorch storage object.","signature":"torch.is_storage(obj)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.is_storage"},{"name":"torch.is_tensor","description":"Returns True if obj is a PyTorch tensor.","signature":"torch.is_tensor(obj)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.is_tensor"},{"name":"torch.isfinite","description":"Returns a new tensor with boolean elements representing if each element is Finite or not.","signature":"torch.isfinite()","url":"https://pytorch.org/docs/stable/torch.html#torch.isfinite"},{"name":"torch.isinf","description":"Returns a new tensor with boolean elements representing if each element is +/-INF or not.","signature":"torch.isinf()","url":"https://pytorch.org/docs/stable/torch.html#torch.isinf"},{"name":"torch.isnan","description":"Returns a new tensor with boolean elements representing if each element is NaN or not.","signature":"torch.isnan()","url":"https://pytorch.org/docs/stable/torch.html#torch.isnan"},{"name":"torch.kthvalue","description":"Returns a namedtuple (values, indices) where values is the k th smallest element of each row of the input tensor in the given dimension dim. And indices is the index location of each element found.","signature":"torch.kthvalue(input, k, dim=None, keepdim=False, out=None) -> (Tensor, LongTensor)","url":"https://pytorch.org/docs/stable/torch.html#torch.kthvalue"},{"name":"torch.le","description":"Computes input≤other\\text{input} \\leq \\text{other}input≤other   element-wise.","signature":"torch.le(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.le"},{"name":"torch.lerp","description":"Does a linear interpolation of two tensors start (given by input) and end based on a scalar or tensor weight and returns the resulting out tensor.","signature":"torch.lerp(input, end, weight, out=None)","url":"https://pytorch.org/docs/stable/torch.html#torch.lerp"},{"name":"torch.lgamma","description":"Computes the logarithm of the gamma function on input.","signature":"torch.lgamma(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.lgamma"},{"name":"torch.linspace","description":"Returns a one-dimensional tensor of steps equally spaced points between start and end.","signature":"torch.linspace(start, end, steps=100, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.linspace"},{"name":"torch.lobpcg","description":"Find the k largest (or smallest) eigenvalues and the corresponding eigenvectors of a symmetric positive defined generalized eigenvalue problem using matrix-free LOBPCG methods.","signature":"torch.lobpcg(A, k=None, B=None, X=None, n=None, iK=None, niter=None, tol=None, largest=None, method=None, tracker=None, ortho_iparams=None, ortho_fparams=None, ortho_bparams=None)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.lobpcg"},{"name":"torch.log","description":"Returns a new tensor with the natural logarithm of the elements of input.","signature":"torch.log(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.log"},{"name":"torch.log10","description":"Returns a new tensor with the logarithm to the base 10 of the elements of input.","signature":"torch.log10(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.log10"},{"name":"torch.log1p","description":"Returns a new tensor with the natural logarithm of (1 + input).","signature":"torch.log1p(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.log1p"},{"name":"torch.log2","description":"Returns a new tensor with the logarithm to the base 2 of the elements of input.","signature":"torch.log2(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.log2"},{"name":"torch.logdet","description":"Calculates log determinant of a square matrix or batches of square matrices.","signature":"torch.logdet(input) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.logdet"},{"name":"torch.logical_and","description":"Computes the element-wise logical AND of the given input tensors. Zeros are treated as False and nonzeros are treated as True.","signature":"torch.logical_and(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.logical_and"},{"name":"torch.logical_not","description":"Computes the element-wise logical NOT of the given input tensor. If not specified, the output tensor will have the bool dtype. If the input tensor is not a bool tensor, zeros are treated as False and non-zeros are treated as True.","signature":"torch.logical_not(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.logical_not"},{"name":"torch.logical_or","description":"Computes the element-wise logical OR of the given input tensors. Zeros are treated as False and nonzeros are treated as True.","signature":"torch.logical_or(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.logical_or"},{"name":"torch.logical_xor","description":"Computes the element-wise logical XOR of the given input tensors. Zeros are treated as False and nonzeros are treated as True.","signature":"torch.logical_xor(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.logical_xor"},{"name":"torch.logspace","description":"Returns a one-dimensional tensor of steps points logarithmically spaced with base base between basestart{\\text{base}}^{\\text{start}}basestart   and baseend{\\text{base}}^{\\text{end}}baseend  .","signature":"torch.logspace(start, end, steps=100, base=10.0, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.logspace"},{"name":"torch.logsumexp","description":"Returns the log of summed exponentials of each row of the input tensor in the given dimension dim. The computation is numerically stabilized.","signature":"torch.logsumexp(input, dim, keepdim=False, out=None)","url":"https://pytorch.org/docs/stable/torch.html#torch.logsumexp"},{"name":"torch.lstsq","description":"Computes the solution to the least squares and least norm problems for a full rank matrix AAA   of size (m×n)(m \\times n)(m×n)   and a matrix BBB   of size (m×k)(m \\times k)(m×k)  .","signature":"torch.lstsq(input, A, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.lstsq"},{"name":"torch.lt","description":"Computes input<other\\text{input} < \\text{other}input<other   element-wise.","signature":"torch.lt(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.lt"},{"name":"torch.lu","description":"Computes the LU factorization of a matrix or batches of matrices A. Returns a tuple containing the LU factorization and pivots of A.  Pivoting is done if pivot is set to True.","signature":"torch.lu(*args, **kwargs)","url":"https://pytorch.org/docs/stable/torch.html#torch.lu"},{"name":"torch.lu_solve","description":"Returns the LU solve of the linear system Ax=bAx = bAx=b   using the partially pivoted LU factorization of A from torch.lu().","signature":"torch.lu_solve(input, LU_data, LU_pivots, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.lu_solve"},{"name":"torch.lu_unpack","description":"Unpacks the data and pivots from a LU factorization of a tensor.","signature":"torch.lu_unpack(LU_data, LU_pivots, unpack_data=True, unpack_pivots=True)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.lu_unpack"},{"name":"torch.manual_seed","description":"Sets the seed for generating random numbers. Returns a torch.Generator object.","signature":"torch.manual_seed(seed)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.manual_seed"},{"name":"torch.masked_select","description":"Returns a new 1-D tensor which indexes the input tensor according to the boolean mask mask which is a BoolTensor.","signature":"torch.masked_select(input, mask, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.masked_select"},{"name":"torch.matmul","description":"Matrix product of two tensors.","signature":"torch.matmul(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.matmul"},{"name":"torch.matrix_power","description":"Returns the matrix raised to the power n for square matrices. For batch of matrices, each individual matrix is raised to the power n.","signature":"torch.matrix_power(input, n) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.matrix_power"},{"name":"torch.matrix_rank","description":"Returns the numerical rank of a 2-D tensor. The method to compute the matrix rank is done using SVD by default. If symmetric is True, then input is assumed to be symmetric, and the computation of the rank is done by obtaining the eigenvalues.","signature":"torch.matrix_rank(input, tol=None, symmetric=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.matrix_rank"},{"name":"torch.max","description":"  torch.max(input) → Tensor ","signature":"torch.max()","url":"https://pytorch.org/docs/stable/torch.html#torch.max"},{"name":"torch.max","description":"","signature":"torch.max(input) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.max","description":"","signature":"torch.max(input, dim, keepdim=False, out=None) -> (Tensor, LongTensor)","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.max","description":"","signature":"torch.max(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.mean","description":"  torch.mean(input) → Tensor ","signature":"torch.mean()","url":"https://pytorch.org/docs/stable/torch.html#torch.mean"},{"name":"torch.mean","description":"","signature":"torch.mean(input) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.mean","description":"","signature":"torch.mean(input, dim, keepdim=False, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.median","description":"  torch.median(input) → Tensor ","signature":"torch.median()","url":"https://pytorch.org/docs/stable/torch.html#torch.median"},{"name":"torch.median","description":"","signature":"torch.median(input) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.median","description":"","signature":"torch.median(input, dim=-1, keepdim=False, out=None) -> (Tensor, LongTensor)","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.meshgrid","description":"Take NNN   tensors, each of which can be either scalar or 1-dimensional vector, and create NNN   N-dimensional grids, where the iii   th grid is defined by expanding the iii   th input over dimensions defined by other inputs.","signature":"torch.meshgrid(*tensors)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.meshgrid"},{"name":"torch.min","description":"  torch.min(input) → Tensor ","signature":"torch.min()","url":"https://pytorch.org/docs/stable/torch.html#torch.min"},{"name":"torch.min","description":"","signature":"torch.min(input) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.min","description":"","signature":"torch.min(input, dim, keepdim=False, out=None) -> (Tensor, LongTensor)","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.min","description":"","signature":"torch.min(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.mm","description":"Performs a matrix multiplication of the matrices input and mat2.","signature":"torch.mm(input, mat2, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.mm"},{"name":"torch.mode","description":"Returns a namedtuple (values, indices) where values is the mode value of each row of the input tensor in the given dimension dim, i.e. a value which appears most often in that row, and indices is the index location of each mode value found.","signature":"torch.mode(input, dim=-1, keepdim=False, out=None) -> (Tensor, LongTensor)","url":"https://pytorch.org/docs/stable/torch.html#torch.mode"},{"name":"torch.mul","description":"  torch.mul(input, other, out=None) ","signature":"torch.mul()","url":"https://pytorch.org/docs/stable/torch.html#torch.mul"},{"name":"torch.mul","description":"","signature":"torch.mul(input, other, out=None)","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.mul","description":"","signature":"torch.mul(input, other, out=None)","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.multinomial","description":"Returns a tensor where each row contains num_samples indices sampled from the multinomial probability distribution located in the corresponding row of tensor input.","signature":"torch.multinomial(input, num_samples, replacement=False, *, generator=None, out=None) → LongTensor","url":"https://pytorch.org/docs/stable/torch.html#torch.multinomial"},{"name":"torch.mv","description":"Performs a matrix-vector product of the matrix input and the vector vec.","signature":"torch.mv(input, vec, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.mv"},{"name":"torch.mvlgamma","description":"Computes the multivariate log-gamma function) with dimension ppp   element-wise, given by","signature":"torch.mvlgamma(input, p) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.mvlgamma"},{"name":"torch.narrow","description":"Returns a new tensor that is a narrowed version of input tensor. The dimension dim is input from start to start + length. The returned tensor and input tensor share the same underlying storage.","signature":"torch.narrow(input, dim, start, length) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.narrow"},{"name":"torch.ne","description":"Computes input≠otherinput \\neq otherinput​=other   element-wise.","signature":"torch.ne(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.ne"},{"name":"torch.neg","description":"Returns a new tensor with the negative of the elements of input.","signature":"torch.neg(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.neg"},{"name":"torch.nonzero","description":" Note torch.nonzero(..., as_tuple=False) (default) returns a 2-D tensor where each row is the index for a nonzero value. torch.nonzero(..., as_tuple=True) returns a tuple of 1-D index tensors, allowing for advanced indexing, so x[x.nonzero(as_tuple=True)] gives all nonzero values of tensor x. Of the returned tuple, each index tensor contains nonzero indices for a certain dimension. See below for more details on the two behaviors. ","signature":"torch.nonzero(input, *, out=None, as_tuple=False) → LongTensor or tuple of LongTensors","url":"https://pytorch.org/docs/stable/torch.html#torch.nonzero"},{"name":"torch.norm","description":"Returns the matrix norm or vector norm of a given tensor.","signature":"torch.norm(input, p='fro', dim=None, keepdim=False, out=None, dtype=None)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.norm"},{"name":"torch.normal","description":"  torch.normal(mean, std, *, generator=None, out=None) → Tensor ","signature":"torch.normal()","url":"https://pytorch.org/docs/stable/torch.html#torch.normal"},{"name":"torch.normal","description":"","signature":"torch.normal(mean, std, *, generator=None, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.normal","description":"","signature":"torch.normal(mean=0.0, std, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.normal","description":"","signature":"torch.normal(mean, std=1.0, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.normal","description":"","signature":"torch.normal(mean, std, size, *, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.numel","description":"Returns the total number of elements in the input tensor.","signature":"torch.numel(input) → int","url":"https://pytorch.org/docs/stable/torch.html#torch.numel"},{"name":"torch.ones","description":"Returns a tensor filled with the scalar value 1, with the shape defined by the variable argument size.","signature":"torch.ones(*size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.ones"},{"name":"torch.ones_like","description":"Returns a tensor filled with the scalar value 1, with the same size as input. torch.ones_like(input) is equivalent to torch.ones(input.size(), dtype=input.dtype, layout=input.layout, device=input.device).","signature":"torch.ones_like(input, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.ones_like"},{"name":"torch.orgqr","description":"Computes the orthogonal matrix Q of a QR factorization, from the (input, input2) tuple returned by torch.geqrf().","signature":"torch.orgqr(input, input2) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.orgqr"},{"name":"torch.ormqr","description":"Multiplies mat (given by input3) by the orthogonal Q matrix of the QR factorization formed by torch.geqrf() that is represented by (a, tau) (given by (input, input2)).","signature":"torch.ormqr(input, input2, input3, left=True, transpose=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.ormqr"},{"name":"torch.pca_lowrank","description":"Performs linear Principal Component Analysis (PCA) on a low-rank matrix, batches of such matrices, or sparse matrix.","signature":"torch.pca_lowrank(A, q=None, center=True, niter=2)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.pca_lowrank"},{"name":"torch.pinverse","description":"Calculates the pseudo-inverse (also known as the Moore-Penrose inverse) of a 2D tensor. Please look at Moore-Penrose inverse for more details","signature":"torch.pinverse(input, rcond=1e-15) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.pinverse"},{"name":"torch.poisson","description":"Returns a tensor of the same size as input with each element sampled from a Poisson distribution with rate parameter given by the corresponding element in input i.e.,","signature":"torch.poisson(input *, generator=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.poisson"},{"name":"torch.polygamma","description":"Computes the nthn^{th}nth   derivative of the digamma function on input. n≥0n \\geq 0n≥0   is called the order of the polygamma function.","signature":"torch.polygamma(n, input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.polygamma"},{"name":"torch.pow","description":"  torch.pow(input, exponent, out=None) → Tensor ","signature":"torch.pow()","url":"https://pytorch.org/docs/stable/torch.html#torch.pow"},{"name":"torch.pow","description":"","signature":"torch.pow(input, exponent, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.pow","description":"","signature":"torch.pow(self, exponent, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.prod","description":"  torch.prod(input, dtype=None) → Tensor ","signature":"torch.prod()","url":"https://pytorch.org/docs/stable/torch.html#torch.prod"},{"name":"torch.prod","description":"","signature":"torch.prod(input, dtype=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.prod","description":"","signature":"torch.prod(input, dim, keepdim=False, dtype=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.promote_types","description":"Returns the torch.dtype with the smallest size and scalar kind that is not smaller nor of lower kind than either type1 or type2. See type promotion documentation for more information on the type promotion logic.","signature":"torch.promote_types(type1, type2) → dtype","url":"https://pytorch.org/docs/stable/torch.html#torch.promote_types"},{"name":"torch.qr","description":"Computes the QR decomposition of a matrix or a batch of matrices input, and returns a namedtuple (Q, R) of tensors such that input=QR\\text{input} = Q Rinput=QR   with QQQ   being an orthogonal matrix or batch of orthogonal matrices and RRR   being an upper triangular matrix or batch of upper triangular matrices.","signature":"torch.qr(input, some=True, out=None) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/torch.html#torch.qr"},{"name":"torch.quantize_per_channel","description":"Converts a float tensor to per-channel quantized tensor with given scales and zero points.","signature":"torch.quantize_per_channel(input, scales, zero_points, axis, dtype) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.quantize_per_channel"},{"name":"torch.quantize_per_tensor","description":"Converts a float tensor to quantized tensor with given scale and zero point.","signature":"torch.quantize_per_tensor(input, scale, zero_point, dtype) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.quantize_per_tensor"},{"name":"torch.rand","description":"Returns a tensor filled with random numbers from a uniform distribution on the interval [0,1)[0, 1)[0,1)  ","signature":"torch.rand(*size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.rand"},{"name":"torch.rand_like","description":"Returns a tensor with the same size as input that is filled with random numbers from a uniform distribution on the interval [0,1)[0, 1)[0,1)  . torch.rand_like(input) is equivalent to torch.rand(input.size(), dtype=input.dtype, layout=input.layout, device=input.device).","signature":"torch.rand_like(input, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.rand_like"},{"name":"torch.randint","description":" randint(low=0, high, size, *, generator=None, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor  ","signature":"torch.randint()","url":"https://pytorch.org/docs/stable/torch.html#torch.randint"},{"name":"torch.randint_like","description":"randint_like(input, low=0, high, dtype=None, layout=torch.strided, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor","signature":"torch.randint_like()","url":"https://pytorch.org/docs/stable/torch.html#torch.randint_like"},{"name":"torch.randn","description":"Returns a tensor filled with random numbers from a normal distribution with mean 0 and variance 1 (also called the standard normal distribution).","signature":"torch.randn(*size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.randn"},{"name":"torch.randn_like","description":"Returns a tensor with the same size as input that is filled with random numbers from a normal distribution with mean 0 and variance 1. torch.randn_like(input) is equivalent to torch.randn(input.size(), dtype=input.dtype, layout=input.layout, device=input.device).","signature":"torch.randn_like(input, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.randn_like"},{"name":"torch.randperm","description":"Returns a random permutation of integers from 0 to n - 1.","signature":"torch.randperm(n, out=None, dtype=torch.int64, layout=torch.strided, device=None, requires_grad=False) → LongTensor","url":"https://pytorch.org/docs/stable/torch.html#torch.randperm"},{"name":"torch.range","description":"Returns a 1-D tensor of size ⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1   with values from start to end with step step. Step is the gap between two values in the tensor.","signature":"torch.range(start=0, end, step=1, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.range"},{"name":"torch.real","description":"Returns the real part of the input tensor. If input is a real (non-complex) tensor, this function just returns it.","signature":"torch.real(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.real"},{"name":"torch.reciprocal","description":"Returns a new tensor with the reciprocal of the elements of input","signature":"torch.reciprocal(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.reciprocal"},{"name":"torch.remainder","description":"Computes the element-wise remainder of division.","signature":"torch.remainder(input, other, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.remainder"},{"name":"torch.renorm","description":"Returns a tensor where each sub-tensor of input along dimension dim is normalized such that the p-norm of the sub-tensor is lower than the value maxnorm","signature":"torch.renorm(input, p, dim, maxnorm, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.renorm"},{"name":"torch.repeat_interleave","description":"  torch.repeat_interleave(input, repeats, dim=None) → Tensor ","signature":"torch.repeat_interleave()","url":"https://pytorch.org/docs/stable/torch.html#torch.repeat_interleave"},{"name":"torch.repeat_interleave","description":"","signature":"torch.repeat_interleave(input, repeats, dim=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.repeat_interleave","description":"","signature":"torch.repeat_interleave(repeats) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.reshape","description":"Returns a tensor with the same data and number of elements as input, but with the specified shape. When possible, the returned tensor will be a view of input. Otherwise, it will be a copy. Contiguous inputs and inputs with compatible strides can be reshaped without copying, but you should not depend on the copying vs. viewing behavior.","signature":"torch.reshape(input, shape) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.reshape"},{"name":"torch.result_type","description":"Returns the torch.dtype that would result from performing an arithmetic operation on the provided input tensors. See type promotion documentation for more information on the type promotion logic.","signature":"torch.result_type(tensor1, tensor2) → dtype","url":"https://pytorch.org/docs/stable/torch.html#torch.result_type"},{"name":"torch.rfft","description":"Real-to-complex Discrete Fourier Transform","signature":"torch.rfft(input, signal_ndim, normalized=False, onesided=True) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.rfft"},{"name":"torch.roll","description":"Roll the tensor along the given dimension(s). Elements that are shifted beyond the last position are re-introduced at the first position. If a dimension is not specified, the tensor will be flattened before rolling and then restored to the original shape.","signature":"torch.roll(input, shifts, dims=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.roll"},{"name":"torch.rot90","description":"Rotate a n-D tensor by 90 degrees in the plane specified by dims axis. Rotation direction is from the first towards the second axis if k > 0, and from the second towards the first for k < 0.","signature":"torch.rot90(input, k, dims) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.rot90"},{"name":"torch.round","description":"Returns a new tensor with each of the elements of input rounded to the closest integer.","signature":"torch.round(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.round"},{"name":"torch.rsqrt","description":"Returns a new tensor with the reciprocal of the square-root of each of the elements of input.","signature":"torch.rsqrt(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.rsqrt"},{"name":"torch.seed","description":"Sets the seed for generating random numbers to a non-deterministic random number. Returns a 64 bit number used to seed the RNG.","signature":"torch.seed()[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.seed"},{"name":"torch.set_default_dtype","description":"Sets the default floating point dtype to d. This type will be used as default floating point type for type inference in torch.tensor().","signature":"torch.set_default_dtype(d)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.set_default_dtype"},{"name":"torch.set_default_tensor_type","description":"Sets the default torch.Tensor type to floating point tensor type t. This type will also be used as default floating point type for type inference in torch.tensor().","signature":"torch.set_default_tensor_type(t)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.set_default_tensor_type"},{"name":"torch.set_flush_denormal","description":"Disables denormal floating numbers on CPU.","signature":"torch.set_flush_denormal(mode) → bool","url":"https://pytorch.org/docs/stable/torch.html#torch.set_flush_denormal"},{"name":"torch.set_printoptions","description":"Set options for printing. Items shamelessly taken from NumPy","signature":"torch.set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, profile=None, sci_mode=None)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.set_printoptions"},{"name":"torch.set_rng_state","description":"Sets the random number generator state.","signature":"torch.set_rng_state(new_state)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.set_rng_state"},{"name":"torch.sigmoid","description":"Returns a new tensor with the sigmoid of the elements of input.","signature":"torch.sigmoid(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.sigmoid"},{"name":"torch.sign","description":"Returns a new tensor with the signs of the elements of input.","signature":"torch.sign(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.sign"},{"name":"torch.sin","description":"Returns a new tensor with the sine of the elements of input.","signature":"torch.sin(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.sin"},{"name":"torch.sinh","description":"Returns a new tensor with the hyperbolic sine of the elements of input.","signature":"torch.sinh(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.sinh"},{"name":"torch.slogdet","description":"Calculates the sign and log absolute value of the determinant(s) of a square matrix or batches of square matrices.","signature":"torch.slogdet(input) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/torch.html#torch.slogdet"},{"name":"torch.solve","description":"This function returns the solution to the system of linear equations represented by AX=BAX = BAX=B   and the LU factorization of A, in order as a namedtuple solution, LU.","signature":"torch.solve(input, A, out=None) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/torch.html#torch.solve"},{"name":"torch.sort","description":"Sorts the elements of the input tensor along a given dimension in ascending order by value.","signature":"torch.sort(input, dim=-1, descending=False, out=None) -> (Tensor, LongTensor)","url":"https://pytorch.org/docs/stable/torch.html#torch.sort"},{"name":"torch.sparse_coo_tensor","description":"Constructs a sparse tensors in COO(rdinate) format with non-zero elements at the given indices with the given values. A sparse tensor can be uncoalesced, in that case, there are duplicate coordinates in the indices, and the value at that index is the sum of all duplicate value entries: torch.sparse.","signature":"torch.sparse_coo_tensor(indices, values, size=None, dtype=None, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.sparse_coo_tensor"},{"name":"torch.split","description":"Splits the tensor into chunks. Each chunk is a view of the original tensor.","signature":"torch.split(tensor, split_size_or_sections, dim=0)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.split"},{"name":"torch.sqrt","description":"Returns a new tensor with the square-root of the elements of input.","signature":"torch.sqrt(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.sqrt"},{"name":"torch.square","description":"Returns a new tensor with the square of the elements of input.","signature":"torch.square(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.square"},{"name":"torch.squeeze","description":"Returns a tensor with all the dimensions of input of size 1 removed.","signature":"torch.squeeze(input, dim=None, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.squeeze"},{"name":"torch.stack","description":"Concatenates sequence of tensors along a new dimension.","signature":"torch.stack(tensors, dim=0, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.stack"},{"name":"torch.std","description":"  torch.std(input, unbiased=True) → Tensor ","signature":"torch.std()","url":"https://pytorch.org/docs/stable/torch.html#torch.std"},{"name":"torch.std","description":"","signature":"torch.std(input, unbiased=True) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.std","description":"","signature":"torch.std(input, dim, unbiased=True, keepdim=False, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.std_mean","description":"  torch.std_mean(input, unbiased=True) -> (Tensor, Tensor) ","signature":"torch.std_mean()","url":"https://pytorch.org/docs/stable/torch.html#torch.std_mean"},{"name":"torch.std_mean","description":"","signature":"torch.std_mean(input, unbiased=True) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.std_mean","description":"","signature":"torch.std_mean(input, dim, unbiased=True, keepdim=False) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.stft","description":"Short-time Fourier transform (STFT).","signature":"torch.stft(input, n_fft, hop_length=None, win_length=None, window=None, center=True, pad_mode='reflect', normalized=False, onesided=True)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.stft"},{"name":"torch.sum","description":"  torch.sum(input, dtype=None) → Tensor ","signature":"torch.sum()","url":"https://pytorch.org/docs/stable/torch.html#torch.sum"},{"name":"torch.sum","description":"","signature":"torch.sum(input, dtype=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.sum","description":"","signature":"torch.sum(input, dim, keepdim=False, dtype=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.svd","description":"This function returns a namedtuple (U, S, V) which is the singular value decomposition of a input real matrix or batches of real matrices input such that input=U×diag(S)×VTinput = U \\times diag(S) \\times V^Tinput=U×diag(S)×VT  .","signature":"torch.svd(input, some=True, compute_uv=True, out=None) -> (Tensor, Tensor, Tensor)","url":"https://pytorch.org/docs/stable/torch.html#torch.svd"},{"name":"torch.svd_lowrank","description":"Return the singular value decomposition (U, S, V) of a matrix, batches of matrices, or a sparse matrix AAA   such that . In case MMM   is given, then SVD is computed for the matrix A−MA - MA−M  .","signature":"torch.svd_lowrank(A, q=6, niter=2, M=None)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.svd_lowrank"},{"name":"torch.symeig","description":"This function returns eigenvalues and eigenvectors of a real symmetric matrix input or a batch of real symmetric matrices, represented by a namedtuple (eigenvalues, eigenvectors).","signature":"torch.symeig(input, eigenvectors=False, upper=True, out=None) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/torch.html#torch.symeig"},{"name":"torch.t","description":"Expects input to be <= 2-D tensor and transposes dimensions 0 and 1.","signature":"torch.t(input) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.t"},{"name":"torch.take","description":"Returns a new tensor with the elements of input at the given indices. The input tensor is treated as if it were viewed as a 1-D tensor. The result takes the same shape as the indices.","signature":"torch.take(input, index) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.take"},{"name":"torch.tan","description":"Returns a new tensor with the tangent of the elements of input.","signature":"torch.tan(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.tan"},{"name":"torch.tanh","description":"Returns a new tensor with the hyperbolic tangent of the elements of input.","signature":"torch.tanh(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.tanh"},{"name":"torch.tensor","description":"Constructs a tensor with data.","signature":"torch.tensor(data, dtype=None, device=None, requires_grad=False, pin_memory=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.tensor"},{"name":"torch.tensordot","description":"Returns a contraction of a and b over multiple dimensions.","signature":"torch.tensordot(a, b, dims=2)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.tensordot"},{"name":"torch.topk","description":"Returns the k largest elements of the given input tensor along a given dimension.","signature":"torch.topk(input, k, dim=None, largest=True, sorted=True, out=None) -> (Tensor, LongTensor)","url":"https://pytorch.org/docs/stable/torch.html#torch.topk"},{"name":"torch.trace","description":"Returns the sum of the elements of the diagonal of the input 2-D matrix.","signature":"torch.trace(input) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.trace"},{"name":"torch.transpose","description":"Returns a tensor that is a transposed version of input. The given dimensions dim0 and dim1 are swapped.","signature":"torch.transpose(input, dim0, dim1) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.transpose"},{"name":"torch.trapz","description":"  torch.trapz(y, x, *, dim=-1) → Tensor ","signature":"torch.trapz()","url":"https://pytorch.org/docs/stable/torch.html#torch.trapz"},{"name":"torch.trapz","description":"","signature":"torch.trapz(y, x, *, dim=-1) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.trapz","description":"","signature":"torch.trapz(y, *, dx=1, dim=-1) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.triangular_solve","description":"Solves a system of equations with a triangular coefficient matrix AAA   and multiple right-hand sides bbb  .","signature":"torch.triangular_solve(input, A, upper=True, transpose=False, unitriangular=False) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/torch.html#torch.triangular_solve"},{"name":"torch.tril","description":"Returns the lower triangular part of the matrix (2-D tensor) or batch of matrices input, the other elements of the result tensor out are set to 0.","signature":"torch.tril(input, diagonal=0, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.tril"},{"name":"torch.tril_indices","description":"Returns the indices of the lower triangular part of a row-by- col matrix in a 2-by-N Tensor, where the first row contains row coordinates of all indices and the second row contains column coordinates. Indices are ordered based on rows and then columns.","signature":"torch.tril_indices(row, col, offset=0, dtype=torch.long, device='cpu', layout=torch.strided) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.tril_indices"},{"name":"torch.triu","description":"Returns the upper triangular part of a matrix (2-D tensor) or batch of matrices input, the other elements of the result tensor out are set to 0.","signature":"torch.triu(input, diagonal=0, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.triu"},{"name":"torch.triu_indices","description":"Returns the indices of the upper triangular part of a row by col matrix in a 2-by-N Tensor, where the first row contains row coordinates of all indices and the second row contains column coordinates. Indices are ordered based on rows and then columns.","signature":"torch.triu_indices(row, col, offset=0, dtype=torch.long, device='cpu', layout=torch.strided) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.triu_indices"},{"name":"torch.true_divide","description":"Performs “true division” that always computes the division in floating point. Analogous to division in Python 3 and equivalent to torch.div() except when both inputs have bool or integer scalar types, in which case they are cast to the default (floating) scalar type before the division.","signature":"torch.true_divide(dividend, divisor) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.true_divide"},{"name":"torch.trunc","description":"Returns a new tensor with the truncated integer values of the elements of input.","signature":"torch.trunc(input, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.trunc"},{"name":"torch.unbind","description":"Removes a tensor dimension.","signature":"torch.unbind(input, dim=0) → seq","url":"https://pytorch.org/docs/stable/torch.html#torch.unbind"},{"name":"torch.unique","description":"Returns the unique elements of the input tensor.","signature":"torch.unique(input, sorted=True, return_inverse=False, return_counts=False, dim=None)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.unique"},{"name":"torch.unique_consecutive","description":"Eliminates all but the first element from every consecutive group of equivalent elements.","signature":"torch.unique_consecutive(input, return_inverse=False, return_counts=False, dim=None)[source]","url":"https://pytorch.org/docs/stable/torch.html#torch.unique_consecutive"},{"name":"torch.unsqueeze","description":"Returns a new tensor with a dimension of size one inserted at the specified position.","signature":"torch.unsqueeze(input, dim) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.unsqueeze"},{"name":"torch.var","description":"  torch.var(input, unbiased=True) → Tensor ","signature":"torch.var()","url":"https://pytorch.org/docs/stable/torch.html#torch.var"},{"name":"torch.var","description":"","signature":"torch.var(input, unbiased=True) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.var","description":"","signature":"torch.var(input, dim, keepdim=False, unbiased=True, out=None) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.var_mean","description":"  torch.var_mean(input, unbiased=True) -> (Tensor, Tensor) ","signature":"torch.var_mean()","url":"https://pytorch.org/docs/stable/torch.html#torch.var_mean"},{"name":"torch.var_mean","description":"","signature":"torch.var_mean(input, unbiased=True) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.var_mean","description":"","signature":"torch.var_mean(input, dim, keepdim=False, unbiased=True) -> (Tensor, Tensor)","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.where","description":"  torch.where(condition, x, y) → Tensor ","signature":"torch.where()","url":"https://pytorch.org/docs/stable/torch.html#torch.where"},{"name":"torch.where","description":"","signature":"torch.where(condition, x, y) → Tensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.where","description":"","signature":"torch.where(condition) → tuple of LongTensor","url":"https://pytorch.org/docs/stable/torch.htmlundefined"},{"name":"torch.zeros","description":"Returns a tensor filled with the scalar value 0, with the shape defined by the variable argument size.","signature":"torch.zeros(*size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.zeros"},{"name":"torch.zeros_like","description":"Returns a tensor filled with the scalar value 0, with the same size as input. torch.zeros_like(input) is equivalent to torch.zeros(input.size(), dtype=input.dtype, layout=input.layout, device=input.device).","signature":"torch.zeros_like(input, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) → Tensor","url":"https://pytorch.org/docs/stable/torch.html#torch.zeros_like"}]