name,description,signature,url
"COO","A sparse multidimensional array.","COO(coords[\, data\, shape\, has_duplicates\, …])","https://sparse.pydata.org/en/latest/generated/sparse.COO.html#sparse.COO"
"DOK","A class for building sparse multidimensional arrays.","DOK(shape[\, data\, dtype\, fill_value])","https://sparse.pydata.org/en/latest/generated/sparse.DOK.html#sparse.DOK"
"GCXS","A sparse multidimensional array.","GCXS(arg[\, shape\, compressed_axes\, prune\, …])","https://sparse.pydata.org/en/latest/generated/sparse.GCXS.html#sparse.GCXS"
"SparseArray","An abstract base class for all the sparse array classes.","SparseArray(shape[\, fill_value])","https://sparse.pydata.org/en/latest/generated/sparse.SparseArray.html#sparse.SparseArray"
"argwhere","Find the indices of array elements that are non-zero\, grouped by element.","argwhere(a)","https://sparse.pydata.org/en/latest/generated/sparse.argwhere.html#sparse.argwhere"
"as_coo","Converts any given format to COO.","as_coo(x[\, shape\, fill_value\, idx_dtype])","https://sparse.pydata.org/en/latest/generated/sparse.as_coo.html#sparse.as_coo"
"clip","Clip (limit) the values in the array.","clip(a[\, a_min\, a_max\, out])","https://sparse.pydata.org/en/latest/generated/sparse.clip.html#sparse.clip"
"concatenate","Concatenate the input arrays along the given dimension.","concatenate(arrays[\, axis\, compressed_axes])","https://sparse.pydata.org/en/latest/generated/sparse.concatenate.html#sparse.concatenate"
"diagonal","Extract diagonal from a COO array.","diagonal(a[\, offset\, axis1\, axis2])","https://sparse.pydata.org/en/latest/generated/sparse.diagonal.html#sparse.diagonal"
"diagonalize","Diagonalize a COO array.","diagonalize(a[\, axis])","https://sparse.pydata.org/en/latest/generated/sparse.diagonalize.html#sparse.diagonalize"
"dot","Perform the equivalent of numpy.dot on two arrays.","dot(a\, b)","https://sparse.pydata.org/en/latest/generated/sparse.dot.html#sparse.dot"
"elemwise","Apply a function to any number of arguments.","elemwise(func\, *args\, **kwargs)","https://sparse.pydata.org/en/latest/generated/sparse.elemwise.html#sparse.elemwise"
"eye","Return a 2-D array in the specified format with ones on the diagonal and zeros elsewhere.","eye(N[\, M\, k\, dtype\, format\, compressed_axes])","https://sparse.pydata.org/en/latest/generated/sparse.eye.html#sparse.eye"
"full","Return a SparseArray of given shape and type\, filled with fill_value.","full(shape\, fill_value[\, dtype\, format\, …])","https://sparse.pydata.org/en/latest/generated/sparse.full.html#sparse.full"
"full_like","Return a full array with the same shape and type as a given array.","full_like(a\, fill_value[\, dtype\, shape\, …])","https://sparse.pydata.org/en/latest/generated/sparse.full_like.html#sparse.full_like"
"isneginf","Test element-wise for negative infinity\, return result as sparse bool array.","isneginf(x[\, out])","https://sparse.pydata.org/en/latest/generated/sparse.isneginf.html#sparse.isneginf"
"isposinf","Test element-wise for positive infinity\, return result as sparse bool array.","isposinf(x[\, out])","https://sparse.pydata.org/en/latest/generated/sparse.isposinf.html#sparse.isposinf"
"kron","Kronecker product of 2 sparse arrays.","kron(a\, b)","https://sparse.pydata.org/en/latest/generated/sparse.kron.html#sparse.kron"
"load_npz","Load a sparse matrix in numpy’s .npz format from disk.","load_npz(filename)","https://sparse.pydata.org/en/latest/generated/sparse.load_npz.html#sparse.load_npz"
"matmul","Perform the equivalent of numpy.matmul on two arrays.","matmul(a\, b)","https://sparse.pydata.org/en/latest/generated/sparse.matmul.html#sparse.matmul"
"moveaxis","Move axes of an array to new positions.","moveaxis(a\, source\, destination)","https://sparse.pydata.org/en/latest/generated/sparse.moveaxis.html#sparse.moveaxis"
"nanmax","Maximize along the given axes\, skipping NaN values.","nanmax(x[\, axis\, keepdims\, dtype\, out])","https://sparse.pydata.org/en/latest/generated/sparse.nanmax.html#sparse.nanmax"
"nanmean","Performs a NaN skipping mean operation along the given axes.","nanmean(x[\, axis\, keepdims\, dtype\, out])","https://sparse.pydata.org/en/latest/generated/sparse.nanmean.html#sparse.nanmean"
"nanmin","Minimize along the given axes\, skipping NaN values.","nanmin(x[\, axis\, keepdims\, dtype\, out])","https://sparse.pydata.org/en/latest/generated/sparse.nanmin.html#sparse.nanmin"
"nanprod","Performs a product operation along the given axes\, skipping NaN values.","nanprod(x[\, axis\, keepdims\, dtype\, out])","https://sparse.pydata.org/en/latest/generated/sparse.nanprod.html#sparse.nanprod"
"nanreduce","Performs an NaN skipping reduction on this array.","nanreduce(x\, method[\, identity\, axis\, keepdims])","https://sparse.pydata.org/en/latest/generated/sparse.nanreduce.html#sparse.nanreduce"
"nansum","Performs a NaN skipping sum operation along the given axes.","nansum(x[\, axis\, keepdims\, dtype\, out])","https://sparse.pydata.org/en/latest/generated/sparse.nansum.html#sparse.nansum"
"ones","Return a SparseArray of given shape and type\, filled with ones.","ones(shape[\, dtype\, format\, compressed_axes])","https://sparse.pydata.org/en/latest/generated/sparse.ones.html#sparse.ones"
"ones_like","Return a SparseArray of ones with the same shape and type as a.","ones_like(a[\, dtype\, shape\, format\, …])","https://sparse.pydata.org/en/latest/generated/sparse.ones_like.html#sparse.ones_like"
"outer","Return outer product of two sparse arrays.","outer(a\, b[\, out])","https://sparse.pydata.org/en/latest/generated/sparse.outer.html#sparse.outer"
"pad","Performs the equivalent of numpy.pad for SparseArray.","pad(array\, pad_width[\, mode])","https://sparse.pydata.org/en/latest/generated/sparse.pad.html#sparse.pad"
"random","Generate a random sparse multidimensional array","random(shape[\, density\, nnz\, random_state\, …])","https://sparse.pydata.org/en/latest/generated/sparse.random.html#sparse.random"
"result_type","Returns the type that results from applying the NumPy type promotion rules to the arguments.","result_type(*arrays_and_dtypes)","https://sparse.pydata.org/en/latest/generated/sparse.result_type.html#sparse.result_type"
"roll","Shifts elements of an array along specified axis.","roll(a\, shift[\, axis])","https://sparse.pydata.org/en/latest/generated/sparse.roll.html#sparse.roll"
"save_npz","Save a sparse matrix to disk in numpy’s .npz format.","save_npz(filename\, matrix[\, compressed])","https://sparse.pydata.org/en/latest/generated/sparse.save_npz.html#sparse.save_npz"
"stack","Stack the input arrays along the given dimension.","stack(arrays[\, axis\, compressed_axes])","https://sparse.pydata.org/en/latest/generated/sparse.stack.html#sparse.stack"
"tensordot","Perform the equivalent of numpy.tensordot.","tensordot(a\, b[\, axes\, return_type])","https://sparse.pydata.org/en/latest/generated/sparse.tensordot.html#sparse.tensordot"
"tril","Returns an array with all elements above the k-th diagonal set to zero.","tril(x[\, k])","https://sparse.pydata.org/en/latest/generated/sparse.tril.html#sparse.tril"
"triu","Returns an array with all elements below the k-th diagonal set to zero.","triu(x[\, k])","https://sparse.pydata.org/en/latest/generated/sparse.triu.html#sparse.triu"
"where","Select values from either x or y depending on condition.","where(condition[\, x\, y])","https://sparse.pydata.org/en/latest/generated/sparse.where.html#sparse.where"
"zeros","Return a SparseArray of given shape and type\, filled with zeros.","zeros(shape[\, dtype\, format\, compressed_axes])","https://sparse.pydata.org/en/latest/generated/sparse.zeros.html#sparse.zeros"
"zeros_like","Return a SparseArray of zeros with the same shape and type as a.","zeros_like(a[\, dtype\, shape\, format\, …])","https://sparse.pydata.org/en/latest/generated/sparse.zeros_like.html#sparse.zeros_like"
