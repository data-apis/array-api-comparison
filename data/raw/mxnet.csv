name,description,signature,url
"mxnet.ndarray.Activation","Applies an activation function element-wise to the input.","mxnet.ndarray.Activation(data=None\, act_type=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Activation"
"mxnet.ndarray.BatchNorm","Batch normalization.","mxnet.ndarray.BatchNorm(data=None\, gamma=None\, beta=None\, moving_mean=None\, moving_var=None\, eps=_Null\, momentum=_Null\, fix_gamma=_Null\, use_global_stats=_Null\, output_mean_var=_Null\, axis=_Null\, cudnn_off=_Null\, min_calib_range=_Null\, max_calib_range=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.BatchNorm"
"mxnet.ndarray.BatchNorm_v1","Batch normalization.","mxnet.ndarray.BatchNorm_v1(data=None\, gamma=None\, beta=None\, eps=_Null\, momentum=_Null\, fix_gamma=_Null\, use_global_stats=_Null\, output_mean_var=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.BatchNorm_v1"
"mxnet.ndarray.BilinearSampler","Applies bilinear sampling to input feature map.","mxnet.ndarray.BilinearSampler(data=None\, grid=None\, cudnn_off=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.BilinearSampler"
"mxnet.ndarray.BlockGrad","Stops gradient computation.","mxnet.ndarray.BlockGrad(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.BlockGrad"
"mxnet.ndarray.CTCLoss","Connectionist Temporal Classification Loss.","mxnet.ndarray.CTCLoss(data=None\, label=None\, data_lengths=None\, label_lengths=None\, use_data_lengths=_Null\, use_label_lengths=_Null\, blank_label=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.CTCLoss"
"mxnet.ndarray.CachedOp","Bases: object","mxnet.ndarray.CachedOp(sym\, flags=())","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.CachedOp"
"mxnet.ndarray.Cast","Casts all elements of the input to a new type.","mxnet.ndarray.Cast(data=None\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Cast"
"mxnet.ndarray.Concat","Joins input arrays along a given axis.","mxnet.ndarray.Concat(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Concat"
"mxnet.ndarray.Convolution","Compute N-D convolution on (N+2)-D input.","mxnet.ndarray.Convolution(data=None\, weight=None\, bias=None\, kernel=_Null\, stride=_Null\, dilate=_Null\, pad=_Null\, num_filter=_Null\, num_group=_Null\, workspace=_Null\, no_bias=_Null\, cudnn_tune=_Null\, cudnn_off=_Null\, layout=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Convolution"
"mxnet.ndarray.Convolution_v1","This operator is DEPRECATED. Apply convolution to input then add a bias.","mxnet.ndarray.Convolution_v1(data=None\, weight=None\, bias=None\, kernel=_Null\, stride=_Null\, dilate=_Null\, pad=_Null\, num_filter=_Null\, num_group=_Null\, workspace=_Null\, no_bias=_Null\, cudnn_tune=_Null\, cudnn_off=_Null\, layout=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Convolution_v1"
"mxnet.ndarray.Correlation","Applies correlation to inputs.","mxnet.ndarray.Correlation(data1=None\, data2=None\, kernel_size=_Null\, max_displacement=_Null\, stride1=_Null\, stride2=_Null\, pad_size=_Null\, is_multiply=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Correlation"
"mxnet.ndarray.Crop"," Note Crop is deprecated. Use slice instead. ","mxnet.ndarray.Crop(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Crop"
"mxnet.ndarray.Custom","Apply a custom operator implemented in a frontend language (like Python).","mxnet.ndarray.Custom(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Custom"
"mxnet.ndarray.Deconvolution","Computes 1D or 2D transposed convolution (aka fractionally strided convolution) of the input tensor. This operation can be seen as the gradient of Convolution operation with respect to its input. Convolution usually reduces the size of the input. Transposed convolution works the other way\, going from a smaller input to a larger output while preserving the connectivity pattern.","mxnet.ndarray.Deconvolution(data=None\, weight=None\, bias=None\, kernel=_Null\, stride=_Null\, dilate=_Null\, pad=_Null\, adj=_Null\, target_shape=_Null\, num_filter=_Null\, num_group=_Null\, workspace=_Null\, no_bias=_Null\, cudnn_tune=_Null\, cudnn_off=_Null\, layout=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Deconvolution"
"mxnet.ndarray.Dropout","Applies dropout operation to input array.","mxnet.ndarray.Dropout(data=None\, p=_Null\, mode=_Null\, axes=_Null\, cudnn_off=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Dropout"
"mxnet.ndarray.ElementWiseSum","Adds all input arguments element-wise.","mxnet.ndarray.ElementWiseSum(*args\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.ElementWiseSum"
"mxnet.ndarray.Embedding","Maps integer indices to vector representations (embeddings).","mxnet.ndarray.Embedding(data=None\, weight=None\, input_dim=_Null\, output_dim=_Null\, dtype=_Null\, sparse_grad=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Embedding"
"mxnet.ndarray.Flatten","Flattens the input array into a 2-D array by collapsing the higher dimensions. .. note:: Flatten is deprecated. Use flatten instead. For an input array with shape (d1\, d2\, ...\, dk)\, flatten operation reshapes the input array into an output array of shape (d1\, d2*...*dk). Note that the behavior of this function is different from numpy.ndarray.flatten\, which behaves similar to mxnet.ndarray.reshape((-1\,)). Example:","mxnet.ndarray.Flatten(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Flatten"
"mxnet.ndarray.FullyConnected","Applies a linear transformation: ùëå=ùëãùëäùëá+ùëèY=XWT+b.","mxnet.ndarray.FullyConnected(data=None\, weight=None\, bias=None\, num_hidden=_Null\, no_bias=_Null\, flatten=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.FullyConnected"
"mxnet.ndarray.GridGenerator","Generates 2D sampling grid for bilinear sampling.","mxnet.ndarray.GridGenerator(data=None\, transform_type=_Null\, target_shape=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.GridGenerator"
"mxnet.ndarray.GroupNorm","Group normalization.","mxnet.ndarray.GroupNorm(data=None\, gamma=None\, beta=None\, num_groups=_Null\, eps=_Null\, output_mean_var=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.GroupNorm"
"mxnet.ndarray.IdentityAttachKLSparseReg","Apply a sparse regularization to the output a sigmoid activation function.","mxnet.ndarray.IdentityAttachKLSparseReg(data=None\, sparseness_target=_Null\, penalty=_Null\, momentum=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.IdentityAttachKLSparseReg"
"mxnet.ndarray.InstanceNorm","Applies instance normalization to the n-dimensional input array.","mxnet.ndarray.InstanceNorm(data=None\, gamma=None\, beta=None\, eps=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.InstanceNorm"
"mxnet.ndarray.L2Normalization","Normalize the input array using the L2 norm.","mxnet.ndarray.L2Normalization(data=None\, eps=_Null\, mode=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.L2Normalization"
"mxnet.ndarray.LRN","Applies local response normalization to the input.","mxnet.ndarray.LRN(data=None\, alpha=_Null\, beta=_Null\, knorm=_Null\, nsize=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.LRN"
"mxnet.ndarray.LayerNorm","Layer normalization.","mxnet.ndarray.LayerNorm(data=None\, gamma=None\, beta=None\, axis=_Null\, eps=_Null\, output_mean_var=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.LayerNorm"
"mxnet.ndarray.LeakyReLU","Applies Leaky rectified linear unit activation element-wise to the input.","mxnet.ndarray.LeakyReLU(data=None\, gamma=None\, act_type=_Null\, slope=_Null\, lower_bound=_Null\, upper_bound=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.LeakyReLU"
"mxnet.ndarray.LinearRegressionOutput","Computes and optimizes for squared loss during backward propagation. Just outputs data during forward propagation.","mxnet.ndarray.LinearRegressionOutput(data=None\, label=None\, grad_scale=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.LinearRegressionOutput"
"mxnet.ndarray.LogisticRegressionOutput","Applies a logistic function to the input.","mxnet.ndarray.LogisticRegressionOutput(data=None\, label=None\, grad_scale=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.LogisticRegressionOutput"
"mxnet.ndarray.MAERegressionOutput","Computes mean absolute error of the input.","mxnet.ndarray.MAERegressionOutput(data=None\, label=None\, grad_scale=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.MAERegressionOutput"
"mxnet.ndarray.MakeLoss","Make your own loss function in network construction.","mxnet.ndarray.MakeLoss(data=None\, grad_scale=_Null\, valid_thresh=_Null\, normalization=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.MakeLoss"
"mxnet.ndarray.NDArray","Bases: mxnet._ctypes.ndarray.NDArrayBase","mxnet.ndarray.NDArray(handle\, writable=True)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.NDArray"
"mxnet.ndarray.Pad","Pads an input array with a constant or edge values of the array.","mxnet.ndarray.Pad(data=None\, mode=_Null\, pad_width=_Null\, constant_value=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Pad"
"mxnet.ndarray.Pooling","Performs pooling on the input.","mxnet.ndarray.Pooling(data=None\, kernel=_Null\, pool_type=_Null\, global_pool=_Null\, cudnn_off=_Null\, pooling_convention=_Null\, stride=_Null\, pad=_Null\, p_value=_Null\, count_include_pad=_Null\, layout=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Pooling"
"mxnet.ndarray.Pooling_v1","This operator is DEPRECATED. Perform pooling on the input.","mxnet.ndarray.Pooling_v1(data=None\, kernel=_Null\, pool_type=_Null\, global_pool=_Null\, pooling_convention=_Null\, stride=_Null\, pad=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Pooling_v1"
"mxnet.ndarray.RNN","Applies recurrent layers to input data. Currently\, vanilla RNN\, LSTM and GRU are implemented\, with both multi-layer and bidirectional support.","mxnet.ndarray.RNN(data=None\, parameters=None\, state=None\, state_cell=None\, sequence_length=None\, state_size=_Null\, num_layers=_Null\, bidirectional=_Null\, mode=_Null\, p=_Null\, state_outputs=_Null\, projection_size=_Null\, lstm_state_clip_min=_Null\, lstm_state_clip_max=_Null\, lstm_state_clip_nan=_Null\, use_sequence_length=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.RNN"
"mxnet.ndarray.ROIPooling","Performs region of interest(ROI) pooling on the input array.","mxnet.ndarray.ROIPooling(data=None\, rois=None\, pooled_size=_Null\, spatial_scale=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.ROIPooling"
"mxnet.ndarray.Reshape","Reshapes the input array. .. note:: Reshape is deprecated\, use reshape Given an array and a shape\, this function returns a copy of the array in the new shape. The shape is a tuple of integers such as (2\,3\,4). The size of the new shape should be same as the size of the input array. Example:","mxnet.ndarray.Reshape(data=None\, shape=_Null\, reverse=_Null\, target_shape=_Null\, keep_highest=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Reshape"
"mxnet.ndarray.SVMOutput","Computes support vector machine based transformation of the input.","mxnet.ndarray.SVMOutput(data=None\, label=None\, margin=_Null\, regularization_coefficient=_Null\, use_linear=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.SVMOutput"
"mxnet.ndarray.SequenceLast","Takes the last element of a sequence.","mxnet.ndarray.SequenceLast(data=None\, sequence_length=None\, use_sequence_length=_Null\, axis=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.SequenceLast"
"mxnet.ndarray.SequenceMask","Sets all elements outside the sequence to a constant value.","mxnet.ndarray.SequenceMask(data=None\, sequence_length=None\, use_sequence_length=_Null\, value=_Null\, axis=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.SequenceMask"
"mxnet.ndarray.SequenceReverse","Reverses the elements of each sequence.","mxnet.ndarray.SequenceReverse(data=None\, sequence_length=None\, use_sequence_length=_Null\, axis=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.SequenceReverse"
"mxnet.ndarray.SliceChannel","Splits an array along a particular axis into multiple sub-arrays.","mxnet.ndarray.SliceChannel(data=None\, num_outputs=_Null\, axis=_Null\, squeeze_axis=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.SliceChannel"
"mxnet.ndarray.Softmax","Computes the gradient of cross entropy loss with respect to softmax output.","mxnet.ndarray.Softmax(data=None\, label=None\, grad_scale=_Null\, ignore_label=_Null\, multi_output=_Null\, use_ignore=_Null\, preserve_shape=_Null\, normalization=_Null\, out_grad=_Null\, smooth_alpha=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.Softmax"
"mxnet.ndarray.SoftmaxActivation","Applies softmax activation to input. This is intended for internal layers.","mxnet.ndarray.SoftmaxActivation(data=None\, mode=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.SoftmaxActivation"
"mxnet.ndarray.SoftmaxOutput","Computes the gradient of cross entropy loss with respect to softmax output.","mxnet.ndarray.SoftmaxOutput(data=None\, label=None\, grad_scale=_Null\, ignore_label=_Null\, multi_output=_Null\, use_ignore=_Null\, preserve_shape=_Null\, normalization=_Null\, out_grad=_Null\, smooth_alpha=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.SoftmaxOutput"
"mxnet.ndarray.SpatialTransformer","Applies a spatial transformer to input feature map.","mxnet.ndarray.SpatialTransformer(data=None\, loc=None\, target_shape=_Null\, transform_type=_Null\, sampler_type=_Null\, cudnn_off=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.SpatialTransformer"
"mxnet.ndarray.SwapAxis","Interchanges two axes of an array.","mxnet.ndarray.SwapAxis(data=None\, dim1=_Null\, dim2=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.SwapAxis"
"mxnet.ndarray.UpSampling","Upsamples the given input data.","mxnet.ndarray.UpSampling(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.UpSampling"
"mxnet.ndarray.abs","Returns element-wise absolute value of the input.","mxnet.ndarray.abs(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.abs"
"mxnet.ndarray.abs","Returns element-wise absolute value of the input.","mxnet.ndarray.abs(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.abs"
"mxnet.ndarray.adam_update","Update function for Adam optimizer. Adam is seen as a generalization of AdaGrad.","mxnet.ndarray.adam_update(weight=None\, grad=None\, mean=None\, var=None\, lr=_Null\, beta1=_Null\, beta2=_Null\, epsilon=_Null\, wd=_Null\, rescale_grad=_Null\, clip_gradient=_Null\, lazy_update=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.adam_update"
"mxnet.ndarray.add","Returns element-wise sum of the input arrays with broadcasting.","mxnet.ndarray.add(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.add"
"mxnet.ndarray.add_n","Adds all input arguments element-wise.","mxnet.ndarray.add_n(*args\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.add_n"
"mxnet.ndarray.all_finite","Check if all the float numbers in the array are finite (used for AMP)","mxnet.ndarray.all_finite(data=None\, init_output=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.all_finite"
"mxnet.ndarray.amp_cast","Cast function between low precision float/FP32 used by AMP.","mxnet.ndarray.amp_cast(data=None\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.amp_cast"
"mxnet.ndarray.amp_multicast","Cast function used by AMP\, that casts its inputs to the common widest type.","mxnet.ndarray.amp_multicast(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.amp_multicast"
"mxnet.ndarray.arange","Returns evenly spaced values within a given interval.","mxnet.ndarray.arange(start\, stop=None\, step=1.0\, repeat=1\, infer_range=None\, ctx=None\, dtype=<class 'numpy.float32'>)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.arange"
"mxnet.ndarray.arccos","Returns element-wise inverse cosine of the input array.","mxnet.ndarray.arccos(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.arccos"
"mxnet.ndarray.arccos","Returns element-wise inverse cosine of the input array.","mxnet.ndarray.arccos(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.arccos"
"mxnet.ndarray.arccosh","Returns the element-wise inverse hyperbolic cosine of the input array\, computed element-wise.","mxnet.ndarray.arccosh(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.arccosh"
"mxnet.ndarray.arccosh","Returns the element-wise inverse hyperbolic cosine of the input array\, computed element-wise.","mxnet.ndarray.arccosh(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.arccosh"
"mxnet.ndarray.arcsin","Returns element-wise inverse sine of the input array.","mxnet.ndarray.arcsin(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.arcsin"
"mxnet.ndarray.arcsin","Returns element-wise inverse sine of the input array.","mxnet.ndarray.arcsin(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.arcsin"
"mxnet.ndarray.arcsinh","Returns the element-wise inverse hyperbolic sine of the input array\, computed element-wise.","mxnet.ndarray.arcsinh(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.arcsinh"
"mxnet.ndarray.arcsinh","Returns the element-wise inverse hyperbolic sine of the input array\, computed element-wise.","mxnet.ndarray.arcsinh(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.arcsinh"
"mxnet.ndarray.arctan","Returns element-wise inverse tangent of the input array.","mxnet.ndarray.arctan(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.arctan"
"mxnet.ndarray.arctan","Returns element-wise inverse tangent of the input array.","mxnet.ndarray.arctan(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.arctan"
"mxnet.ndarray.arctanh","Returns the element-wise inverse hyperbolic tangent of the input array\, computed element-wise.","mxnet.ndarray.arctanh(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.arctanh"
"mxnet.ndarray.arctanh","Returns the element-wise inverse hyperbolic tangent of the input array\, computed element-wise.","mxnet.ndarray.arctanh(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.arctanh"
"mxnet.ndarray.argmax","Returns indices of the maximum values along an axis.","mxnet.ndarray.argmax(data=None\, axis=_Null\, keepdims=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.argmax"
"mxnet.ndarray.argmax","Returns indices of the maximum values along an axis.","mxnet.ndarray.argmax(data=None\, axis=_Null\, keepdims=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.argmax"
"mxnet.ndarray.argmax_channel","Returns argmax indices of each channel from the input array.","mxnet.ndarray.argmax_channel(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.argmax_channel"
"mxnet.ndarray.argmax_channel","Returns argmax indices of each channel from the input array.","mxnet.ndarray.argmax_channel(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.argmax_channel"
"mxnet.ndarray.argmin","Returns indices of the minimum values along an axis.","mxnet.ndarray.argmin(data=None\, axis=_Null\, keepdims=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.argmin"
"mxnet.ndarray.argmin","Returns indices of the minimum values along an axis.","mxnet.ndarray.argmin(data=None\, axis=_Null\, keepdims=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.argmin"
"mxnet.ndarray.argsort","Returns the indices that would sort an input array along the given axis.","mxnet.ndarray.argsort(data=None\, axis=_Null\, is_ascend=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.argsort"
"mxnet.ndarray.argsort","Returns the indices that would sort an input array along the given axis.","mxnet.ndarray.argsort(data=None\, axis=_Null\, is_ascend=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.argsort"
"mxnet.ndarray.array","Creates an array from any object exposing the array interface.","mxnet.ndarray.array(source_array\, ctx=None\, dtype=None)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.array"
"mxnet.ndarray.batch_dot","Batchwise dot product.","mxnet.ndarray.batch_dot(lhs=None\, rhs=None\, transpose_a=_Null\, transpose_b=_Null\, forward_stype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.batch_dot"
"mxnet.ndarray.batch_take","Takes elements from a data batch.","mxnet.ndarray.batch_take(a=None\, indices=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.batch_take"
"mxnet.ndarray.broadcast_add","Returns element-wise sum of the input arrays with broadcasting.","mxnet.ndarray.broadcast_add(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_add"
"mxnet.ndarray.broadcast_axes","Broadcasts the input array over particular axes.","mxnet.ndarray.broadcast_axes(data=None\, axis=_Null\, size=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_axes"
"mxnet.ndarray.broadcast_axes","Broadcasts the input array over particular axes.","mxnet.ndarray.broadcast_axes(data=None\, axis=_Null\, size=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_axes"
"mxnet.ndarray.broadcast_axis","Broadcasts the input array over particular axes.","mxnet.ndarray.broadcast_axis(data=None\, axis=_Null\, size=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_axis"
"mxnet.ndarray.broadcast_div","Returns element-wise division of the input arrays with broadcasting.","mxnet.ndarray.broadcast_div(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_div"
"mxnet.ndarray.broadcast_equal","Returns the result of element-wise equal to (==) comparison operation with broadcasting.","mxnet.ndarray.broadcast_equal(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_equal"
"mxnet.ndarray.broadcast_greater","Returns the result of element-wise greater than (>) comparison operation with broadcasting.","mxnet.ndarray.broadcast_greater(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_greater"
"mxnet.ndarray.broadcast_greater_equal","Returns the result of element-wise greater than or equal to (>=) comparison operation with broadcasting.","mxnet.ndarray.broadcast_greater_equal(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_greater_equal"
"mxnet.ndarray.broadcast_hypot","Returns the hypotenuse of a right angled triangle\, given its ‚Äúlegs‚Äù with broadcasting.","mxnet.ndarray.broadcast_hypot(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_hypot"
"mxnet.ndarray.broadcast_lesser","Returns the result of element-wise lesser than (<) comparison operation with broadcasting.","mxnet.ndarray.broadcast_lesser(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_lesser"
"mxnet.ndarray.broadcast_lesser_equal","Returns the result of element-wise lesser than or equal to (<=) comparison operation with broadcasting.","mxnet.ndarray.broadcast_lesser_equal(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_lesser_equal"
"mxnet.ndarray.broadcast_like","Broadcasts lhs to have the same shape as rhs.","mxnet.ndarray.broadcast_like(lhs=None\, rhs=None\, lhs_axes=_Null\, rhs_axes=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_like"
"mxnet.ndarray.broadcast_logical_and","Returns the result of element-wise logical and with broadcasting.","mxnet.ndarray.broadcast_logical_and(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_logical_and"
"mxnet.ndarray.broadcast_logical_or","Returns the result of element-wise logical or with broadcasting.","mxnet.ndarray.broadcast_logical_or(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_logical_or"
"mxnet.ndarray.broadcast_logical_xor","Returns the result of element-wise logical xor with broadcasting.","mxnet.ndarray.broadcast_logical_xor(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_logical_xor"
"mxnet.ndarray.broadcast_maximum","Returns element-wise maximum of the input arrays with broadcasting.","mxnet.ndarray.broadcast_maximum(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_maximum"
"mxnet.ndarray.broadcast_minimum","Returns element-wise minimum of the input arrays with broadcasting.","mxnet.ndarray.broadcast_minimum(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_minimum"
"mxnet.ndarray.broadcast_minus","Returns element-wise difference of the input arrays with broadcasting.","mxnet.ndarray.broadcast_minus(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_minus"
"mxnet.ndarray.broadcast_mod","Returns element-wise modulo of the input arrays with broadcasting.","mxnet.ndarray.broadcast_mod(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_mod"
"mxnet.ndarray.broadcast_mul","Returns element-wise product of the input arrays with broadcasting.","mxnet.ndarray.broadcast_mul(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_mul"
"mxnet.ndarray.broadcast_not_equal","Returns the result of element-wise not equal to (!=) comparison operation with broadcasting.","mxnet.ndarray.broadcast_not_equal(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_not_equal"
"mxnet.ndarray.broadcast_plus","Returns element-wise sum of the input arrays with broadcasting.","mxnet.ndarray.broadcast_plus(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_plus"
"mxnet.ndarray.broadcast_power","Returns result of first array elements raised to powers from second array\, element-wise with broadcasting.","mxnet.ndarray.broadcast_power(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_power"
"mxnet.ndarray.broadcast_sub","Returns element-wise difference of the input arrays with broadcasting.","mxnet.ndarray.broadcast_sub(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_sub"
"mxnet.ndarray.broadcast_to","Broadcasts the input array to a new shape.","mxnet.ndarray.broadcast_to(data=None\, shape=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.broadcast_to"
"mxnet.ndarray.cast","Casts all elements of the input to a new type.","mxnet.ndarray.cast(data=None\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.cast"
"mxnet.ndarray.cast_storage","Casts tensor storage type to the new type.","mxnet.ndarray.cast_storage(data=None\, stype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.cast_storage"
"mxnet.ndarray.cbrt","Returns element-wise cube-root value of the input.","mxnet.ndarray.cbrt(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.cbrt"
"mxnet.ndarray.cbrt","Returns element-wise cube-root value of the input.","mxnet.ndarray.cbrt(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.cbrt"
"mxnet.ndarray.ceil","Returns element-wise ceiling of the input.","mxnet.ndarray.ceil(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.ceil"
"mxnet.ndarray.ceil","Returns element-wise ceiling of the input.","mxnet.ndarray.ceil(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.ceil"
"mxnet.ndarray.choose_element_0index","Picks elements from an input array according to the input indices along the given axis.","mxnet.ndarray.choose_element_0index(data=None\, index=None\, axis=_Null\, keepdims=_Null\, mode=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.choose_element_0index"
"mxnet.ndarray.clip","Clips (limits) the values in an array. Given an interval\, values outside the interval are clipped to the interval edges. Clipping x between a_min and a_max would be:: .. math:","mxnet.ndarray.clip(data=None\, a_min=_Null\, a_max=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.clip"
"mxnet.ndarray.clip","Clips (limits) the values in an array. Given an interval\, values outside the interval are clipped to the interval edges. Clipping x between a_min and a_max would be:: .. math:","mxnet.ndarray.clip(data=None\, a_min=_Null\, a_max=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.clip"
"mxnet.ndarray.col2im","Combining the output column matrix of im2col back to image array.","mxnet.ndarray.col2im(data=None\, output_size=_Null\, kernel=_Null\, stride=_Null\, dilate=_Null\, pad=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.col2im"
"mxnet.ndarray.concat","Joins input arrays along a given axis.","mxnet.ndarray.concat(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.concat"
"mxnet.ndarray.concatenate","DEPRECATED\, use concat instead","mxnet.ndarray.concatenate(arrays\, axis=0\, always_copy=True)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.concatenate"
"mxnet.ndarray.cos","Computes the element-wise cosine of the input array.","mxnet.ndarray.cos(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.cos"
"mxnet.ndarray.cos","Computes the element-wise cosine of the input array.","mxnet.ndarray.cos(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.cos"
"mxnet.ndarray.cosh","Returns the hyperbolic cosine  of the input array\, computed element-wise.","mxnet.ndarray.cosh(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.cosh"
"mxnet.ndarray.cosh","Returns the hyperbolic cosine  of the input array\, computed element-wise.","mxnet.ndarray.cosh(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.cosh"
"mxnet.ndarray.crop","Slices a region of the array. .. note:: crop is deprecated. Use slice instead. This function returns a sliced array between the indices given by begin and end with the corresponding step. For an input array of shape=(d_0\, d_1\, ...\, d_n-1)\, slice operation with begin=(b_0\, b_1...b_m-1)\, end=(e_0\, e_1\, ...\, e_m-1)\, and step=(s_0\, s_1\, ...\, s_m-1)\, where m <= n\, results in an array with the shape (|e_0-b_0|/|s_0|\, ...\, |e_m-1-b_m-1|/|s_m-1|\, d_m\, ...\, d_n-1). The resulting array‚Äôs k-th dimension contains elements from the k-th dimension of the input array starting from index b_k (inclusive) with step s_k until reaching e_k (exclusive). If the k-th elements are None in the sequence of begin\, end\, and step\, the following rule will be used to set default values. If s_k is None\, set s_k=1. If s_k > 0\, set b_k=0\, e_k=d_k; else\, set b_k=d_k-1\, e_k=-1. The storage type of slice output depends on storage types of inputs - slice(csr) = csr - otherwise\, slice generates output with default storage .. note:: When input data storage type is csr\, it only supports","mxnet.ndarray.crop(data=None\, begin=_Null\, end=_Null\, step=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.crop"
"mxnet.ndarray.ctc_loss","Connectionist Temporal Classification Loss.","mxnet.ndarray.ctc_loss(data=None\, label=None\, data_lengths=None\, label_lengths=None\, use_data_lengths=_Null\, use_label_lengths=_Null\, blank_label=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.ctc_loss"
"mxnet.ndarray.cumsum","Return the cumulative sum of the elements along a given axis.","mxnet.ndarray.cumsum(a=None\, axis=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.cumsum"
"mxnet.ndarray.degrees","Converts each element of the input array from radians to degrees.","mxnet.ndarray.degrees(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.degrees"
"mxnet.ndarray.degrees","Converts each element of the input array from radians to degrees.","mxnet.ndarray.degrees(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.degrees"
"mxnet.ndarray.depth_to_space","Rearranges(permutes) data from depth into blocks of spatial data. Similar to ONNX DepthToSpace operator: https://github.com/onnx/onnx/blob/master/docs/Operators.md#DepthToSpace. The output is a new tensor where the values from depth dimension are moved in spatial blocks to height and width dimension. The reverse of this operation is space_to_depth. .. math:","mxnet.ndarray.depth_to_space(data=None\, block_size=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.depth_to_space"
"mxnet.ndarray.depth_to_space","Rearranges(permutes) data from depth into blocks of spatial data. Similar to ONNX DepthToSpace operator: https://github.com/onnx/onnx/blob/master/docs/Operators.md#DepthToSpace. The output is a new tensor where the values from depth dimension are moved in spatial blocks to height and width dimension. The reverse of this operation is space_to_depth. .. math:","mxnet.ndarray.depth_to_space(data=None\, block_size=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.depth_to_space"
"mxnet.ndarray.diag","Extracts a diagonal or constructs a diagonal array.","mxnet.ndarray.diag(data=None\, k=_Null\, axis1=_Null\, axis2=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.diag"
"mxnet.ndarray.diag","Extracts a diagonal or constructs a diagonal array.","mxnet.ndarray.diag(data=None\, k=_Null\, axis1=_Null\, axis2=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.diag"
"mxnet.ndarray.divide","Returns element-wise division of the input arrays with broadcasting.","mxnet.ndarray.divide(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.divide"
"mxnet.ndarray.divide","Returns element-wise division of the input arrays with broadcasting.","mxnet.ndarray.divide(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.divide"
"mxnet.ndarray.dot","Dot product of two arrays.","mxnet.ndarray.dot(lhs=None\, rhs=None\, transpose_a=_Null\, transpose_b=_Null\, forward_stype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.dot"
"mxnet.ndarray.elemwise_add","Adds arguments element-wise.","mxnet.ndarray.elemwise_add(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.elemwise_add"
"mxnet.ndarray.elemwise_div","Divides arguments element-wise.","mxnet.ndarray.elemwise_div(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.elemwise_div"
"mxnet.ndarray.elemwise_mul","Multiplies arguments element-wise.","mxnet.ndarray.elemwise_mul(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.elemwise_mul"
"mxnet.ndarray.elemwise_sub","Subtracts arguments element-wise.","mxnet.ndarray.elemwise_sub(lhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.elemwise_sub"
"mxnet.ndarray.empty","Returns a new array of given shape and type\, without initializing entries.","mxnet.ndarray.empty(shape\, ctx=None\, dtype=None\, stype=None)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.empty"
"mxnet.ndarray.equal","Returns the result of element-wise equal to (==) comparison operation with broadcasting.","mxnet.ndarray.equal(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.equal"
"mxnet.ndarray.erf","Returns element-wise gauss error function of the input.","mxnet.ndarray.erf(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.erf"
"mxnet.ndarray.erfinv","Returns element-wise inverse gauss error function of the input.","mxnet.ndarray.erfinv(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.erfinv"
"mxnet.ndarray.exp","Returns element-wise exponential value of the input.","mxnet.ndarray.exp(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.exp"
"mxnet.ndarray.exp","Returns element-wise exponential value of the input.","mxnet.ndarray.exp(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.exp"
"mxnet.ndarray.expand_dims","Inserts a new axis of size 1 into the array shape For example\, given x with shape (2\,3\,4)\, then expand_dims(x\, axis=1) will return a new array with shape (2\,1\,3\,4).","mxnet.ndarray.expand_dims(data=None\, axis=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.expand_dims"
"mxnet.ndarray.expm1","Returns exp(x) - 1 computed element-wise on the input.","mxnet.ndarray.expm1(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.expm1"
"mxnet.ndarray.expm1","Returns exp(x) - 1 computed element-wise on the input.","mxnet.ndarray.expm1(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.expm1"
"mxnet.ndarray.eye","Return a 2-D array with ones on the diagonal and zeros elsewhere.","mxnet.ndarray.eye(N\, M=0\, k=0\, ctx=None\, dtype=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.eye"
"mxnet.ndarray.fill_element_0index","Fill one element of each line(row for python\, column for R/Julia) in lhs according to index indicated by rhs and values indicated by mhs. This function assume rhs uses 0-based index.","mxnet.ndarray.fill_element_0index(lhs=None\, mhs=None\, rhs=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.fill_element_0index"
"mxnet.ndarray.fix","Returns element-wise rounded value to the nearest integer towards zero of the input.","mxnet.ndarray.fix(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.fix"
"mxnet.ndarray.fix","Returns element-wise rounded value to the nearest integer towards zero of the input.","mxnet.ndarray.fix(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.fix"
"mxnet.ndarray.flatten","Flattens the input array into a 2-D array by collapsing the higher dimensions. .. note:: Flatten is deprecated. Use flatten instead. For an input array with shape (d1\, d2\, ...\, dk)\, flatten operation reshapes the input array into an output array of shape (d1\, d2*...*dk). Note that the behavior of this function is different from numpy.ndarray.flatten\, which behaves similar to mxnet.ndarray.reshape((-1\,)). Example:","mxnet.ndarray.flatten(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.flatten"
"mxnet.ndarray.flip","Reverses the order of elements along given axis while preserving array shape. Note: reverse and flip are equivalent. We use reverse in the following examples. Examples:","mxnet.ndarray.flip(data=None\, axis=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.flip"
"mxnet.ndarray.flip","Reverses the order of elements along given axis while preserving array shape. Note: reverse and flip are equivalent. We use reverse in the following examples. Examples:","mxnet.ndarray.flip(data=None\, axis=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.flip"
"mxnet.ndarray.floor","Returns element-wise floor of the input.","mxnet.ndarray.floor(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.floor"
"mxnet.ndarray.floor","Returns element-wise floor of the input.","mxnet.ndarray.floor(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.floor"
"mxnet.ndarray.from_dlpack","Returns a NDArray backed by a dlpack tensor.","mxnet.ndarray.from_dlpack(dlpack)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.from_dlpack"
"mxnet.ndarray.from_numpy","Returns an MXNet‚Äôs ndarray backed by numpy‚Äôs ndarray. When zero_copy is set to be true\, this API consumes numpy‚Äôs ndarray and produces MXNet‚Äôs ndarray without having to copy the content. In this case\, we disallow users to modify the given numpy ndarray\, and it is suggested not to read the numpy ndarray as well for internal correctness.","mxnet.ndarray.from_numpy(ndarray\, zero_copy=True\, array_cls=<class 'mxnet.ndarray.ndarray.NDArray'>)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.from_numpy"
"mxnet.ndarray.ftml_update","The FTML optimizer described in FTML - Follow the Moving Leader in Deep Learning\, available at http://proceedings.mlr.press/v70/zheng17a/zheng17a.pdf.","mxnet.ndarray.ftml_update(weight=None\, grad=None\, d=None\, v=None\, z=None\, lr=_Null\, beta1=_Null\, beta2=_Null\, epsilon=_Null\, t=_Null\, wd=_Null\, rescale_grad=_Null\, clip_grad=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.ftml_update"
"mxnet.ndarray.ftrl_update","Update function for Ftrl optimizer. Referenced from Ad Click Prediction: a View from the Trenches\, available at http://dl.acm.org/citation.cfm?id=2488200.","mxnet.ndarray.ftrl_update(weight=None\, grad=None\, z=None\, n=None\, lr=_Null\, lamda1=_Null\, beta=_Null\, wd=_Null\, rescale_grad=_Null\, clip_gradient=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.ftrl_update"
"mxnet.ndarray.full","Returns a new array of given shape and type\, filled with the given value val.","mxnet.ndarray.full(shape\, val\, ctx=None\, dtype=<class 'numpy.float32'>\, out=None)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.full"
"mxnet.ndarray.gamma","Returns the gamma function (extension of the factorial function to the reals)\, computed element-wise on the input array.","mxnet.ndarray.gamma(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.gamma"
"mxnet.ndarray.gammaln","Returns element-wise log of the absolute value of the gamma function of the input.","mxnet.ndarray.gammaln(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.gammaln"
"mxnet.ndarray.gather_nd","Gather elements or slices from data and store to a tensor whose shape is defined by indices.","mxnet.ndarray.gather_nd(data=None\, indices=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.gather_nd"
"mxnet.ndarray.get_indexing_dispatch_code","Returns a dispatch code for calling basic or advanced indexing functions.","mxnet.ndarray.get_indexing_dispatch_code(key)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.get_indexing_dispatch_code"
"mxnet.ndarray.get_oshape_of_gather_nd_op","Given data and index shapes\, get the output NDArray shape. This basically implements the infer shape logic of op gather_nd.","mxnet.ndarray.get_oshape_of_gather_nd_op(dshape\, ishape)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.get_oshape_of_gather_nd_op"
"mxnet.ndarray.greater","Returns the result of element-wise greater than (>) comparison operation with broadcasting.","mxnet.ndarray.greater(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.greater"
"mxnet.ndarray.greater_equal","Returns the result of element-wise greater than or equal to (>=) comparison operation with broadcasting.","mxnet.ndarray.greater_equal(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.greater_equal"
"mxnet.ndarray.hard_sigmoid","Computes hard sigmoid of x element-wise.","mxnet.ndarray.hard_sigmoid(data=None\, alpha=_Null\, beta=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.hard_sigmoid"
"mxnet.ndarray.histogram","Compute the histogram of the input data.","mxnet.ndarray.histogram(a\, bins=10\, range=None)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.histogram"
"mxnet.ndarray.identity","Returns a copy of the input.","mxnet.ndarray.identity(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.identity"
"mxnet.ndarray.im2col","Extract sliding blocks from input array.","mxnet.ndarray.im2col(data=None\, kernel=_Null\, stride=_Null\, dilate=_Null\, pad=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.im2col"
"mxnet.ndarray.imdecode","DEPRECATED\, use mx.img instead","mxnet.ndarray.imdecode(str_img\, clip_rect=(0\, 0\, 0\, 0)\, out=None\, index=0\, channels=3\, mean=None)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.imdecode"
"mxnet.ndarray.indexing_key_expand_implicit_axes","Make implicit axes explicit by adding slice(None) and convert boolean array to integer array through nonzero.","mxnet.ndarray.indexing_key_expand_implicit_axes(key\, shape)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.indexing_key_expand_implicit_axes"
"mxnet.ndarray.khatri_rao","Computes the Khatri-Rao product of the input matrices.","mxnet.ndarray.khatri_rao(*args\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.khatri_rao"
"mxnet.ndarray.lamb_update_phase1","Phase I of lamb update it performs the following operations and returns g:.","mxnet.ndarray.lamb_update_phase1(weight=None\, grad=None\, mean=None\, var=None\, beta1=_Null\, beta2=_Null\, epsilon=_Null\, t=_Null\, bias_correction=_Null\, wd=_Null\, rescale_grad=_Null\, clip_gradient=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.lamb_update_phase1"
"mxnet.ndarray.lamb_update_phase2","Phase II of lamb update it performs the following operations and updates grad.","mxnet.ndarray.lamb_update_phase2(weight=None\, g=None\, r1=None\, r2=None\, lr=_Null\, lower_bound=_Null\, upper_bound=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.lamb_update_phase2"
"mxnet.ndarray.lesser","Returns the result of element-wise lesser than (<) comparison operation with broadcasting.","mxnet.ndarray.lesser(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.lesser"
"mxnet.ndarray.lesser_equal","Returns the result of element-wise lesser than or equal to (<=) comparison operation with broadcasting.","mxnet.ndarray.lesser_equal(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.lesser_equal"
"mxnet.ndarray.linalg_det","Compute the determinant of a matrix. Input is a tensor A of dimension n >= 2.","mxnet.ndarray.linalg_det(A=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_det"
"mxnet.ndarray.linalg_extractdiag","Extracts the diagonal entries of a square matrix. Input is a tensor A of dimension n >= 2.","mxnet.ndarray.linalg_extractdiag(A=None\, offset=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_extractdiag"
"mxnet.ndarray.linalg_extracttrian","Extracts a triangular sub-matrix from a square matrix. Input is a tensor A of dimension n >= 2.","mxnet.ndarray.linalg_extracttrian(A=None\, offset=_Null\, lower=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_extracttrian"
"mxnet.ndarray.linalg_gelqf","LQ factorization for general matrix. Input is a tensor A of dimension n >= 2.","mxnet.ndarray.linalg_gelqf(A=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_gelqf"
"mxnet.ndarray.linalg_gemm","Performs general matrix multiplication and accumulation. Input are tensors A\, B\, C\, each of dimension n >= 2 and having the same shape on the leading n-2 dimensions.","mxnet.ndarray.linalg_gemm(A=None\, B=None\, C=None\, transpose_a=_Null\, transpose_b=_Null\, alpha=_Null\, beta=_Null\, axis=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_gemm"
"mxnet.ndarray.linalg_gemm2","Performs general matrix multiplication. Input are tensors A\, B\, each of dimension n >= 2 and having the same shape on the leading n-2 dimensions.","mxnet.ndarray.linalg_gemm2(A=None\, B=None\, transpose_a=_Null\, transpose_b=_Null\, alpha=_Null\, axis=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_gemm2"
"mxnet.ndarray.linalg_inverse","Compute the inverse of a matrix. Input is a tensor A of dimension n >= 2.","mxnet.ndarray.linalg_inverse(A=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_inverse"
"mxnet.ndarray.linalg_makediag","Constructs a square matrix with the input as diagonal. Input is a tensor A of dimension n >= 1.","mxnet.ndarray.linalg_makediag(A=None\, offset=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_makediag"
"mxnet.ndarray.linalg_maketrian","Constructs a square matrix with the input representing a specific triangular sub-matrix. This is basically the inverse of linalg.extracttrian. Input is a tensor A of dimension n >= 1.","mxnet.ndarray.linalg_maketrian(A=None\, offset=_Null\, lower=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_maketrian"
"mxnet.ndarray.linalg_potrf","Performs Cholesky factorization of a symmetric positive-definite matrix. Input is a tensor A of dimension n >= 2.","mxnet.ndarray.linalg_potrf(A=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_potrf"
"mxnet.ndarray.linalg_potri","Performs matrix inversion from a Cholesky factorization. Input is a tensor A of dimension n >= 2.","mxnet.ndarray.linalg_potri(A=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_potri"
"mxnet.ndarray.linalg_slogdet","Compute the sign and log of the determinant of a matrix. Input is a tensor A of dimension n >= 2.","mxnet.ndarray.linalg_slogdet(A=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_slogdet"
"mxnet.ndarray.linalg_sumlogdiag","Computes the sum of the logarithms of the diagonal elements of a square matrix. Input is a tensor A of dimension n >= 2.","mxnet.ndarray.linalg_sumlogdiag(A=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_sumlogdiag"
"mxnet.ndarray.linalg_syrk","Multiplication of matrix with its transpose. Input is a tensor A of dimension n >= 2.","mxnet.ndarray.linalg_syrk(A=None\, transpose=_Null\, alpha=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_syrk"
"mxnet.ndarray.linalg_trmm","Performs multiplication with a lower triangular matrix. Input are tensors A\, B\, each of dimension n >= 2 and having the same shape on the leading n-2 dimensions.","mxnet.ndarray.linalg_trmm(A=None\, B=None\, transpose=_Null\, rightside=_Null\, lower=_Null\, alpha=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_trmm"
"mxnet.ndarray.linalg_trsm","Solves matrix equation involving a lower triangular matrix. Input are tensors A\, B\, each of dimension n >= 2 and having the same shape on the leading n-2 dimensions.","mxnet.ndarray.linalg_trsm(A=None\, B=None\, transpose=_Null\, rightside=_Null\, lower=_Null\, alpha=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linalg_trsm"
"mxnet.ndarray.linspace","Return evenly spaced numbers within a specified interval.","mxnet.ndarray.linspace(start\, stop\, num\, endpoint=True\, ctx=None\, dtype=<class 'numpy.float32'>)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.linspace"
"mxnet.ndarray.load","Loads an array from file.","mxnet.ndarray.load(fname)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.load"
"mxnet.ndarray.load_frombuffer","Loads an array dictionary or list from a buffer","mxnet.ndarray.load_frombuffer(buf)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.load_frombuffer"
"mxnet.ndarray.log","Returns element-wise Natural logarithmic value of the input.","mxnet.ndarray.log(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.log"
"mxnet.ndarray.log","Returns element-wise Natural logarithmic value of the input.","mxnet.ndarray.log(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.log"
"mxnet.ndarray.log10","Returns element-wise Base-10 logarithmic value of the input.","mxnet.ndarray.log10(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.log10"
"mxnet.ndarray.log10","Returns element-wise Base-10 logarithmic value of the input.","mxnet.ndarray.log10(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.log10"
"mxnet.ndarray.log1p","Returns element-wise log(1 + x) value of the input.","mxnet.ndarray.log1p(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.log1p"
"mxnet.ndarray.log1p","Returns element-wise log(1 + x) value of the input.","mxnet.ndarray.log1p(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.log1p"
"mxnet.ndarray.log2","Returns element-wise Base-2 logarithmic value of the input.","mxnet.ndarray.log2(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.log2"
"mxnet.ndarray.log2","Returns element-wise Base-2 logarithmic value of the input.","mxnet.ndarray.log2(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.log2"
"mxnet.ndarray.log_softmax","Computes the log softmax of the input. This is equivalent to computing softmax followed by log.","mxnet.ndarray.log_softmax(data=None\, axis=_Null\, temperature=_Null\, dtype=_Null\, use_length=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.log_softmax"
"mxnet.ndarray.log_softmax","Computes the log softmax of the input. This is equivalent to computing softmax followed by log.","mxnet.ndarray.log_softmax(data=None\, axis=_Null\, temperature=_Null\, dtype=_Null\, use_length=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.log_softmax"
"mxnet.ndarray.logical_and","Returns the result of element-wise logical and comparison operation with broadcasting.","mxnet.ndarray.logical_and(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.logical_and"
"mxnet.ndarray.logical_not","Returns the result of logical NOT (!) function","mxnet.ndarray.logical_not(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.logical_not"
"mxnet.ndarray.logical_or","Returns the result of element-wise logical or comparison operation with broadcasting.","mxnet.ndarray.logical_or(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.logical_or"
"mxnet.ndarray.logical_xor","Returns the result of element-wise logical xor comparison operation with broadcasting.","mxnet.ndarray.logical_xor(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.logical_xor"
"mxnet.ndarray.make_loss","Make your own loss function in network construction.","mxnet.ndarray.make_loss(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.make_loss"
"mxnet.ndarray.max","Computes the max of array elements over given axes.","mxnet.ndarray.max(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.max"
"mxnet.ndarray.max","Computes the max of array elements over given axes.","mxnet.ndarray.max(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.max"
"mxnet.ndarray.max_axis","Computes the max of array elements over given axes.","mxnet.ndarray.max_axis(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.max_axis"
"mxnet.ndarray.maximum","Returns element-wise maximum of the input arrays with broadcasting.","mxnet.ndarray.maximum(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.maximum"
"mxnet.ndarray.mean","Computes the mean of array elements over given axes.","mxnet.ndarray.mean(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.mean"
"mxnet.ndarray.mean","Computes the mean of array elements over given axes.","mxnet.ndarray.mean(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.mean"
"mxnet.ndarray.min","Computes the min of array elements over given axes.","mxnet.ndarray.min(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.min"
"mxnet.ndarray.min","Computes the min of array elements over given axes.","mxnet.ndarray.min(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.min"
"mxnet.ndarray.min_axis","Computes the min of array elements over given axes.","mxnet.ndarray.min_axis(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.min_axis"
"mxnet.ndarray.minimum","Returns element-wise minimum of the input arrays with broadcasting.","mxnet.ndarray.minimum(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.minimum"
"mxnet.ndarray.modulo","Returns element-wise modulo of the input arrays with broadcasting.","mxnet.ndarray.modulo(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.modulo"
"mxnet.ndarray.moments","Calculate the mean and variance of data.","mxnet.ndarray.moments(data=None\, axes=_Null\, keepdims=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.moments"
"mxnet.ndarray.moveaxis","Moves the source axis into the destination position while leaving the other axes in their original order","mxnet.ndarray.moveaxis(tensor\, source\, destination)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.moveaxis"
"mxnet.ndarray.mp_lamb_update_phase1","Mixed Precision version of Phase I of lamb update it performs the following operations and returns g:.","mxnet.ndarray.mp_lamb_update_phase1(weight=None\, grad=None\, mean=None\, var=None\, weight32=None\, beta1=_Null\, beta2=_Null\, epsilon=_Null\, t=_Null\, bias_correction=_Null\, wd=_Null\, rescale_grad=_Null\, clip_gradient=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.mp_lamb_update_phase1"
"mxnet.ndarray.mp_lamb_update_phase2","Mixed Precision version Phase II of lamb update it performs the following operations and updates grad.","mxnet.ndarray.mp_lamb_update_phase2(weight=None\, g=None\, r1=None\, r2=None\, weight32=None\, lr=_Null\, lower_bound=_Null\, upper_bound=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.mp_lamb_update_phase2"
"mxnet.ndarray.mp_nag_mom_update","Update function for multi-precision Nesterov Accelerated Gradient( NAG) optimizer.","mxnet.ndarray.mp_nag_mom_update(weight=None\, grad=None\, mom=None\, weight32=None\, lr=_Null\, momentum=_Null\, wd=_Null\, rescale_grad=_Null\, clip_gradient=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.mp_nag_mom_update"
"mxnet.ndarray.mp_sgd_mom_update","Updater function for multi-precision sgd optimizer","mxnet.ndarray.mp_sgd_mom_update(weight=None\, grad=None\, mom=None\, weight32=None\, lr=_Null\, momentum=_Null\, wd=_Null\, rescale_grad=_Null\, clip_gradient=_Null\, lazy_update=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.mp_sgd_mom_update"
"mxnet.ndarray.mp_sgd_update","Updater function for multi-precision sgd optimizer","mxnet.ndarray.mp_sgd_update(weight=None\, grad=None\, weight32=None\, lr=_Null\, wd=_Null\, rescale_grad=_Null\, clip_gradient=_Null\, lazy_update=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.mp_sgd_update"
"mxnet.ndarray.multi_all_finite","Check if all the float numbers in all the arrays are finite (used for AMP)","mxnet.ndarray.multi_all_finite(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.multi_all_finite"
"mxnet.ndarray.multi_lars","Compute the LARS coefficients of multiple weights and grads from their sums of square‚Äù","mxnet.ndarray.multi_lars(lrs=None\, weights_sum_sq=None\, grads_sum_sq=None\, wds=None\, eta=_Null\, eps=_Null\, rescale_grad=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.multi_lars"
"mxnet.ndarray.multi_mp_sgd_mom_update","Momentum update function for multi-precision Stochastic Gradient Descent (SGD) optimizer.","mxnet.ndarray.multi_mp_sgd_mom_update(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.multi_mp_sgd_mom_update"
"mxnet.ndarray.multi_mp_sgd_update","Update function for multi-precision Stochastic Gradient Descent (SDG) optimizer.","mxnet.ndarray.multi_mp_sgd_update(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.multi_mp_sgd_update"
"mxnet.ndarray.multi_sgd_mom_update","Momentum update function for Stochastic Gradient Descent (SGD) optimizer.","mxnet.ndarray.multi_sgd_mom_update(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.multi_sgd_mom_update"
"mxnet.ndarray.multi_sgd_update","Update function for Stochastic Gradient Descent (SDG) optimizer.","mxnet.ndarray.multi_sgd_update(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.multi_sgd_update"
"mxnet.ndarray.multi_sum_sq","Compute the sums of squares of multiple arrays","mxnet.ndarray.multi_sum_sq(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.multi_sum_sq"
"mxnet.ndarray.multiply","Returns element-wise product of the input arrays with broadcasting.","mxnet.ndarray.multiply(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.multiply"
"mxnet.ndarray.nag_mom_update","Update function for Nesterov Accelerated Gradient( NAG) optimizer. It updates the weights using the following formula\,","mxnet.ndarray.nag_mom_update(weight=None\, grad=None\, mom=None\, lr=_Null\, momentum=_Null\, wd=_Null\, rescale_grad=_Null\, clip_gradient=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.nag_mom_update"
"mxnet.ndarray.nanprod","Computes the product of array elements over given axes treating Not a Numbers (NaN) as one.","mxnet.ndarray.nanprod(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.nanprod"
"mxnet.ndarray.nanprod","Computes the product of array elements over given axes treating Not a Numbers (NaN) as one.","mxnet.ndarray.nanprod(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.nanprod"
"mxnet.ndarray.nansum","Computes the sum of array elements over given axes treating Not a Numbers (NaN) as zero.","mxnet.ndarray.nansum(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.nansum"
"mxnet.ndarray.nansum","Computes the sum of array elements over given axes treating Not a Numbers (NaN) as zero.","mxnet.ndarray.nansum(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.nansum"
"mxnet.ndarray.negative","Numerical negative of the argument\, element-wise.","mxnet.ndarray.negative(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.negative"
"mxnet.ndarray.norm","Computes the norm on an NDArray.","mxnet.ndarray.norm(data=None\, ord=_Null\, axis=_Null\, out_dtype=_Null\, keepdims=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.norm"
"mxnet.ndarray.norm","Computes the norm on an NDArray.","mxnet.ndarray.norm(data=None\, ord=_Null\, axis=_Null\, out_dtype=_Null\, keepdims=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.norm"
"mxnet.ndarray.normal","Draw random samples from a normal (Gaussian) distribution.","mxnet.ndarray.normal(loc=_Null\, scale=_Null\, shape=_Null\, ctx=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.normal"
"mxnet.ndarray.not_equal","Returns the result of element-wise not equal to (!=) comparison operation with broadcasting.","mxnet.ndarray.not_equal(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.not_equal"
"mxnet.ndarray.one_hot","Returns a one-hot array.","mxnet.ndarray.one_hot(indices=None\, depth=_Null\, on_value=_Null\, off_value=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.one_hot"
"mxnet.ndarray.one_hot","Returns a one-hot array.","mxnet.ndarray.one_hot(indices=None\, depth=_Null\, on_value=_Null\, off_value=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.one_hot"
"mxnet.ndarray.onehot_encode","One-hot encoding indices into matrix out.","mxnet.ndarray.onehot_encode(indices\, out)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.onehot_encode"
"mxnet.ndarray.ones","Returns a new array filled with all ones\, with the given shape and type.","mxnet.ndarray.ones(shape\, ctx=None\, dtype=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.ones"
"mxnet.ndarray.ones_like","Return an array of ones with the same shape and type as the input array.","mxnet.ndarray.ones_like(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.ones_like"
"mxnet.ndarray.ones_like","Return an array of ones with the same shape and type as the input array.","mxnet.ndarray.ones_like(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.ones_like"
"mxnet.ndarray.pad","Pads an input array with a constant or edge values of the array.","mxnet.ndarray.pad(data=None\, mode=_Null\, pad_width=_Null\, constant_value=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.pad"
"mxnet.ndarray.pad","Pads an input array with a constant or edge values of the array.","mxnet.ndarray.pad(data=None\, mode=_Null\, pad_width=_Null\, constant_value=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.pad"
"mxnet.ndarray.pick","Picks elements from an input array according to the input indices along the given axis.","mxnet.ndarray.pick(data=None\, index=None\, axis=_Null\, keepdims=_Null\, mode=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.pick"
"mxnet.ndarray.pick","Picks elements from an input array according to the input indices along the given axis.","mxnet.ndarray.pick(data=None\, index=None\, axis=_Null\, keepdims=_Null\, mode=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.pick"
"mxnet.ndarray.power","Returns result of first array elements raised to powers from second array\, element-wise with broadcasting.","mxnet.ndarray.power(base\, exp)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.power"
"mxnet.ndarray.preloaded_multi_mp_sgd_mom_update","Momentum update function for multi-precision Stochastic Gradient Descent (SGD) optimizer.","mxnet.ndarray.preloaded_multi_mp_sgd_mom_update(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.preloaded_multi_mp_sgd_mom_update"
"mxnet.ndarray.preloaded_multi_mp_sgd_update","Update function for multi-precision Stochastic Gradient Descent (SDG) optimizer.","mxnet.ndarray.preloaded_multi_mp_sgd_update(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.preloaded_multi_mp_sgd_update"
"mxnet.ndarray.preloaded_multi_sgd_mom_update","Momentum update function for Stochastic Gradient Descent (SGD) optimizer.","mxnet.ndarray.preloaded_multi_sgd_mom_update(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.preloaded_multi_sgd_mom_update"
"mxnet.ndarray.preloaded_multi_sgd_update","Update function for Stochastic Gradient Descent (SDG) optimizer.","mxnet.ndarray.preloaded_multi_sgd_update(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.preloaded_multi_sgd_update"
"mxnet.ndarray.prod","Computes the product of array elements over given axes.","mxnet.ndarray.prod(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.prod"
"mxnet.ndarray.prod","Computes the product of array elements over given axes.","mxnet.ndarray.prod(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.prod"
"mxnet.ndarray.radians","Converts each element of the input array from degrees to radians.","mxnet.ndarray.radians(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.radians"
"mxnet.ndarray.radians","Converts each element of the input array from degrees to radians.","mxnet.ndarray.radians(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.radians"
"mxnet.ndarray.random_exponential","Draw random samples from an exponential distribution.","mxnet.ndarray.random_exponential(lam=_Null\, shape=_Null\, ctx=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_exponential"
"mxnet.ndarray.random_gamma","Draw random samples from a gamma distribution.","mxnet.ndarray.random_gamma(alpha=_Null\, beta=_Null\, shape=_Null\, ctx=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_gamma"
"mxnet.ndarray.random_generalized_negative_binomial","Draw random samples from a generalized negative binomial distribution.","mxnet.ndarray.random_generalized_negative_binomial(mu=_Null\, alpha=_Null\, shape=_Null\, ctx=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_generalized_negative_binomial"
"mxnet.ndarray.random_negative_binomial","Draw random samples from a negative binomial distribution.","mxnet.ndarray.random_negative_binomial(k=_Null\, p=_Null\, shape=_Null\, ctx=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_negative_binomial"
"mxnet.ndarray.random_normal","Draw random samples from a normal (Gaussian) distribution.","mxnet.ndarray.random_normal(loc=_Null\, scale=_Null\, shape=_Null\, ctx=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_normal"
"mxnet.ndarray.random_pdf_dirichlet","Computes the value of the PDF of sample of Dirichlet distributions with parameter alpha.","mxnet.ndarray.random_pdf_dirichlet(sample=None\, alpha=None\, is_log=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_pdf_dirichlet"
"mxnet.ndarray.random_pdf_exponential","Computes the value of the PDF of sample of exponential distributions with parameters lam (rate).","mxnet.ndarray.random_pdf_exponential(sample=None\, lam=None\, is_log=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_pdf_exponential"
"mxnet.ndarray.random_pdf_gamma","Computes the value of the PDF of sample of gamma distributions with parameters alpha (shape) and beta (rate).","mxnet.ndarray.random_pdf_gamma(sample=None\, alpha=None\, beta=None\, is_log=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_pdf_gamma"
"mxnet.ndarray.random_pdf_generalized_negative_binomial","Computes the value of the PDF of sample of generalized negative binomial distributions with parameters mu (mean) and alpha (dispersion).  This can be understood as a reparameterization of the negative binomial\, where k = 1 / alpha and p = 1 / (mu * alpha + 1).","mxnet.ndarray.random_pdf_generalized_negative_binomial(sample=None\, mu=None\, alpha=None\, is_log=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_pdf_generalized_negative_binomial"
"mxnet.ndarray.random_pdf_negative_binomial","Computes the value of the PDF of samples of negative binomial distributions with parameters k (failure limit) and p (failure probability).","mxnet.ndarray.random_pdf_negative_binomial(sample=None\, k=None\, p=None\, is_log=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_pdf_negative_binomial"
"mxnet.ndarray.random_pdf_normal","Computes the value of the PDF of sample of normal distributions with parameters mu (mean) and sigma (standard deviation).","mxnet.ndarray.random_pdf_normal(sample=None\, mu=None\, sigma=None\, is_log=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_pdf_normal"
"mxnet.ndarray.random_pdf_poisson","Computes the value of the PDF of sample of Poisson distributions with parameters lam (rate).","mxnet.ndarray.random_pdf_poisson(sample=None\, lam=None\, is_log=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_pdf_poisson"
"mxnet.ndarray.random_pdf_uniform","Computes the value of the PDF of sample of uniform distributions on the intervals given by [low\,high).","mxnet.ndarray.random_pdf_uniform(sample=None\, low=None\, high=None\, is_log=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_pdf_uniform"
"mxnet.ndarray.random_poisson","Draw random samples from a Poisson distribution.","mxnet.ndarray.random_poisson(lam=_Null\, shape=_Null\, ctx=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_poisson"
"mxnet.ndarray.random_randint","Draw random samples from a discrete uniform distribution.","mxnet.ndarray.random_randint(low=_Null\, high=_Null\, shape=_Null\, ctx=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_randint"
"mxnet.ndarray.random_uniform","Draw random samples from a uniform distribution.","mxnet.ndarray.random_uniform(low=_Null\, high=_Null\, shape=_Null\, ctx=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.random_uniform"
"mxnet.ndarray.ravel_multi_index","Converts a batch of index arrays into an array of flat indices. The operator follows numpy conventions so a single multi index is given by a column of the input matrix. The leading dimension may be left unspecified by using -1 as placeholder.","mxnet.ndarray.ravel_multi_index(data=None\, shape=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.ravel_multi_index"
"mxnet.ndarray.rcbrt","Returns element-wise inverse cube-root value of the input.","mxnet.ndarray.rcbrt(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.rcbrt"
"mxnet.ndarray.rcbrt","Returns element-wise inverse cube-root value of the input.","mxnet.ndarray.rcbrt(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.rcbrt"
"mxnet.ndarray.reciprocal","Returns the reciprocal of the argument\, element-wise.","mxnet.ndarray.reciprocal(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.reciprocal"
"mxnet.ndarray.reciprocal","Returns the reciprocal of the argument\, element-wise.","mxnet.ndarray.reciprocal(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.reciprocal"
"mxnet.ndarray.relu","Computes rectified linear activation.","mxnet.ndarray.relu(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.relu"
"mxnet.ndarray.relu","Computes rectified linear activation.","mxnet.ndarray.relu(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.relu"
"mxnet.ndarray.repeat","Repeats elements of an array. By default\, repeat flattens the input array into 1-D and then repeats the elements:","mxnet.ndarray.repeat(data=None\, repeats=_Null\, axis=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.repeat"
"mxnet.ndarray.repeat","Repeats elements of an array. By default\, repeat flattens the input array into 1-D and then repeats the elements:","mxnet.ndarray.repeat(data=None\, repeats=_Null\, axis=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.repeat"
"mxnet.ndarray.reset_arrays","Set to zero multiple arrays","mxnet.ndarray.reset_arrays(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.reset_arrays"
"mxnet.ndarray.reshape","Reshapes the input array. .. note:: Reshape is deprecated\, use reshape Given an array and a shape\, this function returns a copy of the array in the new shape. The shape is a tuple of integers such as (2\,3\,4). The size of the new shape should be same as the size of the input array. Example:","mxnet.ndarray.reshape(data=None\, shape=_Null\, reverse=_Null\, target_shape=_Null\, keep_highest=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.reshape"
"mxnet.ndarray.reshape_like","Reshape some or all dimensions of lhs to have the same shape as some or all dimensions of rhs.","mxnet.ndarray.reshape_like(lhs=None\, rhs=None\, lhs_begin=_Null\, lhs_end=_Null\, rhs_begin=_Null\, rhs_end=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.reshape_like"
"mxnet.ndarray.reshape_like","Reshape some or all dimensions of lhs to have the same shape as some or all dimensions of rhs.","mxnet.ndarray.reshape_like(lhs=None\, rhs=None\, lhs_begin=_Null\, lhs_end=_Null\, rhs_begin=_Null\, rhs_end=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.reshape_like"
"mxnet.ndarray.reverse","Reverses the order of elements along given axis while preserving array shape. Note: reverse and flip are equivalent. We use reverse in the following examples. Examples:","mxnet.ndarray.reverse(data=None\, axis=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.reverse"
"mxnet.ndarray.rint","Returns element-wise rounded value to the nearest integer of the input.","mxnet.ndarray.rint(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.rint"
"mxnet.ndarray.rint","Returns element-wise rounded value to the nearest integer of the input.","mxnet.ndarray.rint(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.rint"
"mxnet.ndarray.rmsprop_update","Update function for RMSProp optimizer.","mxnet.ndarray.rmsprop_update(weight=None\, grad=None\, n=None\, lr=_Null\, gamma1=_Null\, epsilon=_Null\, wd=_Null\, rescale_grad=_Null\, clip_gradient=_Null\, clip_weights=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.rmsprop_update"
"mxnet.ndarray.rmspropalex_update","Update function for RMSPropAlex optimizer.","mxnet.ndarray.rmspropalex_update(weight=None\, grad=None\, n=None\, g=None\, delta=None\, lr=_Null\, gamma1=_Null\, gamma2=_Null\, epsilon=_Null\, wd=_Null\, rescale_grad=_Null\, clip_gradient=_Null\, clip_weights=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.rmspropalex_update"
"mxnet.ndarray.round","Returns element-wise rounded value to the nearest integer of the input.","mxnet.ndarray.round(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.round"
"mxnet.ndarray.round","Returns element-wise rounded value to the nearest integer of the input.","mxnet.ndarray.round(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.round"
"mxnet.ndarray.rsqrt","Returns element-wise inverse square-root value of the input.","mxnet.ndarray.rsqrt(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.rsqrt"
"mxnet.ndarray.rsqrt","Returns element-wise inverse square-root value of the input.","mxnet.ndarray.rsqrt(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.rsqrt"
"mxnet.ndarray.sample_exponential","Concurrent sampling from multiple exponential distributions with parameters lambda (rate).","mxnet.ndarray.sample_exponential(lam=None\, shape=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sample_exponential"
"mxnet.ndarray.sample_gamma","Concurrent sampling from multiple gamma distributions with parameters alpha (shape) and beta (scale).","mxnet.ndarray.sample_gamma(alpha=None\, beta=None\, shape=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sample_gamma"
"mxnet.ndarray.sample_generalized_negative_binomial","Concurrent sampling from multiple generalized negative binomial distributions with parameters mu (mean) and alpha (dispersion).","mxnet.ndarray.sample_generalized_negative_binomial(mu=None\, alpha=None\, shape=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sample_generalized_negative_binomial"
"mxnet.ndarray.sample_multinomial","Concurrent sampling from multiple multinomial distributions.","mxnet.ndarray.sample_multinomial(data=None\, shape=_Null\, get_prob=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sample_multinomial"
"mxnet.ndarray.sample_negative_binomial","Concurrent sampling from multiple negative binomial distributions with parameters k (failure limit) and p (failure probability).","mxnet.ndarray.sample_negative_binomial(k=None\, p=None\, shape=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sample_negative_binomial"
"mxnet.ndarray.sample_normal","Concurrent sampling from multiple normal distributions with parameters mu (mean) and sigma (standard deviation).","mxnet.ndarray.sample_normal(mu=None\, sigma=None\, shape=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sample_normal"
"mxnet.ndarray.sample_poisson","Concurrent sampling from multiple Poisson distributions with parameters lambda (rate).","mxnet.ndarray.sample_poisson(lam=None\, shape=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sample_poisson"
"mxnet.ndarray.sample_uniform","Concurrent sampling from multiple uniform distributions on the intervals given by [low\,high).","mxnet.ndarray.sample_uniform(low=None\, high=None\, shape=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sample_uniform"
"mxnet.ndarray.save","Saves a list of arrays or a dict of str->array to file.","mxnet.ndarray.save(fname\, data)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.save"
"mxnet.ndarray.scatter_nd","Scatters data into a new tensor according to indices.","mxnet.ndarray.scatter_nd(data=None\, indices=None\, shape=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.scatter_nd"
"mxnet.ndarray.sgd_mom_update","Momentum update function for Stochastic Gradient Descent (SGD) optimizer.","mxnet.ndarray.sgd_mom_update(weight=None\, grad=None\, mom=None\, lr=_Null\, momentum=_Null\, wd=_Null\, rescale_grad=_Null\, clip_gradient=_Null\, lazy_update=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sgd_mom_update"
"mxnet.ndarray.sgd_update","Update function for Stochastic Gradient Descent (SGD) optimizer.","mxnet.ndarray.sgd_update(weight=None\, grad=None\, lr=_Null\, wd=_Null\, rescale_grad=_Null\, clip_gradient=_Null\, lazy_update=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sgd_update"
"mxnet.ndarray.shape_array","Returns a 1D int64 array containing the shape of data.","mxnet.ndarray.shape_array(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.shape_array"
"mxnet.ndarray.shape_array","Returns a 1D int64 array containing the shape of data.","mxnet.ndarray.shape_array(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.shape_array"
"mxnet.ndarray.shuffle","Randomly shuffle the elements.","mxnet.ndarray.shuffle(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.shuffle"
"mxnet.ndarray.sigmoid","Computes sigmoid of x element-wise.","mxnet.ndarray.sigmoid(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sigmoid"
"mxnet.ndarray.sigmoid","Computes sigmoid of x element-wise.","mxnet.ndarray.sigmoid(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sigmoid"
"mxnet.ndarray.sign","Returns element-wise sign of the input.","mxnet.ndarray.sign(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sign"
"mxnet.ndarray.sign","Returns element-wise sign of the input.","mxnet.ndarray.sign(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sign"
"mxnet.ndarray.signsgd_update","Update function for SignSGD optimizer.","mxnet.ndarray.signsgd_update(weight=None\, grad=None\, lr=_Null\, wd=_Null\, rescale_grad=_Null\, clip_gradient=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.signsgd_update"
"mxnet.ndarray.signum_update","SIGN momentUM (Signum) optimizer.","mxnet.ndarray.signum_update(weight=None\, grad=None\, mom=None\, lr=_Null\, momentum=_Null\, wd=_Null\, rescale_grad=_Null\, clip_gradient=_Null\, wd_lh=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.signum_update"
"mxnet.ndarray.sin","Computes the element-wise sine of the input array.","mxnet.ndarray.sin(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sin"
"mxnet.ndarray.sin","Computes the element-wise sine of the input array.","mxnet.ndarray.sin(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sin"
"mxnet.ndarray.sinh","Returns the hyperbolic sine of the input array\, computed element-wise.","mxnet.ndarray.sinh(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sinh"
"mxnet.ndarray.sinh","Returns the hyperbolic sine of the input array\, computed element-wise.","mxnet.ndarray.sinh(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sinh"
"mxnet.ndarray.size_array","Returns a 1D int64 array containing the size of data.","mxnet.ndarray.size_array(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.size_array"
"mxnet.ndarray.size_array","Returns a 1D int64 array containing the size of data.","mxnet.ndarray.size_array(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.size_array"
"mxnet.ndarray.slice","Slices a region of the array. .. note:: crop is deprecated. Use slice instead. This function returns a sliced array between the indices given by begin and end with the corresponding step. For an input array of shape=(d_0\, d_1\, ...\, d_n-1)\, slice operation with begin=(b_0\, b_1...b_m-1)\, end=(e_0\, e_1\, ...\, e_m-1)\, and step=(s_0\, s_1\, ...\, s_m-1)\, where m <= n\, results in an array with the shape (|e_0-b_0|/|s_0|\, ...\, |e_m-1-b_m-1|/|s_m-1|\, d_m\, ...\, d_n-1). The resulting array‚Äôs k-th dimension contains elements from the k-th dimension of the input array starting from index b_k (inclusive) with step s_k until reaching e_k (exclusive). If the k-th elements are None in the sequence of begin\, end\, and step\, the following rule will be used to set default values. If s_k is None\, set s_k=1. If s_k > 0\, set b_k=0\, e_k=d_k; else\, set b_k=d_k-1\, e_k=-1. The storage type of slice output depends on storage types of inputs - slice(csr) = csr - otherwise\, slice generates output with default storage .. note:: When input data storage type is csr\, it only supports","mxnet.ndarray.slice(data=None\, begin=_Null\, end=_Null\, step=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.slice"
"mxnet.ndarray.slice","Slices a region of the array. .. note:: crop is deprecated. Use slice instead. This function returns a sliced array between the indices given by begin and end with the corresponding step. For an input array of shape=(d_0\, d_1\, ...\, d_n-1)\, slice operation with begin=(b_0\, b_1...b_m-1)\, end=(e_0\, e_1\, ...\, e_m-1)\, and step=(s_0\, s_1\, ...\, s_m-1)\, where m <= n\, results in an array with the shape (|e_0-b_0|/|s_0|\, ...\, |e_m-1-b_m-1|/|s_m-1|\, d_m\, ...\, d_n-1). The resulting array‚Äôs k-th dimension contains elements from the k-th dimension of the input array starting from index b_k (inclusive) with step s_k until reaching e_k (exclusive). If the k-th elements are None in the sequence of begin\, end\, and step\, the following rule will be used to set default values. If s_k is None\, set s_k=1. If s_k > 0\, set b_k=0\, e_k=d_k; else\, set b_k=d_k-1\, e_k=-1. The storage type of slice output depends on storage types of inputs - slice(csr) = csr - otherwise\, slice generates output with default storage .. note:: When input data storage type is csr\, it only supports","mxnet.ndarray.slice(data=None\, begin=_Null\, end=_Null\, step=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.slice"
"mxnet.ndarray.slice_axis","Slices along a given axis. Returns an array slice along a given axis starting from the begin index to the end index. Examples:","mxnet.ndarray.slice_axis(data=None\, axis=_Null\, begin=_Null\, end=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.slice_axis"
"mxnet.ndarray.slice_axis","Slices along a given axis. Returns an array slice along a given axis starting from the begin index to the end index. Examples:","mxnet.ndarray.slice_axis(data=None\, axis=_Null\, begin=_Null\, end=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.slice_axis"
"mxnet.ndarray.slice_like","Slices a region of the array like the shape of another array. This function is similar to slice\, however\, the begin are always 0`s and `end of specific axes are inferred from the second input shape_like. Given the second shape_like input of shape=(d_0\, d_1\, ...\, d_n-1)\, a slice_like operator with default empty axes\, it performs the following operation: `` out = slice(input\, begin=(0\, 0\, ‚Ä¶\, 0)\, end=(d_0\, d_1\, ‚Ä¶\, d_n-1))``. When axes is not empty\, it is used to speficy which axes are being sliced. Given a 4-d input data\, slice_like operator with axes=(0\, 2\, -1) will perform the following operation: `` out = slice(input\, begin=(0\, 0\, 0\, 0)\, end=(d_0\, None\, d_2\, d_3))``. Note that it is allowed to have first and second input with different dimensions\, however\, you have to make sure the axes are specified and not exceeding the dimension limits. For example\, given input_1 with shape=(2\,3\,4\,5) and input_2 with shape=(1\,2\,3)\, it is not allowed to use: `` out = slice_like(a\, b)`` because ndim of input_1 is 4\, and ndim of input_2 is 3. The following is allowed in this situation: `` out = slice_like(a\, b\, axes=(0\, 2))`` Example:","mxnet.ndarray.slice_like(data=None\, shape_like=None\, axes=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.slice_like"
"mxnet.ndarray.slice_like","Slices a region of the array like the shape of another array. This function is similar to slice\, however\, the begin are always 0`s and `end of specific axes are inferred from the second input shape_like. Given the second shape_like input of shape=(d_0\, d_1\, ...\, d_n-1)\, a slice_like operator with default empty axes\, it performs the following operation: `` out = slice(input\, begin=(0\, 0\, ‚Ä¶\, 0)\, end=(d_0\, d_1\, ‚Ä¶\, d_n-1))``. When axes is not empty\, it is used to speficy which axes are being sliced. Given a 4-d input data\, slice_like operator with axes=(0\, 2\, -1) will perform the following operation: `` out = slice(input\, begin=(0\, 0\, 0\, 0)\, end=(d_0\, None\, d_2\, d_3))``. Note that it is allowed to have first and second input with different dimensions\, however\, you have to make sure the axes are specified and not exceeding the dimension limits. For example\, given input_1 with shape=(2\,3\,4\,5) and input_2 with shape=(1\,2\,3)\, it is not allowed to use: `` out = slice_like(a\, b)`` because ndim of input_1 is 4\, and ndim of input_2 is 3. The following is allowed in this situation: `` out = slice_like(a\, b\, axes=(0\, 2))`` Example:","mxnet.ndarray.slice_like(data=None\, shape_like=None\, axes=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.slice_like"
"mxnet.ndarray.smooth_l1","Calculate Smooth L1 Loss(lhs\, scalar) by summing","mxnet.ndarray.smooth_l1(data=None\, scalar=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.smooth_l1"
"mxnet.ndarray.softmax","Applies the softmax function.","mxnet.ndarray.softmax(data=None\, length=None\, axis=_Null\, temperature=_Null\, dtype=_Null\, use_length=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.softmax"
"mxnet.ndarray.softmax","Applies the softmax function.","mxnet.ndarray.softmax(data=None\, length=None\, axis=_Null\, temperature=_Null\, dtype=_Null\, use_length=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.softmax"
"mxnet.ndarray.softmax_cross_entropy","Calculate cross entropy of softmax output and one-hot label.","mxnet.ndarray.softmax_cross_entropy(data=None\, label=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.softmax_cross_entropy"
"mxnet.ndarray.softmin","Applies the softmin function.","mxnet.ndarray.softmin(data=None\, axis=_Null\, temperature=_Null\, dtype=_Null\, use_length=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.softmin"
"mxnet.ndarray.softmin","Applies the softmin function.","mxnet.ndarray.softmin(data=None\, axis=_Null\, temperature=_Null\, dtype=_Null\, use_length=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.softmin"
"mxnet.ndarray.softsign","Computes softsign of x element-wise.","mxnet.ndarray.softsign(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.softsign"
"mxnet.ndarray.sort","Returns a sorted copy of an input array along the given axis.","mxnet.ndarray.sort(data=None\, axis=_Null\, is_ascend=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sort"
"mxnet.ndarray.sort","Returns a sorted copy of an input array along the given axis.","mxnet.ndarray.sort(data=None\, axis=_Null\, is_ascend=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sort"
"mxnet.ndarray.space_to_depth","Rearranges(permutes) blocks of spatial data into depth. Similar to ONNX SpaceToDepth operator: https://github.com/onnx/onnx/blob/master/docs/Operators.md#SpaceToDepth The output is a new tensor where the values from height and width dimension are moved to the depth dimension. The reverse of this operation is depth_to_space. .. math:","mxnet.ndarray.space_to_depth(data=None\, block_size=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.space_to_depth"
"mxnet.ndarray.space_to_depth","Rearranges(permutes) blocks of spatial data into depth. Similar to ONNX SpaceToDepth operator: https://github.com/onnx/onnx/blob/master/docs/Operators.md#SpaceToDepth The output is a new tensor where the values from height and width dimension are moved to the depth dimension. The reverse of this operation is depth_to_space. .. math:","mxnet.ndarray.space_to_depth(data=None\, block_size=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.space_to_depth"
"mxnet.ndarray.split","Splits an array along a particular axis into multiple sub-arrays.","mxnet.ndarray.split(data=None\, num_outputs=_Null\, axis=_Null\, squeeze_axis=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.split"
"mxnet.ndarray.split","Splits an array along a particular axis into multiple sub-arrays.","mxnet.ndarray.split(data=None\, num_outputs=_Null\, axis=_Null\, squeeze_axis=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.split"
"mxnet.ndarray.split_v2","Split an array into multiple sub-arrays.","mxnet.ndarray.split_v2(ary\, indices_or_sections\, axis=0\, squeeze_axis=False)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.split_v2"
"mxnet.ndarray.split_v2","Split an array into multiple sub-arrays.","mxnet.ndarray.split_v2(ary\, indices_or_sections\, axis=0\, squeeze_axis=False)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.split_v2"
"mxnet.ndarray.sqrt","Returns element-wise square-root value of the input.","mxnet.ndarray.sqrt(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sqrt"
"mxnet.ndarray.sqrt","Returns element-wise square-root value of the input.","mxnet.ndarray.sqrt(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sqrt"
"mxnet.ndarray.square","Returns element-wise squared value of the input.","mxnet.ndarray.square(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.square"
"mxnet.ndarray.square","Returns element-wise squared value of the input.","mxnet.ndarray.square(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.square"
"mxnet.ndarray.squeeze","Remove single-dimensional entries from the shape of an array. Same behavior of defining the output tensor shape as numpy.squeeze for the most of cases. See the following note for exception. Examples:","mxnet.ndarray.squeeze(data=None\, axis=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.squeeze"
"mxnet.ndarray.stack","Join a sequence of arrays along a new axis. The axis parameter specifies the index of the new axis in the dimensions of the result. For example\, if axis=0 it will be the first dimension and if axis=-1 it will be the last dimension. Examples:","mxnet.ndarray.stack(*data\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.stack"
"mxnet.ndarray.stop_gradient","Stops gradient computation.","mxnet.ndarray.stop_gradient(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.stop_gradient"
"mxnet.ndarray.subtract","Returns element-wise difference of the input arrays with broadcasting.","mxnet.ndarray.subtract(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.subtract"
"mxnet.ndarray.sum","Computes the sum of array elements over given axes.","mxnet.ndarray.sum(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sum"
"mxnet.ndarray.sum","Computes the sum of array elements over given axes.","mxnet.ndarray.sum(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sum"
"mxnet.ndarray.sum_axis","Computes the sum of array elements over given axes.","mxnet.ndarray.sum_axis(data=None\, axis=_Null\, keepdims=_Null\, exclude=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.sum_axis"
"mxnet.ndarray.swapaxes","Interchanges two axes of an array.","mxnet.ndarray.swapaxes(data=None\, dim1=_Null\, dim2=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.swapaxes"
"mxnet.ndarray.swapaxes","Interchanges two axes of an array.","mxnet.ndarray.swapaxes(data=None\, dim1=_Null\, dim2=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.swapaxes"
"mxnet.ndarray.take","Takes elements from an input array along the given axis.","mxnet.ndarray.take(a=None\, indices=None\, axis=_Null\, mode=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.take"
"mxnet.ndarray.take","Takes elements from an input array along the given axis.","mxnet.ndarray.take(a=None\, indices=None\, axis=_Null\, mode=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.take"
"mxnet.ndarray.tan","Computes the element-wise tangent of the input array.","mxnet.ndarray.tan(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.tan"
"mxnet.ndarray.tan","Computes the element-wise tangent of the input array.","mxnet.ndarray.tan(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.tan"
"mxnet.ndarray.tanh","Returns the hyperbolic tangent of the input array\, computed element-wise.","mxnet.ndarray.tanh(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.tanh"
"mxnet.ndarray.tanh","Returns the hyperbolic tangent of the input array\, computed element-wise.","mxnet.ndarray.tanh(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.tanh"
"mxnet.ndarray.tile","Repeats the whole array multiple times. If reps has length d\, and input array has dimension of n. There are three cases: - n=d. Repeat i-th dimension of the input by reps[i] times:","mxnet.ndarray.tile(data=None\, reps=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.tile"
"mxnet.ndarray.tile","Repeats the whole array multiple times. If reps has length d\, and input array has dimension of n. There are three cases: - n=d. Repeat i-th dimension of the input by reps[i] times:","mxnet.ndarray.tile(data=None\, reps=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.tile"
"mxnet.ndarray.to_dlpack_for_read"," Returns a reference view of NDArray that represents as DLManagedTensor untilall previous write operations on the current array are finished.  ","mxnet.ndarray.to_dlpack_for_read(data)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.to_dlpack_for_read"
"mxnet.ndarray.to_dlpack_for_write"," Returns a reference view of NDArray that represents as DLManagedTensor untilall previous read/write operations on the current array are finished.  ","mxnet.ndarray.to_dlpack_for_write(data)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.to_dlpack_for_write"
"mxnet.ndarray.topk"," Returns the indices of the top k elements in an input array along the givenaxis (by default). If ret_type is set to ‚Äòvalue‚Äô returns the value of top k elements (instead of indices). In case of ret_type = ‚Äòboth‚Äô\, both value and index would be returned. The returned elements will be sorted.  ","mxnet.ndarray.topk(data=None\, axis=_Null\, k=_Null\, ret_typ=_Null\, is_ascend=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.topk"
"mxnet.ndarray.topk"," Returns the indices of the top k elements in an input array along the givenaxis (by default). If ret_type is set to ‚Äòvalue‚Äô returns the value of top k elements (instead of indices). In case of ret_type = ‚Äòboth‚Äô\, both value and index would be returned. The returned elements will be sorted.  ","mxnet.ndarray.topk(data=None\, axis=_Null\, k=_Null\, ret_typ=_Null\, is_ascend=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.topk"
"mxnet.ndarray.transpose","Permutes the dimensions of an array. Examples:","mxnet.ndarray.transpose(data=None\, axes=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.transpose"
"mxnet.ndarray.transpose","Permutes the dimensions of an array. Examples:","mxnet.ndarray.transpose(data=None\, axes=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.transpose"
"mxnet.ndarray.true_divide","This function is similar to divide().","mxnet.ndarray.true_divide(lhs\, rhs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.true_divide"
"mxnet.ndarray.trunc","Return the element-wise truncated value of the input.","mxnet.ndarray.trunc(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.trunc"
"mxnet.ndarray.trunc","Return the element-wise truncated value of the input.","mxnet.ndarray.trunc(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.trunc"
"mxnet.ndarray.uniform","Draw random samples from a uniform distribution.","mxnet.ndarray.uniform(low=_Null\, high=_Null\, shape=_Null\, ctx=_Null\, dtype=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.uniform"
"mxnet.ndarray.unravel_index","Converts an array of flat indices into a batch of index arrays. The operator follows numpy conventions so a single multi index is given by a column of the output matrix. The leading dimension may be left unspecified by using -1 as placeholder.","mxnet.ndarray.unravel_index(data=None\, shape=_Null\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.unravel_index"
"mxnet.ndarray.waitall","Wait for all async operations to finish in MXNet.","mxnet.ndarray.waitall()","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.waitall"
"mxnet.ndarray.where","Return the elements\, either from x or y\, depending on the condition.","mxnet.ndarray.where(condition=None\, x=None\, y=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.where"
"mxnet.ndarray.zeros","Return a new array of given shape and type\, filled with zeros.","mxnet.ndarray.zeros(shape\, ctx=None\, dtype=None\, stype=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.zeros"
"mxnet.ndarray.zeros","Return a new array of given shape and type\, filled with zeros.","mxnet.ndarray.zeros(shape\, ctx=None\, dtype=None\, stype=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.zeros"
"mxnet.ndarray.zeros_like","Return an array of zeros with the same shape\, type and storage type as the input array.","mxnet.ndarray.zeros_like(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.zeros_like"
"mxnet.ndarray.zeros_like","Return an array of zeros with the same shape\, type and storage type as the input array.","mxnet.ndarray.zeros_like(data=None\, out=None\, name=None\, **kwargs)","https://mxnet.apache.org/versions/1.8.0/api/python/docs/api/ndarray/ndarray.html#mxnet.ndarray.zeros_like"
