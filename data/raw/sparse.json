[{"name":"COO","description":"A sparse multidimensional array.","signature":"COO(coords[, data, shape, has_duplicates, …])","url":"https://sparse.pydata.org/en/latest/generated/sparse.COO.html#sparse.COO"},{"name":"DOK","description":"A class for building sparse multidimensional arrays.","signature":"DOK(shape[, data, dtype, fill_value])","url":"https://sparse.pydata.org/en/latest/generated/sparse.DOK.html#sparse.DOK"},{"name":"SparseArray","description":"An abstract base class for all the sparse array classes.","signature":"SparseArray(shape[, fill_value])","url":"https://sparse.pydata.org/en/latest/generated/sparse.SparseArray.html#sparse.SparseArray"},{"name":"argwhere","description":"Find the indices of array elements that are non-zero, grouped by element.","signature":"argwhere(a)","url":"https://sparse.pydata.org/en/latest/generated/sparse.argwhere.html#sparse.argwhere"},{"name":"as_coo","description":"Converts any given format to COO.","signature":"as_coo(x[, shape, fill_value])","url":"https://sparse.pydata.org/en/latest/generated/sparse.as_coo.html#sparse.as_coo"},{"name":"clip","description":"Clip (limit) the values in the array.","signature":"clip(a[, a_min, a_max, out])","url":"https://sparse.pydata.org/en/latest/generated/sparse.clip.html#sparse.clip"},{"name":"concatenate","description":"Concatenate the input arrays along the given dimension.","signature":"concatenate(arrays[, axis, compressed_axes])","url":"https://sparse.pydata.org/en/latest/generated/sparse.concatenate.html#sparse.concatenate"},{"name":"diagonal","description":"Extract diagonal from a COO array.","signature":"diagonal(a[, offset, axis1, axis2])","url":"https://sparse.pydata.org/en/latest/generated/sparse.diagonal.html#sparse.diagonal"},{"name":"diagonalize","description":"Diagonalize a COO array.","signature":"diagonalize(a[, axis])","url":"https://sparse.pydata.org/en/latest/generated/sparse.diagonalize.html#sparse.diagonalize"},{"name":"dot","description":"Perform the equivalent of numpy.dot on two arrays.","signature":"dot(a, b)","url":"https://sparse.pydata.org/en/latest/generated/sparse.dot.html#sparse.dot"},{"name":"elemwise","description":"Apply a function to any number of arguments.","signature":"elemwise(func, *args, **kwargs)","url":"https://sparse.pydata.org/en/latest/generated/sparse.elemwise.html#sparse.elemwise"},{"name":"eye","description":"Return a 2-D array in the specified format with ones on the diagonal and zeros elsewhere.","signature":"eye(N[, M, k, dtype, format, compressed_axes])","url":"https://sparse.pydata.org/en/latest/generated/sparse.eye.html#sparse.eye"},{"name":"full","description":"Return a SparseArray of given shape and type, filled with fill_value.","signature":"full(shape, fill_value[, dtype, format, …])","url":"https://sparse.pydata.org/en/latest/generated/sparse.full.html#sparse.full"},{"name":"full_like","description":"Return a full array with the same shape and type as a given array.","signature":"full_like(a, fill_value[, dtype, format, …])","url":"https://sparse.pydata.org/en/latest/generated/sparse.full_like.html#sparse.full_like"},{"name":"isneginf","description":"Test element-wise for negative infinity, return result as sparse bool array.","signature":"isneginf(x[, out])","url":"https://sparse.pydata.org/en/latest/generated/sparse.isneginf.html#sparse.isneginf"},{"name":"isposinf","description":"Test element-wise for positive infinity, return result as sparse bool array.","signature":"isposinf(x[, out])","url":"https://sparse.pydata.org/en/latest/generated/sparse.isposinf.html#sparse.isposinf"},{"name":"kron","description":"Kronecker product of 2 sparse arrays.","signature":"kron(a, b)","url":"https://sparse.pydata.org/en/latest/generated/sparse.kron.html#sparse.kron"},{"name":"load_npz","description":"Load a sparse matrix in numpy’s .npz format from disk.","signature":"load_npz(filename)","url":"https://sparse.pydata.org/en/latest/generated/sparse.load_npz.html#sparse.load_npz"},{"name":"matmul","description":"Perform the equivalent of numpy.matmul on two arrays.","signature":"matmul(a, b)","url":"https://sparse.pydata.org/en/latest/generated/sparse.matmul.html#sparse.matmul"},{"name":"nanmax","description":"Maximize along the given axes, skipping NaN values.","signature":"nanmax(x[, axis, keepdims, dtype, out])","url":"https://sparse.pydata.org/en/latest/generated/sparse.nanmax.html#sparse.nanmax"},{"name":"nanmean","description":"Performs a NaN skipping mean operation along the given axes.","signature":"nanmean(x[, axis, keepdims, dtype, out])","url":"https://sparse.pydata.org/en/latest/generated/sparse.nanmean.html#sparse.nanmean"},{"name":"nanmin","description":"Minimize along the given axes, skipping NaN values.","signature":"nanmin(x[, axis, keepdims, dtype, out])","url":"https://sparse.pydata.org/en/latest/generated/sparse.nanmin.html#sparse.nanmin"},{"name":"nanprod","description":"Performs a product operation along the given axes, skipping NaN values.","signature":"nanprod(x[, axis, keepdims, dtype, out])","url":"https://sparse.pydata.org/en/latest/generated/sparse.nanprod.html#sparse.nanprod"},{"name":"nanreduce","description":"Performs an NaN skipping reduction on this array.","signature":"nanreduce(x, method[, identity, axis, keepdims])","url":"https://sparse.pydata.org/en/latest/generated/sparse.nanreduce.html#sparse.nanreduce"},{"name":"nansum","description":"Performs a NaN skipping sum operation along the given axes.","signature":"nansum(x[, axis, keepdims, dtype, out])","url":"https://sparse.pydata.org/en/latest/generated/sparse.nansum.html#sparse.nansum"},{"name":"ones","description":"Return a SparseArray of given shape and type, filled with ones.","signature":"ones(shape[, dtype, format, compressed_axes])","url":"https://sparse.pydata.org/en/latest/generated/sparse.ones.html#sparse.ones"},{"name":"ones_like","description":"Return a SparseArray of ones with the same shape and type as a.","signature":"ones_like(a[, dtype, format, compressed_axes])","url":"https://sparse.pydata.org/en/latest/generated/sparse.ones_like.html#sparse.ones_like"},{"name":"outer","description":"Return outer product of two sparse arrays.","signature":"outer(a, b[, out])","url":"https://sparse.pydata.org/en/latest/generated/sparse.outer.html#sparse.outer"},{"name":"random","description":"Generate a random sparse multidimensional array","signature":"random(shape[, density, random_state, …])","url":"https://sparse.pydata.org/en/latest/generated/sparse.random.html#sparse.random"},{"name":"result_type","description":"Returns the type that results from applying the NumPy type promotion rules to the arguments.","signature":"result_type(*arrays_and_dtypes)","url":"https://sparse.pydata.org/en/latest/generated/sparse.result_type.html#sparse.result_type"},{"name":"roll","description":"Shifts elements of an array along specified axis.","signature":"roll(a, shift[, axis])","url":"https://sparse.pydata.org/en/latest/generated/sparse.roll.html#sparse.roll"},{"name":"save_npz","description":"Save a sparse matrix to disk in numpy’s .npz format.","signature":"save_npz(filename, matrix[, compressed])","url":"https://sparse.pydata.org/en/latest/generated/sparse.save_npz.html#sparse.save_npz"},{"name":"stack","description":"Stack the input arrays along the given dimension.","signature":"stack(arrays[, axis, compressed_axes])","url":"https://sparse.pydata.org/en/latest/generated/sparse.stack.html#sparse.stack"},{"name":"tensordot","description":"Perform the equivalent of numpy.tensordot.","signature":"tensordot(a, b[, axes])","url":"https://sparse.pydata.org/en/latest/generated/sparse.tensordot.html#sparse.tensordot"},{"name":"tril","description":"Returns an array with all elements above the k-th diagonal set to zero.","signature":"tril(x[, k])","url":"https://sparse.pydata.org/en/latest/generated/sparse.tril.html#sparse.tril"},{"name":"triu","description":"Returns an array with all elements below the k-th diagonal set to zero.","signature":"triu(x[, k])","url":"https://sparse.pydata.org/en/latest/generated/sparse.triu.html#sparse.triu"},{"name":"where","description":"Select values from either x or y depending on condition.","signature":"where(condition[, x, y])","url":"https://sparse.pydata.org/en/latest/generated/sparse.where.html#sparse.where"},{"name":"zeros","description":"Return a SparseArray of given shape and type, filled with zeros.","signature":"zeros(shape[, dtype, format, compressed_axes])","url":"https://sparse.pydata.org/en/latest/generated/sparse.zeros.html#sparse.zeros"},{"name":"zeros_like","description":"Return a SparseArray of zeros with the same shape and type as a.","signature":"zeros_like(a[, dtype, format, compressed_axes])","url":"https://sparse.pydata.org/en/latest/generated/sparse.zeros_like.html#sparse.zeros_like"}]
