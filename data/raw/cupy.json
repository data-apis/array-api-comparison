[{"name":"cupy.absolute = <ufunc 'cupy_absolute'>","description":"Elementwise absolute value function.","signature":"cupy.absolute = <ufunc 'cupy_absolute'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.absolute.html#cupy.absolute","numpy":"numpy.absolute","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.absolute.html#numpy.absolute"},{"name":"cupy.add = <ufunc 'cupy_add'>","description":"Adds two arrays elementwise.","signature":"cupy.add = <ufunc 'cupy_add'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.add.html#cupy.add","numpy":"numpy.add","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.add.html#numpy.add"},{"name":"cupy.all","description":"Tests whether all array elements along a given axis evaluate to True.","signature":"cupy.all(a, axis=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.all.html#cupy.all","numpy":"numpy.all()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.all.html#numpy.all"},{"name":"cupy.allclose","description":"Returns True if two arrays are element-wise equal within a tolerance.","signature":"cupy.allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.allclose.html#cupy.allclose","numpy":"numpy.allclose()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.allclose.html#numpy.allclose"},{"name":"cupy.amax","description":"Returns the maximum of an array or the maximum along an axis.","signature":"cupy.amax(a, axis=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.amax.html#cupy.amax","numpy":"numpy.amax()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.amax.html#numpy.amax"},{"name":"cupy.amin","description":"Returns the minimum of an array or the minimum along an axis.","signature":"cupy.amin(a, axis=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.amin.html#cupy.amin","numpy":"numpy.amin()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.amin.html#numpy.amin"},{"name":"cupy.angle = <ufunc 'cupy_angle'>","description":"Returns the angle of the complex argument.","signature":"cupy.angle = <ufunc 'cupy_angle'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.angle.html#cupy.angle","numpy":"numpy.angle()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.angle.html#numpy.angle"},{"name":"cupy.any","description":"Tests whether any array elements along a given axis evaluate to True.","signature":"cupy.any(a, axis=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.any.html#cupy.any","numpy":"numpy.any()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.any.html#numpy.any"},{"name":"cupy.append","description":"Append values to the end of an array.","signature":"cupy.append(arr, values, axis=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.append.html#cupy.append","numpy":"numpy.append()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.append.html#numpy.append"},{"name":"cupy.apply_along_axis","description":"Apply a function to 1-D slices along the given axis.","signature":"cupy.apply_along_axis(func1d, axis, arr, *args, **kwargs)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.apply_along_axis.html#cupy.apply_along_axis","numpy":"","numpy_url":""},{"name":"cupy.arange","description":"Returns an array with evenly spaced values within a given interval.","signature":"cupy.arange(start, stop=None, step=1, dtype=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.arange.html#cupy.arange","numpy":"numpy.arange()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.arange.html#numpy.arange"},{"name":"cupy.arccos = <ufunc 'cupy_arccos'>","description":"Elementwise inverse-cosine function (a.k.a. arccosine function).","signature":"cupy.arccos = <ufunc 'cupy_arccos'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.arccos.html#cupy.arccos","numpy":"numpy.arccos","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.arccos.html#numpy.arccos"},{"name":"cupy.arccosh = <ufunc 'cupy_arccosh'>","description":"Elementwise inverse of hyperbolic cosine function.","signature":"cupy.arccosh = <ufunc 'cupy_arccosh'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.arccosh.html#cupy.arccosh","numpy":"numpy.arccosh","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.arccosh.html#numpy.arccosh"},{"name":"cupy.arcsin = <ufunc 'cupy_arcsin'>","description":"Elementwise inverse-sine function (a.k.a. arcsine function).","signature":"cupy.arcsin = <ufunc 'cupy_arcsin'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.arcsin.html#cupy.arcsin","numpy":"numpy.arcsin","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.arcsin.html#numpy.arcsin"},{"name":"cupy.arcsinh = <ufunc 'cupy_arcsinh'>","description":"Elementwise inverse of hyperbolic sine function.","signature":"cupy.arcsinh = <ufunc 'cupy_arcsinh'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.arcsinh.html#cupy.arcsinh","numpy":"numpy.arcsinh","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.arcsinh.html#numpy.arcsinh"},{"name":"cupy.arctan = <ufunc 'cupy_arctan'>","description":"Elementwise inverse-tangent function (a.k.a. arctangent function).","signature":"cupy.arctan = <ufunc 'cupy_arctan'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.arctan.html#cupy.arctan","numpy":"numpy.arctan","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.arctan.html#numpy.arctan"},{"name":"cupy.arctan2 = <ufunc 'cupy_arctan2'>","description":"Elementwise inverse-tangent of the ratio of two arrays.","signature":"cupy.arctan2 = <ufunc 'cupy_arctan2'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.arctan2.html#cupy.arctan2","numpy":"numpy.arctan2","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.arctan2.html#numpy.arctan2"},{"name":"cupy.arctanh = <ufunc 'cupy_arctanh'>","description":"Elementwise inverse of hyperbolic tangent function.","signature":"cupy.arctanh = <ufunc 'cupy_arctanh'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.arctanh.html#cupy.arctanh","numpy":"numpy.arctanh","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.arctanh.html#numpy.arctanh"},{"name":"cupy.argmax","description":"Returns the indices of the maximum along an axis.","signature":"cupy.argmax(a, axis=None, dtype=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.argmax.html#cupy.argmax","numpy":"numpy.argmax()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.argmax.html#numpy.argmax"},{"name":"cupy.argmin","description":"Returns the indices of the minimum along an axis.","signature":"cupy.argmin(a, axis=None, dtype=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.argmin.html#cupy.argmin","numpy":"numpy.argmin()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.argmin.html#numpy.argmin"},{"name":"cupy.argpartition","description":"Returns the indices that would partially sort an array.","signature":"cupy.argpartition(a, kth, axis=- 1)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.argpartition.html#cupy.argpartition","numpy":"numpy.argpartition()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.argpartition.html#numpy.argpartition"},{"name":"cupy.argsort","description":"Returns the indices that would sort an array with a stable sorting.","signature":"cupy.argsort(a, axis=- 1)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.argsort.html#cupy.argsort","numpy":"numpy.argsort()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.argsort.html#numpy.argsort"},{"name":"cupy.argwhere","description":"Return the indices of the elements that are non-zero.","signature":"cupy.argwhere(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.argwhere.html#cupy.argwhere","numpy":"numpy.argwhere()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.argwhere.html#numpy.argwhere"},{"name":"cupy.around","description":"Rounds to the given number of decimals.","signature":"cupy.around(a, decimals=0, out=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.around.html#cupy.around","numpy":"numpy.around()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.around.html#numpy.around"},{"name":"cupy.array","description":"Creates an array on the current device.","signature":"cupy.array(obj, dtype=None, copy=True, order='K', subok=False, ndmin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.array.html#cupy.array","numpy":"numpy.array()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.array.html#numpy.array"},{"name":"cupy.array_equal","description":"Returns True if two arrays are element-wise exactly equal.","signature":"cupy.array_equal(a1, a2, equal_nan=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.array_equal.html#cupy.array_equal","numpy":"numpy.array_equal()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.array_equal.html#numpy.array_equal"},{"name":"cupy.array_repr","description":"Returns the string representation of an array.","signature":"cupy.array_repr(arr, max_line_width=None, precision=None, suppress_small=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.array_repr.html#cupy.array_repr","numpy":"numpy.array_repr()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.array_repr.html#numpy.array_repr"},{"name":"cupy.array_split","description":"Splits an array into multiple sub arrays along a given axis.","signature":"cupy.array_split(ary, indices_or_sections, axis=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.array_split.html#cupy.array_split","numpy":"numpy.array_split()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.array_split.html#numpy.array_split"},{"name":"cupy.array_str","description":"Returns the string representation of the content of an array.","signature":"cupy.array_str(arr, max_line_width=None, precision=None, suppress_small=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.array_str.html#cupy.array_str","numpy":"numpy.array_str()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.array_str.html#numpy.array_str"},{"name":"cupy.asanyarray","description":"Converts an object to array.","signature":"cupy.asanyarray(a, dtype=None, order=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.asanyarray.html#cupy.asanyarray","numpy":"numpy.asanyarray()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.asanyarray.html#numpy.asanyarray"},{"name":"cupy.asarray","description":"Converts an object to array.","signature":"cupy.asarray(a, dtype=None, order=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.asarray.html#cupy.asarray","numpy":"numpy.asarray()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.asarray.html#numpy.asarray"},{"name":"cupy.ascontiguousarray","description":"Returns a C-contiguous array.","signature":"cupy.ascontiguousarray(a, dtype=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.ascontiguousarray.html#cupy.ascontiguousarray","numpy":"numpy.ascontiguousarray()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.ascontiguousarray.html#numpy.ascontiguousarray"},{"name":"cupy.asfortranarray","description":"Return an array laid out in Fortran order in memory.","signature":"cupy.asfortranarray(a, dtype=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.asfortranarray.html#cupy.asfortranarray","numpy":"numpy.asfortranarray()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.asfortranarray.html#numpy.asfortranarray"},{"name":"cupy.asnumpy","description":"Returns an array on the host memory from an arbitrary source array.","signature":"cupy.asnumpy(a, stream=None, order='C')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.asnumpy.html#cupy.asnumpy","numpy":"","numpy_url":""},{"name":"cupy.atleast_1d","description":"Converts arrays to arrays with dimensions >= 1.","signature":"cupy.atleast_1d(*arys)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.atleast_1d.html#cupy.atleast_1d","numpy":"numpy.atleast_1d()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.atleast_1d.html#numpy.atleast_1d"},{"name":"cupy.atleast_2d","description":"Converts arrays to arrays with dimensions >= 2.","signature":"cupy.atleast_2d(*arys)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.atleast_2d.html#cupy.atleast_2d","numpy":"numpy.atleast_2d()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.atleast_2d.html#numpy.atleast_2d"},{"name":"cupy.atleast_3d","description":"Converts arrays to arrays with dimensions >= 3.","signature":"cupy.atleast_3d(*arys)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.atleast_3d.html#cupy.atleast_3d","numpy":"numpy.atleast_3d()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.atleast_3d.html#numpy.atleast_3d"},{"name":"cupy.average","description":"Returns the weighted average along an axis.","signature":"cupy.average(a, axis=None, weights=None, returned=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.average.html#cupy.average","numpy":"numpy.average()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.average.html#numpy.average"},{"name":"cupy.bartlett","description":"Returns the Bartlett window.","signature":"cupy.bartlett(M)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.bartlett.html#cupy.bartlett","numpy":"numpy.bartlett()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.bartlett.html#numpy.bartlett"},{"name":"cupy.base_repr","description":"Return a string representation of a number in the given base system.","signature":"cupy.base_repr(number, base=2, padding=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.base_repr.html#cupy.base_repr","numpy":"numpy.base_repr()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.base_repr.html#numpy.base_repr"},{"name":"cupy.binary_repr","description":"Return the binary representation of the input number as a string.","signature":"cupy.binary_repr(num, width=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.binary_repr.html#cupy.binary_repr","numpy":"numpy.binary_repr()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.binary_repr.html#numpy.binary_repr"},{"name":"cupy.bincount","description":"Count number of occurrences of each value in array of non-negative ints.","signature":"cupy.bincount(x, weights=None, minlength=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.bincount.html#cupy.bincount","numpy":"numpy.bincount()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.bincount.html#numpy.bincount"},{"name":"cupy.bitwise_and = <ufunc 'cupy_bitwise_and'>","description":"Computes the bitwise AND of two arrays elementwise.","signature":"cupy.bitwise_and = <ufunc 'cupy_bitwise_and'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.bitwise_and.html#cupy.bitwise_and","numpy":"numpy.bitwise_and","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.bitwise_and.html#numpy.bitwise_and"},{"name":"cupy.bitwise_or = <ufunc 'cupy_bitwise_or'>","description":"Computes the bitwise OR of two arrays elementwise.","signature":"cupy.bitwise_or = <ufunc 'cupy_bitwise_or'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.bitwise_or.html#cupy.bitwise_or","numpy":"numpy.bitwise_or","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.bitwise_or.html#numpy.bitwise_or"},{"name":"cupy.bitwise_xor = <ufunc 'cupy_bitwise_xor'>","description":"Computes the bitwise XOR of two arrays elementwise.","signature":"cupy.bitwise_xor = <ufunc 'cupy_bitwise_xor'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.bitwise_xor.html#cupy.bitwise_xor","numpy":"numpy.bitwise_xor","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.bitwise_xor.html#numpy.bitwise_xor"},{"name":"cupy.blackman","description":"Returns the Blackman window.","signature":"cupy.blackman(M)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.blackman.html#cupy.blackman","numpy":"numpy.blackman()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.blackman.html#numpy.blackman"},{"name":"cupy.broadcast_arrays","description":"Broadcasts given arrays.","signature":"cupy.broadcast_arrays(*args)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.broadcast_arrays.html#cupy.broadcast_arrays","numpy":"numpy.broadcast_arrays()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays"},{"name":"cupy.broadcast_to","description":"Broadcast an array to a given shape.","signature":"cupy.broadcast_to(array, shape)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.broadcast_to.html#cupy.broadcast_to","numpy":"numpy.broadcast_to()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.broadcast_to.html#numpy.broadcast_to"},{"name":"cupy.can_cast","description":"Returns True if cast between data types can occur according to the casting rule. If from is a scalar or array scalar, also returns True if the scalar value can be cast without overflow or truncation to an integer.","signature":"cupy.can_cast(from_, to, casting='safe')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.can_cast.html#cupy.can_cast","numpy":"numpy.can_cast()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.can_cast.html#numpy.can_cast"},{"name":"cupy.cbrt = <ufunc 'cupy_cbrt'>","description":"Elementwise cube root function.","signature":"cupy.cbrt = <ufunc 'cupy_cbrt'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.cbrt.html#cupy.cbrt","numpy":"numpy.cbrt","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.cbrt.html#numpy.cbrt"},{"name":"cupy.ceil = <ufunc 'cupy_ceil'>","description":"Rounds each element of an array to its ceiling integer.","signature":"cupy.ceil = <ufunc 'cupy_ceil'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.ceil.html#cupy.ceil","numpy":"numpy.ceil","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.ceil.html#numpy.ceil"},{"name":"cupy.clear_memo","description":"Clears the memoized results for all functions decorated by memoize.","signature":"cupy.clear_memo()","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.clear_memo.html#cupy.clear_memo","numpy":"","numpy_url":""},{"name":"cupy.clip","description":"Clips the values of an array to a given interval.","signature":"cupy.clip(a, a_min=None, a_max=None, out=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.clip.html#cupy.clip","numpy":"numpy.clip()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.clip.html#numpy.clip"},{"name":"cupy.column_stack","description":"Stacks 1-D and 2-D arrays as columns into a 2-D array.","signature":"cupy.column_stack(tup)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.column_stack.html#cupy.column_stack","numpy":"numpy.column_stack()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.column_stack.html#numpy.column_stack"},{"name":"cupy.common_type","description":"Return a scalar type which is common to the input arrays.","signature":"cupy.common_type(*arrays)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.common_type.html#cupy.common_type","numpy":"numpy.common_type()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.common_type.html#numpy.common_type"},{"name":"cupy.compress","description":"Returns selected slices of an array along given axis.","signature":"cupy.compress(condition, a, axis=None, out=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.compress.html#cupy.compress","numpy":"numpy.compress()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.compress.html#numpy.compress"},{"name":"cupy.concatenate","description":"Joins arrays along an axis.","signature":"cupy.concatenate(tup, axis=0, out=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.concatenate.html#cupy.concatenate","numpy":"numpy.concatenate()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.concatenate.html#numpy.concatenate"},{"name":"cupy.conj = <ufunc 'cupy_conjugate'>","description":"Returns the complex conjugate, element-wise.","signature":"cupy.conj = <ufunc 'cupy_conjugate'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.conj.html#cupy.conj","numpy":"","numpy_url":""},{"name":"cupy.conjugate = <ufunc 'cupy_conjugate'>","description":"Returns the complex conjugate, element-wise.","signature":"cupy.conjugate = <ufunc 'cupy_conjugate'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.conjugate.html#cupy.conjugate","numpy":"numpy.conjugate","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.conjugate.html#numpy.conjugate"},{"name":"cupy.convolve","description":"Returns the discrete, linear convolution of two one-dimensional sequences.","signature":"cupy.convolve(a, v, mode='full')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.convolve.html#cupy.convolve","numpy":"numpy.convolve()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.convolve.html#numpy.convolve"},{"name":"cupy.copy","description":"Creates a copy of a given array on the current device.","signature":"cupy.copy(a, order='K')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.copy.html#cupy.copy","numpy":"numpy.copy()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.copy.html#numpy.copy"},{"name":"cupy.copysign = <ufunc 'cupy_copysign'>","description":"Returns the first argument with the sign bit of the second elementwise.","signature":"cupy.copysign = <ufunc 'cupy_copysign'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.copysign.html#cupy.copysign","numpy":"numpy.copysign","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.copysign.html#numpy.copysign"},{"name":"cupy.copyto","description":"Copies values from one array to another with broadcasting.","signature":"cupy.copyto(dst, src, casting='same_kind', where=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.copyto.html#cupy.copyto","numpy":"numpy.copyto()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.copyto.html#numpy.copyto"},{"name":"cupy.corrcoef","description":"Returns the Pearson product-moment correlation coefficients of an array.","signature":"cupy.corrcoef(a, y=None, rowvar=True, bias=None, ddof=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.corrcoef.html#cupy.corrcoef","numpy":"numpy.corrcoef()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.corrcoef.html#numpy.corrcoef"},{"name":"cupy.correlate","description":"Returns the cross-correlation of two 1-dimensional sequences.","signature":"cupy.correlate(a, v, mode='valid')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.correlate.html#cupy.correlate","numpy":"numpy.correlate()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.correlate.html#numpy.correlate"},{"name":"cupy.cos = <ufunc 'cupy_cos'>","description":"Elementwise cosine function.","signature":"cupy.cos = <ufunc 'cupy_cos'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.cos.html#cupy.cos","numpy":"numpy.cos","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.cos.html#numpy.cos"},{"name":"cupy.cosh = <ufunc 'cupy_cosh'>","description":"Elementwise hyperbolic cosine function.","signature":"cupy.cosh = <ufunc 'cupy_cosh'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.cosh.html#cupy.cosh","numpy":"numpy.cosh","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.cosh.html#numpy.cosh"},{"name":"cupy.count_nonzero","description":"Counts the number of non-zero values in the array.","signature":"cupy.count_nonzero(a, axis=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.count_nonzero.html#cupy.count_nonzero","numpy":"","numpy_url":""},{"name":"cupy.cov","description":"Returns the covariance matrix of an array.","signature":"cupy.cov(a, y=None, rowvar=True, bias=False, ddof=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.cov.html#cupy.cov","numpy":"numpy.cov()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.cov.html#numpy.cov"},{"name":"cupy.cross","description":"Returns the cross product of two vectors.","signature":"cupy.cross(a, b, axisa=- 1, axisb=- 1, axisc=- 1, axis=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.cross.html#cupy.cross","numpy":"numpy.cross()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.cross.html#numpy.cross"},{"name":"cupy.cumprod","description":"Returns the cumulative product of an array along a given axis.","signature":"cupy.cumprod(a, axis=None, dtype=None, out=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.cumprod.html#cupy.cumprod","numpy":"numpy.cumprod()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.cumprod.html#numpy.cumprod"},{"name":"cupy.cumsum","description":"Returns the cumulative sum of an array along a given axis.","signature":"cupy.cumsum(a, axis=None, dtype=None, out=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.cumsum.html#cupy.cumsum","numpy":"numpy.cumsum()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.cumsum.html#numpy.cumsum"},{"name":"cupy.deg2rad = <ufunc 'cupy_deg2rad'>","description":"Converts angles from degrees to radians elementwise.","signature":"cupy.deg2rad = <ufunc 'cupy_deg2rad'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.deg2rad.html#cupy.deg2rad","numpy":"numpy.deg2rad","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.deg2rad.html#numpy.deg2rad"},{"name":"cupy.degrees = <ufunc 'cupy_rad2deg'>","description":"Converts angles from radians to degrees elementwise.","signature":"cupy.degrees = <ufunc 'cupy_rad2deg'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.degrees.html#cupy.degrees","numpy":"numpy.degrees","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.degrees.html#numpy.degrees"},{"name":"cupy.diag","description":"Returns a diagonal or a diagonal array.","signature":"cupy.diag(v, k=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.diag.html#cupy.diag","numpy":"numpy.diag()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.diag.html#numpy.diag"},{"name":"cupy.diag_indices","description":"Return the indices to access the main diagonal of an array.","signature":"cupy.diag_indices(n, ndim=2)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.diag_indices.html#cupy.diag_indices","numpy":"numpy.diag_indices()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.diag_indices.html#numpy.diag_indices"},{"name":"cupy.diag_indices_from","description":"Return the indices to access the main diagonal of an n-dimensional array. See diag_indices for full details.","signature":"cupy.diag_indices_from(arr)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.diag_indices_from.html#cupy.diag_indices_from","numpy":"numpy.diag_indices_from()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.diag_indices_from.html#numpy.diag_indices_from"},{"name":"cupy.diagflat","description":"Creates a diagonal array from the flattened input.","signature":"cupy.diagflat(v, k=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.diagflat.html#cupy.diagflat","numpy":"numpy.diagflat()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.diagflat.html#numpy.diagflat"},{"name":"cupy.diagonal","description":"Returns specified diagonals.","signature":"cupy.diagonal(a, offset=0, axis1=0, axis2=1)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.diagonal.html#cupy.diagonal","numpy":"numpy.diagonal()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.diagonal.html#numpy.diagonal"},{"name":"cupy.diff","description":"Calculate the n-th discrete difference along the given axis.","signature":"cupy.diff(a, n=1, axis=- 1, prepend=None, append=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.diff.html#cupy.diff","numpy":"numpy.diff()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.diff.html#numpy.diff"},{"name":"cupy.digitize","description":"Finds the indices of the bins to which each value in input array belongs.","signature":"cupy.digitize(x, bins, right=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.digitize.html#cupy.digitize","numpy":"numpy.digitize()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.digitize.html#numpy.digitize"},{"name":"cupy.divide = <ufunc 'cupy_true_divide'>","description":"Elementwise true division (i.e. division as floating values).","signature":"cupy.divide = <ufunc 'cupy_true_divide'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.divide.html#cupy.divide","numpy":"","numpy_url":""},{"name":"cupy.dot","description":"Returns a dot product of two arrays.","signature":"cupy.dot(a, b, out=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.dot.html#cupy.dot","numpy":"numpy.dot()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.dot.html#numpy.dot"},{"name":"cupy.dsplit","description":"Splits an array into multiple sub arrays along the third axis.","signature":"cupy.dsplit(ary, indices_or_sections)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.dsplit.html#cupy.dsplit","numpy":"numpy.dsplit()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.dsplit.html#numpy.dsplit"},{"name":"cupy.dstack","description":"Stacks arrays along the third axis.","signature":"cupy.dstack(tup)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.dstack.html#cupy.dstack","numpy":"numpy.dstack()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.dstack.html#numpy.dstack"},{"name":"cupy.einsum","description":"Evaluates the Einstein summation convention on the operands. Using the Einstein summation convention, many common multi-dimensional array operations can be represented in a simple fashion. This function provides a way to compute such summations.","signature":"cupy.einsum(subscripts, *operands, dtype=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.einsum.html#cupy.einsum","numpy":"numpy.einsum()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.einsum.html#numpy.einsum"},{"name":"cupy.empty","description":"Returns an array without initializing the elements.","signature":"cupy.empty(shape, dtype=<class 'float'>, order='C')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.empty.html#cupy.empty","numpy":"numpy.empty()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.empty.html#numpy.empty"},{"name":"cupy.empty_like","description":"Returns a new array with same shape and dtype of a given array.","signature":"cupy.empty_like(a, dtype=None, order='K', subok=None, shape=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.empty_like.html#cupy.empty_like","numpy":"numpy.empty_like()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.empty_like.html#numpy.empty_like"},{"name":"cupy.equal = <ufunc 'cupy_equal'>","description":"Tests elementwise if x1 == x2.","signature":"cupy.equal = <ufunc 'cupy_equal'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.equal.html#cupy.equal","numpy":"numpy.equal","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.equal.html#numpy.equal"},{"name":"cupy.exp = <ufunc 'cupy_exp'>","description":"Elementwise exponential function.","signature":"cupy.exp = <ufunc 'cupy_exp'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.exp.html#cupy.exp","numpy":"numpy.exp","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.exp.html#numpy.exp"},{"name":"cupy.exp2 = <ufunc 'cupy_exp2'>","description":"Elementwise exponentiation with base 2.","signature":"cupy.exp2 = <ufunc 'cupy_exp2'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.exp2.html#cupy.exp2","numpy":"numpy.exp2","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.exp2.html#numpy.exp2"},{"name":"cupy.expand_dims","description":"Expands given arrays.","signature":"cupy.expand_dims(a, axis)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.expand_dims.html#cupy.expand_dims","numpy":"numpy.expand_dims()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.expand_dims.html#numpy.expand_dims"},{"name":"cupy.expm1 = <ufunc 'cupy_expm1'>","description":"Computes exp(x) - 1 elementwise.","signature":"cupy.expm1 = <ufunc 'cupy_expm1'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.expm1.html#cupy.expm1","numpy":"numpy.expm1","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.expm1.html#numpy.expm1"},{"name":"cupy.extract","description":"Return the elements of an array that satisfy some condition.","signature":"cupy.extract(condition, a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.extract.html#cupy.extract","numpy":"numpy.extract()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.extract.html#numpy.extract"},{"name":"cupy.eye","description":"Returns a 2-D array with ones on the diagonals and zeros elsewhere.","signature":"cupy.eye(N, M=None, k=0, dtype=<class 'float'>, order='C')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.eye.html#cupy.eye","numpy":"numpy.eye()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.eye.html#numpy.eye"},{"name":"cupy.fft.config.get_plan_cache","description":"Get the per-thread, per-device plan cache, or create one if not found.","signature":"cupy.fft.config.get_plan_cache() → PlanCache","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.config.get_plan_cache.html#cupy.fft.config.get_plan_cache","numpy":"","numpy_url":""},{"name":"cupy.fft.config.set_cufft_gpus","description":"Set the GPUs to be used in multi-GPU FFT.","signature":"cupy.fft.config.set_cufft_gpus(gpus)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.config.set_cufft_gpus.html#cupy.fft.config.set_cufft_gpus","numpy":"","numpy_url":""},{"name":"cupy.fft.config.show_plan_cache_info","description":"Show all of the plan caches’ info on this thread.","signature":"cupy.fft.config.show_plan_cache_info()","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.config.show_plan_cache_info.html#cupy.fft.config.show_plan_cache_info","numpy":"","numpy_url":""},{"name":"cupy.fft.fft","description":"Compute the one-dimensional FFT.","signature":"cupy.fft.fft(a, n=None, axis=- 1, norm=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.fft.html#cupy.fft.fft","numpy":"numpy.fft.fft()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.fft.html#numpy.fft.fft"},{"name":"cupy.fft.fft2","description":"Compute the two-dimensional FFT.","signature":"cupy.fft.fft2(a, s=None, axes=(- 2, - 1), norm=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.fft2.html#cupy.fft.fft2","numpy":"numpy.fft.fft2()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.fft2.html#numpy.fft.fft2"},{"name":"cupy.fft.fftfreq","description":"Return the FFT sample frequencies.","signature":"cupy.fft.fftfreq(n, d=1.0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.fftfreq.html#cupy.fft.fftfreq","numpy":"numpy.fft.fftfreq()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.fftfreq.html#numpy.fft.fftfreq"},{"name":"cupy.fft.fftn","description":"Compute the N-dimensional FFT.","signature":"cupy.fft.fftn(a, s=None, axes=None, norm=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.fftn.html#cupy.fft.fftn","numpy":"numpy.fft.fftn()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.fftn.html#numpy.fft.fftn"},{"name":"cupy.fft.fftshift","description":"Shift the zero-frequency component to the center of the spectrum.","signature":"cupy.fft.fftshift(x, axes=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.fftshift.html#cupy.fft.fftshift","numpy":"numpy.fft.fftshift()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.fftshift.html#numpy.fft.fftshift"},{"name":"cupy.fft.hfft","description":"Compute the FFT of a signal that has Hermitian symmetry.","signature":"cupy.fft.hfft(a, n=None, axis=- 1, norm=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.hfft.html#cupy.fft.hfft","numpy":"numpy.fft.hfft()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.hfft.html#numpy.fft.hfft"},{"name":"cupy.fft.ifft","description":"Compute the one-dimensional inverse FFT.","signature":"cupy.fft.ifft(a, n=None, axis=- 1, norm=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.ifft.html#cupy.fft.ifft","numpy":"numpy.fft.ifft()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.ifft.html#numpy.fft.ifft"},{"name":"cupy.fft.ifft2","description":"Compute the two-dimensional inverse FFT.","signature":"cupy.fft.ifft2(a, s=None, axes=(- 2, - 1), norm=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.ifft2.html#cupy.fft.ifft2","numpy":"numpy.fft.ifft2()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.ifft2.html#numpy.fft.ifft2"},{"name":"cupy.fft.ifftn","description":"Compute the N-dimensional inverse FFT.","signature":"cupy.fft.ifftn(a, s=None, axes=None, norm=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.ifftn.html#cupy.fft.ifftn","numpy":"numpy.fft.ifftn()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.ifftn.html#numpy.fft.ifftn"},{"name":"cupy.fft.ifftshift","description":"The inverse of fftshift().","signature":"cupy.fft.ifftshift(x, axes=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.ifftshift.html#cupy.fft.ifftshift","numpy":"numpy.fft.ifftshift()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.ifftshift.html#numpy.fft.ifftshift"},{"name":"cupy.fft.ihfft","description":"Compute the FFT of a signal that has Hermitian symmetry.","signature":"cupy.fft.ihfft(a, n=None, axis=- 1, norm=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.ihfft.html#cupy.fft.ihfft","numpy":"numpy.fft.ihfft()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.ihfft.html#numpy.fft.ihfft"},{"name":"cupy.fft.irfft","description":"Compute the one-dimensional inverse FFT for real input.","signature":"cupy.fft.irfft(a, n=None, axis=- 1, norm=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.irfft.html#cupy.fft.irfft","numpy":"numpy.fft.irfft()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.irfft.html#numpy.fft.irfft"},{"name":"cupy.fft.irfft2","description":"Compute the two-dimensional inverse FFT for real input.","signature":"cupy.fft.irfft2(a, s=None, axes=(- 2, - 1), norm=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.irfft2.html#cupy.fft.irfft2","numpy":"numpy.fft.irfft2()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.irfft2.html#numpy.fft.irfft2"},{"name":"cupy.fft.irfftn","description":"Compute the N-dimensional inverse FFT for real input.","signature":"cupy.fft.irfftn(a, s=None, axes=None, norm=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.irfftn.html#cupy.fft.irfftn","numpy":"numpy.fft.irfftn()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.irfftn.html#numpy.fft.irfftn"},{"name":"cupy.fft.rfft","description":"Compute the one-dimensional FFT for real input.","signature":"cupy.fft.rfft(a, n=None, axis=- 1, norm=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.rfft.html#cupy.fft.rfft","numpy":"numpy.fft.rfft()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.rfft.html#numpy.fft.rfft"},{"name":"cupy.fft.rfft2","description":"Compute the two-dimensional FFT for real input.","signature":"cupy.fft.rfft2(a, s=None, axes=(- 2, - 1), norm=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.rfft2.html#cupy.fft.rfft2","numpy":"numpy.fft.rfft2()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.rfft2.html#numpy.fft.rfft2"},{"name":"cupy.fft.rfftfreq","description":"Return the FFT sample frequencies for real input.","signature":"cupy.fft.rfftfreq(n, d=1.0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.rfftfreq.html#cupy.fft.rfftfreq","numpy":"numpy.fft.rfftfreq()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.rfftfreq.html#numpy.fft.rfftfreq"},{"name":"cupy.fft.rfftn","description":"Compute the N-dimensional FFT for real input.","signature":"cupy.fft.rfftn(a, s=None, axes=None, norm=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fft.rfftn.html#cupy.fft.rfftn","numpy":"numpy.fft.rfftn()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.rfftn.html#numpy.fft.rfftn"},{"name":"cupy.fill_diagonal","description":"Fills the main diagonal of the given array of any dimensionality.","signature":"cupy.fill_diagonal(a, val, wrap=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fill_diagonal.html#cupy.fill_diagonal","numpy":"numpy.fill_diagonal()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fill_diagonal.html#numpy.fill_diagonal"},{"name":"cupy.fix = <ufunc 'cupy_fix'>","description":"If given value x is positive, it return floor(x). Else, it return ceil(x).","signature":"cupy.fix = <ufunc 'cupy_fix'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fix.html#cupy.fix","numpy":"numpy.fix()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fix.html#numpy.fix"},{"name":"cupy.flatnonzero","description":"Return indices that are non-zero in the flattened version of a.","signature":"cupy.flatnonzero(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.flatnonzero.html#cupy.flatnonzero","numpy":"numpy.flatnonzero()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.flatnonzero.html#numpy.flatnonzero"},{"name":"cupy.flip","description":"Reverse the order of elements in an array along the given axis.","signature":"cupy.flip(a, axis=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.flip.html#cupy.flip","numpy":"numpy.flip()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.flip.html#numpy.flip"},{"name":"cupy.fliplr","description":"Flip array in the left/right direction.","signature":"cupy.fliplr(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fliplr.html#cupy.fliplr","numpy":"numpy.fliplr()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fliplr.html#numpy.fliplr"},{"name":"cupy.flipud","description":"Flip array in the up/down direction.","signature":"cupy.flipud(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.flipud.html#cupy.flipud","numpy":"numpy.flipud()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.flipud.html#numpy.flipud"},{"name":"cupy.floor = <ufunc 'cupy_floor'>","description":"Rounds each element of an array to its floor integer.","signature":"cupy.floor = <ufunc 'cupy_floor'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.floor.html#cupy.floor","numpy":"numpy.floor","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.floor.html#numpy.floor"},{"name":"cupy.floor_divide = <ufunc 'cupy_floor_divide'>","description":"Elementwise floor division (i.e. integer quotient).","signature":"cupy.floor_divide = <ufunc 'cupy_floor_divide'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.floor_divide.html#cupy.floor_divide","numpy":"numpy.floor_divide","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.floor_divide.html#numpy.floor_divide"},{"name":"cupy.fmax = <ufunc 'cupy_fmax'>","description":"Takes the maximum of two arrays elementwise.","signature":"cupy.fmax = <ufunc 'cupy_fmax'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fmax.html#cupy.fmax","numpy":"numpy.fmax","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fmax.html#numpy.fmax"},{"name":"cupy.fmin = <ufunc 'cupy_fmin'>","description":"Takes the minimum of two arrays elementwise.","signature":"cupy.fmin = <ufunc 'cupy_fmin'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fmin.html#cupy.fmin","numpy":"numpy.fmin","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fmin.html#numpy.fmin"},{"name":"cupy.fmod = <ufunc 'cupy_fmod'>","description":"Computes the remainder of C division elementwise.","signature":"cupy.fmod = <ufunc 'cupy_fmod'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fmod.html#cupy.fmod","numpy":"numpy.fmod","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fmod.html#numpy.fmod"},{"name":"cupy.frexp = <ufunc 'cupy_frexp'>","description":"Decomposes each element to mantissa and two’s exponent.","signature":"cupy.frexp = <ufunc 'cupy_frexp'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.frexp.html#cupy.frexp","numpy":"numpy.frexp","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.frexp.html#numpy.frexp"},{"name":"cupy.fromDlpack","description":"Zero-copy conversion from a DLPack tensor to a ndarray.","signature":"cupy.fromDlpack(dltensor) → ndarray","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fromDlpack.html#cupy.fromDlpack","numpy":"","numpy_url":""},{"name":"cupy.fromfile","description":"Reads an array from a file.","signature":"cupy.fromfile(*args, **kwargs)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fromfile.html#cupy.fromfile","numpy":"numpy.fromfile()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fromfile.html#numpy.fromfile"},{"name":"cupy.full","description":"Returns a new array of given shape and dtype, filled with a given value.","signature":"cupy.full(shape, fill_value, dtype=None, order='C')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.full.html#cupy.full","numpy":"numpy.full()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.full.html#numpy.full"},{"name":"cupy.full_like","description":"Returns a full array with same shape and dtype as a given array.","signature":"cupy.full_like(a, fill_value, dtype=None, order='K', subok=None, shape=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.full_like.html#cupy.full_like","numpy":"numpy.full_like()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.full_like.html#numpy.full_like"},{"name":"cupy.fuse","description":"Decorator that fuses a function.","signature":"cupy.fuse(*args, **kwargs)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.fuse.html#cupy.fuse","numpy":"","numpy_url":""},{"name":"cupy.gcd = <ufunc 'cupy_gcd'>","description":"Computes gcd of x1 and x2 elementwise.","signature":"cupy.gcd = <ufunc 'cupy_gcd'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.gcd.html#cupy.gcd","numpy":"numpy.gcd","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.gcd.html#numpy.gcd"},{"name":"cupy.get_array_module","description":"Returns the array module for arguments.","signature":"cupy.get_array_module(*args)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.get_array_module.html#cupy.get_array_module","numpy":"","numpy_url":""},{"name":"cupy.get_default_memory_pool","description":"Returns CuPy default memory pool for GPU memory.","signature":"cupy.get_default_memory_pool()","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.get_default_memory_pool.html#cupy.get_default_memory_pool","numpy":"","numpy_url":""},{"name":"cupy.get_default_pinned_memory_pool","description":"Returns CuPy default memory pool for pinned memory.","signature":"cupy.get_default_pinned_memory_pool()","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.get_default_pinned_memory_pool.html#cupy.get_default_pinned_memory_pool","numpy":"","numpy_url":""},{"name":"cupy.gradient","description":"Return the gradient of an N-dimensional array.","signature":"cupy.gradient(f, *varargs, axis=None, edge_order=1)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.gradient.html#cupy.gradient","numpy":"numpy.gradient()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.gradient.html#numpy.gradient"},{"name":"cupy.greater = <ufunc 'cupy_greater'>","description":"Tests elementwise if x1 > x2.","signature":"cupy.greater = <ufunc 'cupy_greater'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.greater.html#cupy.greater","numpy":"numpy.greater","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.greater.html#numpy.greater"},{"name":"cupy.greater_equal = <ufunc 'cupy_greater_equal'>","description":"Tests elementwise if x1 >= x2.","signature":"cupy.greater_equal = <ufunc 'cupy_greater_equal'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.greater_equal.html#cupy.greater_equal","numpy":"numpy.greater_equal","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.greater_equal.html#numpy.greater_equal"},{"name":"cupy.hamming","description":"Returns the Hamming window.","signature":"cupy.hamming(M)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.hamming.html#cupy.hamming","numpy":"numpy.hamming()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.hamming.html#numpy.hamming"},{"name":"cupy.hanning","description":"Returns the Hanning window.","signature":"cupy.hanning(M)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.hanning.html#cupy.hanning","numpy":"numpy.hanning()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.hanning.html#numpy.hanning"},{"name":"cupy.histogram","description":"Computes the histogram of a set of data.","signature":"cupy.histogram(x, bins=10, range=None, weights=None, density=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.histogram.html#cupy.histogram","numpy":"numpy.histogram()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.histogram.html#numpy.histogram"},{"name":"cupy.histogram2d","description":"Compute the bi-dimensional histogram of two data samples.","signature":"cupy.histogram2d(x, y, bins=10, range=None, weights=None, density=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.histogram2d.html#cupy.histogram2d","numpy":"numpy.histogram2d()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.histogram2d.html#numpy.histogram2d"},{"name":"cupy.histogramdd","description":"Compute the multidimensional histogram of some data.","signature":"cupy.histogramdd(sample, bins=10, range=None, weights=None, density=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.histogramdd.html#cupy.histogramdd","numpy":"numpy.histogramdd()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.histogramdd.html#numpy.histogramdd"},{"name":"cupy.hsplit","description":"Splits an array into multiple sub arrays horizontally.","signature":"cupy.hsplit(ary, indices_or_sections)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.hsplit.html#cupy.hsplit","numpy":"numpy.hsplit()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.hsplit.html#numpy.hsplit"},{"name":"cupy.hstack","description":"Stacks arrays horizontally.","signature":"cupy.hstack(tup)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.hstack.html#cupy.hstack","numpy":"numpy.hstack()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.hstack.html#numpy.hstack"},{"name":"cupy.hypot = <ufunc 'cupy_hypot'>","description":"Computes the hypoteneous of orthogonal vectors of given length.","signature":"cupy.hypot = <ufunc 'cupy_hypot'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.hypot.html#cupy.hypot","numpy":"numpy.hypot","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.hypot.html#numpy.hypot"},{"name":"cupy.i0 = <ufunc 'cupy_i0'>","description":"Modified Bessel function of the first kind, order 0.","signature":"cupy.i0 = <ufunc 'cupy_i0'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.i0.html#cupy.i0","numpy":"numpy.i0()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.i0.html#numpy.i0"},{"name":"cupy.identity","description":"Returns a 2-D identity array.","signature":"cupy.identity(n, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.identity.html#cupy.identity","numpy":"numpy.identity()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.identity.html#numpy.identity"},{"name":"cupy.imag","description":"Returns the imaginary part of the elements of the array.","signature":"cupy.imag(val)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.imag.html#cupy.imag","numpy":"numpy.imag()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.imag.html#numpy.imag"},{"name":"cupy.in1d","description":"Tests whether each element of a 1-D array is also present in a second array.","signature":"cupy.in1d(ar1, ar2, assume_unique=False, invert=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.in1d.html#cupy.in1d","numpy":"","numpy_url":""},{"name":"cupy.indices","description":"Returns an array representing the indices of a grid.","signature":"cupy.indices(dimensions, dtype=<class 'int'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.indices.html#cupy.indices","numpy":"numpy.indices()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.indices.html#numpy.indices"},{"name":"cupy.inner","description":"Returns the inner product of two arrays.","signature":"cupy.inner(a, b)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.inner.html#cupy.inner","numpy":"numpy.inner()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.inner.html#numpy.inner"},{"name":"cupy.interp","description":"One-dimensional linear interpolation.","signature":"cupy.interp(x, xp, fp, left=None, right=None, period=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.interp.html#cupy.interp","numpy":"numpy.interp()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.interp.html#numpy.interp"},{"name":"cupy.invert = <ufunc 'cupy_invert'>","description":"Computes the bitwise NOT of an array elementwise.","signature":"cupy.invert = <ufunc 'cupy_invert'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.invert.html#cupy.invert","numpy":"numpy.invert","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.invert.html#numpy.invert"},{"name":"cupy.isclose","description":"Returns a boolean array where two arrays are equal within a tolerance.","signature":"cupy.isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.isclose.html#cupy.isclose","numpy":"numpy.isclose()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.isclose.html#numpy.isclose"},{"name":"cupy.iscomplex","description":"Returns a bool array, where True if input element is complex.","signature":"cupy.iscomplex(x)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.iscomplex.html#cupy.iscomplex","numpy":"","numpy_url":""},{"name":"cupy.iscomplexobj","description":"Check for a complex type or an array of complex numbers.","signature":"cupy.iscomplexobj(x)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.iscomplexobj.html#cupy.iscomplexobj","numpy":"","numpy_url":""},{"name":"cupy.isfinite = <ufunc 'cupy_isfinite'>","description":"Tests finiteness elementwise.","signature":"cupy.isfinite = <ufunc 'cupy_isfinite'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.isfinite.html#cupy.isfinite","numpy":"numpy.isfinite","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.isfinite.html#numpy.isfinite"},{"name":"cupy.isfortran","description":"Returns True if the array is Fortran contiguous but not C contiguous.","signature":"cupy.isfortran(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.isfortran.html#cupy.isfortran","numpy":"isfortran()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.isfortran.html#numpy.isfortran"},{"name":"cupy.isin","description":"Calculates element in test_elements, broadcasting over element only. Returns a boolean array of the same shape as element that is True where an element of element is in test_elements and False otherwise.","signature":"cupy.isin(element, test_elements, assume_unique=False, invert=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.isin.html#cupy.isin","numpy":"","numpy_url":""},{"name":"cupy.isinf = <ufunc 'cupy_isinf'>","description":"Tests if each element is the positive or negative infinity.","signature":"cupy.isinf = <ufunc 'cupy_isinf'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.isinf.html#cupy.isinf","numpy":"numpy.isinf","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.isinf.html#numpy.isinf"},{"name":"cupy.isnan = <ufunc 'cupy_isnan'>","description":"Tests if each element is a NaN.","signature":"cupy.isnan = <ufunc 'cupy_isnan'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.isnan.html#cupy.isnan","numpy":"numpy.isnan","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.isnan.html#numpy.isnan"},{"name":"cupy.isreal","description":"Returns a bool array, where True if input element is real.","signature":"cupy.isreal(x)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.isreal.html#cupy.isreal","numpy":"","numpy_url":""},{"name":"cupy.isrealobj","description":"Return True if x is a not complex type or an array of complex numbers.","signature":"cupy.isrealobj(x)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.isrealobj.html#cupy.isrealobj","numpy":"","numpy_url":""},{"name":"cupy.isscalar","description":"Returns True if the type of num is a scalar type.","signature":"cupy.isscalar(element)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.isscalar.html#cupy.isscalar","numpy":"numpy.isscalar()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.isscalar.html#numpy.isscalar"},{"name":"cupy.ix_","description":"Construct an open mesh from multiple sequences.","signature":"cupy.ix_(*args)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.ix_.html#cupy.ix_","numpy":"numpy.ix_()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.ix_.html#numpy.ix_"},{"name":"cupy.kaiser","description":"Return the Kaiser window. The Kaiser window is a taper formed by using a Bessel function.","signature":"cupy.kaiser(M, beta)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.kaiser.html#cupy.kaiser","numpy":"numpy.kaiser()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.kaiser.html#numpy.kaiser"},{"name":"cupy.kron","description":"Returns the kronecker product of two arrays.","signature":"cupy.kron(a, b)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.kron.html#cupy.kron","numpy":"numpy.kron()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.kron.html#numpy.kron"},{"name":"cupy.lcm = <ufunc 'cupy_lcm'>","description":"Computes lcm of x1 and x2 elementwise.","signature":"cupy.lcm = <ufunc 'cupy_lcm'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.lcm.html#cupy.lcm","numpy":"numpy.lcm","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.lcm.html#numpy.lcm"},{"name":"cupy.ldexp = <ufunc 'cupy_ldexp'>","description":"Computes x1 * 2 ** x2 elementwise.","signature":"cupy.ldexp = <ufunc 'cupy_ldexp'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.ldexp.html#cupy.ldexp","numpy":"numpy.ldexp","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.ldexp.html#numpy.ldexp"},{"name":"cupy.left_shift = <ufunc 'cupy_left_shift'>","description":"Shifts the bits of each integer element to the left.","signature":"cupy.left_shift = <ufunc 'cupy_left_shift'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.left_shift.html#cupy.left_shift","numpy":"numpy.left_shift","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.left_shift.html#numpy.left_shift"},{"name":"cupy.less = <ufunc 'cupy_less'>","description":"Tests elementwise if x1 < x2.","signature":"cupy.less = <ufunc 'cupy_less'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.less.html#cupy.less","numpy":"numpy.less","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.less.html#numpy.less"},{"name":"cupy.less_equal = <ufunc 'cupy_less_equal'>","description":"Tests elementwise if x1 <= x2.","signature":"cupy.less_equal = <ufunc 'cupy_less_equal'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.less_equal.html#cupy.less_equal","numpy":"numpy.less_equal","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.less_equal.html#numpy.less_equal"},{"name":"cupy.lexsort","description":"Perform an indirect sort using an array of keys.","signature":"cupy.lexsort(keys)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.lexsort.html#cupy.lexsort","numpy":"numpy.lexsort()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.lexsort.html#numpy.lexsort"},{"name":"cupy.lib.stride_tricks.as_strided","description":"Create a view into the array with the given shape and strides.","signature":"cupy.lib.stride_tricks.as_strided(x, shape=None, strides=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.lib.stride_tricks.as_strided.html#cupy.lib.stride_tricks.as_strided","numpy":"numpy.lib.stride_tricks.as_strided","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.lib.stride_tricks.as_strided.html#numpy.lib.stride_tricks.as_strided"},{"name":"cupy.linalg.cholesky","description":"Cholesky decomposition.","signature":"cupy.linalg.cholesky(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.cholesky.html#cupy.linalg.cholesky","numpy":"numpy.linalg.cholesky()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.linalg.cholesky.html#numpy.linalg.cholesky"},{"name":"cupy.linalg.det","description":"Returns the determinant of an array.","signature":"cupy.linalg.det(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.det.html#cupy.linalg.det","numpy":"numpy.linalg.det()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.linalg.det.html#numpy.linalg.det"},{"name":"cupy.linalg.eigh","description":"Eigenvalues and eigenvectors of a symmetric matrix.","signature":"cupy.linalg.eigh(a, UPLO='L')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.eigh.html#cupy.linalg.eigh","numpy":"numpy.linalg.eigh()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.linalg.eigh.html#numpy.linalg.eigh"},{"name":"cupy.linalg.eigvalsh","description":"Calculates eigenvalues of a symmetric matrix.","signature":"cupy.linalg.eigvalsh(a, UPLO='L')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.eigvalsh.html#cupy.linalg.eigvalsh","numpy":"numpy.linalg.eigvalsh()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.linalg.eigvalsh.html#numpy.linalg.eigvalsh"},{"name":"cupy.linalg.inv","description":"Computes the inverse of a matrix.","signature":"cupy.linalg.inv(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.inv.html#cupy.linalg.inv","numpy":"numpy.linalg.inv()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.linalg.inv.html#numpy.linalg.inv"},{"name":"cupy.linalg.lstsq","description":"Return the least-squares solution to a linear matrix equation.","signature":"cupy.linalg.lstsq(a, b, rcond='warn')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.lstsq.html#cupy.linalg.lstsq","numpy":"numpy.linalg.lstsq()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.linalg.lstsq.html#numpy.linalg.lstsq"},{"name":"cupy.linalg.matrix_power","description":"Raise a square matrix to the (integer) power n.","signature":"cupy.linalg.matrix_power(M, n)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.matrix_power.html#cupy.linalg.matrix_power","numpy":"","numpy_url":""},{"name":"cupy.linalg.matrix_rank","description":"Return matrix rank of array using SVD method","signature":"cupy.linalg.matrix_rank(M, tol=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.matrix_rank.html#cupy.linalg.matrix_rank","numpy":"numpy.linalg.matrix_rank()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.linalg.matrix_rank.html#numpy.linalg.matrix_rank"},{"name":"cupy.linalg.norm","description":"Returns one of matrix norms specified by ord parameter.","signature":"cupy.linalg.norm(x, ord=None, axis=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.norm.html#cupy.linalg.norm","numpy":"","numpy_url":""},{"name":"cupy.linalg.pinv","description":"Compute the Moore-Penrose pseudoinverse of a matrix.","signature":"cupy.linalg.pinv(a, rcond=1e-15)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.pinv.html#cupy.linalg.pinv","numpy":"numpy.linalg.pinv()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.linalg.pinv.html#numpy.linalg.pinv"},{"name":"cupy.linalg.qr","description":"QR decomposition.","signature":"cupy.linalg.qr(a, mode='reduced')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.qr.html#cupy.linalg.qr","numpy":"numpy.linalg.qr()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.linalg.qr.html#numpy.linalg.qr"},{"name":"cupy.linalg.slogdet","description":"Returns sign and logarithm of the determinant of an array.","signature":"cupy.linalg.slogdet(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.slogdet.html#cupy.linalg.slogdet","numpy":"numpy.linalg.slogdet()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.linalg.slogdet.html#numpy.linalg.slogdet"},{"name":"cupy.linalg.solve","description":"Solves a linear matrix equation.","signature":"cupy.linalg.solve(a, b)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.solve.html#cupy.linalg.solve","numpy":"numpy.linalg.solve()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.linalg.solve.html#numpy.linalg.solve"},{"name":"cupy.linalg.svd","description":"Singular Value Decomposition.","signature":"cupy.linalg.svd(a, full_matrices=True, compute_uv=True)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.svd.html#cupy.linalg.svd","numpy":"numpy.linalg.svd()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.linalg.svd.html#numpy.linalg.svd"},{"name":"cupy.linalg.tensorinv","description":"Computes the inverse of a tensor.","signature":"cupy.linalg.tensorinv(a, ind=2)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.tensorinv.html#cupy.linalg.tensorinv","numpy":"numpy.linalg.tensorinv()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.linalg.tensorinv.html#numpy.linalg.tensorinv"},{"name":"cupy.linalg.tensorsolve","description":"Solves tensor equations denoted by ax = b.","signature":"cupy.linalg.tensorsolve(a, b, axes=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linalg.tensorsolve.html#cupy.linalg.tensorsolve","numpy":"numpy.linalg.tensorsolve()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.linalg.tensorsolve.html#numpy.linalg.tensorsolve"},{"name":"cupy.linspace","description":"Returns an array with evenly-spaced values within a given interval.","signature":"cupy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.linspace.html#cupy.linspace","numpy":"numpy.linspace()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.linspace.html#numpy.linspace"},{"name":"cupy.load","description":"Loads arrays or pickled objects from .npy, .npz or pickled file.","signature":"cupy.load(file, mmap_mode=None, allow_pickle=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.load.html#cupy.load","numpy":"numpy.load()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.load.html#numpy.load"},{"name":"cupy.log = <ufunc 'cupy_log'>","description":"Elementwise natural logarithm function.","signature":"cupy.log = <ufunc 'cupy_log'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.log.html#cupy.log","numpy":"numpy.log","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.log.html#numpy.log"},{"name":"cupy.log10 = <ufunc 'cupy_log10'>","description":"Elementwise common logarithm function.","signature":"cupy.log10 = <ufunc 'cupy_log10'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.log10.html#cupy.log10","numpy":"numpy.log10","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.log10.html#numpy.log10"},{"name":"cupy.log1p = <ufunc 'cupy_log1p'>","description":"Computes log(1 + x) elementwise.","signature":"cupy.log1p = <ufunc 'cupy_log1p'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.log1p.html#cupy.log1p","numpy":"numpy.log1p","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.log1p.html#numpy.log1p"},{"name":"cupy.log2 = <ufunc 'cupy_log2'>","description":"Elementwise binary logarithm function.","signature":"cupy.log2 = <ufunc 'cupy_log2'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.log2.html#cupy.log2","numpy":"numpy.log2","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.log2.html#numpy.log2"},{"name":"cupy.logaddexp = <ufunc 'cupy_logaddexp'>","description":"Computes log(exp(x1) + exp(x2)) elementwise.","signature":"cupy.logaddexp = <ufunc 'cupy_logaddexp'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.logaddexp.html#cupy.logaddexp","numpy":"numpy.logaddexp","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.logaddexp.html#numpy.logaddexp"},{"name":"cupy.logaddexp2 = <ufunc 'cupy_logaddexp2'>","description":"Computes log2(exp2(x1) + exp2(x2)) elementwise.","signature":"cupy.logaddexp2 = <ufunc 'cupy_logaddexp2'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.logaddexp2.html#cupy.logaddexp2","numpy":"numpy.logaddexp2","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.logaddexp2.html#numpy.logaddexp2"},{"name":"cupy.logical_and = <ufunc 'cupy_logical_and'>","description":"Computes the logical AND of two arrays.","signature":"cupy.logical_and = <ufunc 'cupy_logical_and'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.logical_and.html#cupy.logical_and","numpy":"numpy.logical_and","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.logical_and.html#numpy.logical_and"},{"name":"cupy.logical_not = <ufunc 'cupy_logical_not'>","description":"Computes the logical NOT of an array.","signature":"cupy.logical_not = <ufunc 'cupy_logical_not'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.logical_not.html#cupy.logical_not","numpy":"numpy.logical_not","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.logical_not.html#numpy.logical_not"},{"name":"cupy.logical_or = <ufunc 'cupy_logical_or'>","description":"Computes the logical OR of two arrays.","signature":"cupy.logical_or = <ufunc 'cupy_logical_or'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.logical_or.html#cupy.logical_or","numpy":"numpy.logical_or","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.logical_or.html#numpy.logical_or"},{"name":"cupy.logical_xor = <ufunc 'cupy_logical_xor'>","description":"Computes the logical XOR of two arrays.","signature":"cupy.logical_xor = <ufunc 'cupy_logical_xor'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.logical_xor.html#cupy.logical_xor","numpy":"numpy.logical_xor","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.logical_xor.html#numpy.logical_xor"},{"name":"cupy.logspace","description":"Returns an array with evenly-spaced values on a log-scale.","signature":"cupy.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.logspace.html#cupy.logspace","numpy":"numpy.logspace()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.logspace.html#numpy.logspace"},{"name":"cupy.maximum = <ufunc 'cupy_maximum'>","description":"Takes the maximum of two arrays elementwise.","signature":"cupy.maximum = <ufunc 'cupy_maximum'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.maximum.html#cupy.maximum","numpy":"numpy.maximum","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.maximum.html#numpy.maximum"},{"name":"cupy.mean","description":"Returns the arithmetic mean along an axis.","signature":"cupy.mean(a, axis=None, dtype=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.mean.html#cupy.mean","numpy":"numpy.mean()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.mean.html#numpy.mean"},{"name":"cupy.median","description":"Compute the median along the specified axis.","signature":"cupy.median(a, axis=None, out=None, overwrite_input=False, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.median.html#cupy.median","numpy":"numpy.median()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.median.html#numpy.median"},{"name":"cupy.memoize","description":"Makes a function memoizing the result for each argument and device.","signature":"cupy.memoize(bool for_each_device=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.memoize.html#cupy.memoize","numpy":"","numpy_url":""},{"name":"cupy.meshgrid","description":"Return coordinate matrices from coordinate vectors.","signature":"cupy.meshgrid(*xi, **kwargs)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.meshgrid.html#cupy.meshgrid","numpy":"numpy.meshgrid()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.meshgrid.html#numpy.meshgrid"},{"name":"cupy.minimum = <ufunc 'cupy_minimum'>","description":"Takes the minimum of two arrays elementwise.","signature":"cupy.minimum = <ufunc 'cupy_minimum'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.minimum.html#cupy.minimum","numpy":"numpy.minimum","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.minimum.html#numpy.minimum"},{"name":"cupy.mod = <ufunc 'cupy_remainder'>","description":"Computes the remainder of Python division elementwise.","signature":"cupy.mod = <ufunc 'cupy_remainder'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.mod.html#cupy.mod","numpy":"","numpy_url":""},{"name":"cupy.modf = <ufunc 'cupy_modf'>","description":"Extracts the fractional and integral parts of an array elementwise.","signature":"cupy.modf = <ufunc 'cupy_modf'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.modf.html#cupy.modf","numpy":"numpy.modf","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.modf.html#numpy.modf"},{"name":"cupy.moveaxis","description":"Moves axes of an array to new positions.","signature":"cupy.moveaxis(a, source, destination)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.moveaxis.html#cupy.moveaxis","numpy":"numpy.moveaxis()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.moveaxis.html#numpy.moveaxis"},{"name":"cupy.msort","description":"Returns a copy of an array sorted along the first axis.","signature":"cupy.msort(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.msort.html#cupy.msort","numpy":"numpy.msort()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.msort.html#numpy.msort"},{"name":"cupy.multiply = <ufunc 'cupy_multiply'>","description":"Multiplies two arrays elementwise.","signature":"cupy.multiply = <ufunc 'cupy_multiply'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.multiply.html#cupy.multiply","numpy":"numpy.multiply","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.multiply.html#numpy.multiply"},{"name":"cupy.nan_to_num = <ufunc 'cupy_nan_to_num'>","description":"Elementwise nan_to_num function.","signature":"cupy.nan_to_num = <ufunc 'cupy_nan_to_num'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.nan_to_num.html#cupy.nan_to_num","numpy":"","numpy_url":""},{"name":"cupy.nanargmax","description":"Return the indices of the maximum values in the specified axis ignoring NaNs. For all-NaN slice -1 is returned. Subclass cannot be passed yet, subok=True still unsupported","signature":"cupy.nanargmax(a, axis=None, dtype=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.nanargmax.html#cupy.nanargmax","numpy":"numpy.nanargmax()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.nanargmax.html#numpy.nanargmax"},{"name":"cupy.nanargmin","description":"Return the indices of the minimum values in the specified axis ignoring NaNs. For all-NaN slice -1 is returned. Subclass cannot be passed yet, subok=True still unsupported","signature":"cupy.nanargmin(a, axis=None, dtype=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.nanargmin.html#cupy.nanargmin","numpy":"numpy.nanargmin()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.nanargmin.html#numpy.nanargmin"},{"name":"cupy.nancumprod","description":"Returns the cumulative product of an array along a given axis treating Not a Numbers (NaNs) as one.","signature":"cupy.nancumprod(a, axis=None, dtype=None, out=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.nancumprod.html#cupy.nancumprod","numpy":"numpy.nancumprod()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.nancumprod.html#numpy.nancumprod"},{"name":"cupy.nancumsum","description":"Returns the cumulative sum of an array along a given axis treating Not a Numbers (NaNs) as zero.","signature":"cupy.nancumsum(a, axis=None, dtype=None, out=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.nancumsum.html#cupy.nancumsum","numpy":"numpy.nancumsum()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.nancumsum.html#numpy.nancumsum"},{"name":"cupy.nanmax","description":"Returns the maximum of an array along an axis ignoring NaN.","signature":"cupy.nanmax(a, axis=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.nanmax.html#cupy.nanmax","numpy":"numpy.nanmax()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.nanmax.html#numpy.nanmax"},{"name":"cupy.nanmean","description":"Returns the arithmetic mean along an axis ignoring NaN values.","signature":"cupy.nanmean(a, axis=None, dtype=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.nanmean.html#cupy.nanmean","numpy":"numpy.nanmean()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.nanmean.html#numpy.nanmean"},{"name":"cupy.nanmedian","description":"Compute the median along the specified axis, while ignoring NaNs.","signature":"cupy.nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.nanmedian.html#cupy.nanmedian","numpy":"numpy.nanmedian()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.nanmedian.html#numpy.nanmedian"},{"name":"cupy.nanmin","description":"Returns the minimum of an array along an axis ignoring NaN.","signature":"cupy.nanmin(a, axis=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.nanmin.html#cupy.nanmin","numpy":"numpy.nanmin()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.nanmin.html#numpy.nanmin"},{"name":"cupy.nanprod","description":"Returns the product of an array along given axes treating Not a Numbers (NaNs) as zero.","signature":"cupy.nanprod(a, axis=None, dtype=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.nanprod.html#cupy.nanprod","numpy":"numpy.nanprod()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.nanprod.html#numpy.nanprod"},{"name":"cupy.nanstd","description":"Returns the standard deviation along an axis ignoring NaN values.","signature":"cupy.nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.nanstd.html#cupy.nanstd","numpy":"numpy.nanstd()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.nanstd.html#numpy.nanstd"},{"name":"cupy.nansum","description":"Returns the sum of an array along given axes treating Not a Numbers (NaNs) as zero.","signature":"cupy.nansum(a, axis=None, dtype=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.nansum.html#cupy.nansum","numpy":"numpy.nansum()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.nansum.html#numpy.nansum"},{"name":"cupy.nanvar","description":"Returns the variance along an axis ignoring NaN values.","signature":"cupy.nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.nanvar.html#cupy.nanvar","numpy":"numpy.nanvar()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.nanvar.html#numpy.nanvar"},{"name":"cupy.negative = <ufunc 'cupy_negative'>","description":"Takes numerical negative elementwise.","signature":"cupy.negative = <ufunc 'cupy_negative'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.negative.html#cupy.negative","numpy":"numpy.negative","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.negative.html#numpy.negative"},{"name":"cupy.nextafter = <ufunc 'cupy_nextafter'>","description":"Computes the nearest neighbor float values towards the second argument.","signature":"cupy.nextafter = <ufunc 'cupy_nextafter'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.nextafter.html#cupy.nextafter","numpy":"numpy.nextafter","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.nextafter.html#numpy.nextafter"},{"name":"cupy.nonzero","description":"Return the indices of the elements that are non-zero.","signature":"cupy.nonzero(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.nonzero.html#cupy.nonzero","numpy":"numpy.nonzero()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.nonzero.html#numpy.nonzero"},{"name":"cupy.not_equal = <ufunc 'cupy_not_equal'>","description":"Tests elementwise if x1 != x2.","signature":"cupy.not_equal = <ufunc 'cupy_not_equal'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.not_equal.html#cupy.not_equal","numpy":"","numpy_url":""},{"name":"cupy.ones","description":"Returns a new array of given shape and dtype, filled with ones.","signature":"cupy.ones(shape, dtype=<class 'float'>, order='C')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.ones.html#cupy.ones","numpy":"numpy.ones()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.ones.html#numpy.ones"},{"name":"cupy.ones_like","description":"Returns an array of ones with same shape and dtype as a given array.","signature":"cupy.ones_like(a, dtype=None, order='K', subok=None, shape=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.ones_like.html#cupy.ones_like","numpy":"numpy.ones_like()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.ones_like.html#numpy.ones_like"},{"name":"cupy.outer","description":"Returns the outer product of two vectors.","signature":"cupy.outer(a, b, out=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.outer.html#cupy.outer","numpy":"numpy.outer()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.outer.html#numpy.outer"},{"name":"cupy.packbits","description":"Packs the elements of a binary-valued array into bits in a uint8 array.","signature":"cupy.packbits(myarray)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.packbits.html#cupy.packbits","numpy":"numpy.packbits()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.packbits.html#numpy.packbits"},{"name":"cupy.pad","description":"Pads an array with specified widths and values.","signature":"cupy.pad(array, pad_width, mode='constant', **kwargs)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.pad.html#cupy.pad","numpy":"","numpy_url":""},{"name":"cupy.partition","description":"Returns a partitioned copy of an array.","signature":"cupy.partition(a, kth, axis=- 1)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.partition.html#cupy.partition","numpy":"numpy.partition()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.partition.html#numpy.partition"},{"name":"cupy.percentile","description":"Computes the q-th percentile of the data along the specified axis.","signature":"cupy.percentile(a, q, axis=None, out=None, interpolation='linear', keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.percentile.html#cupy.percentile","numpy":"numpy.percentile()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.percentile.html#numpy.percentile"},{"name":"cupy.piecewise","description":"Evaluate a piecewise-defined function.","signature":"cupy.piecewise(x, condlist, funclist)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.piecewise.html#cupy.piecewise","numpy":"numpy.piecewise()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.piecewise.html#numpy.piecewise"},{"name":"cupy.place","description":"Change elements of an array based on conditional and input values.","signature":"cupy.place(arr, mask, vals)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.place.html#cupy.place","numpy":"numpy.place()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.place.html#numpy.place"},{"name":"cupy.polyadd","description":"Computes the sum of two polynomials.","signature":"cupy.polyadd(a1, a2)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.polyadd.html#cupy.polyadd","numpy":"numpy.polyadd()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.polyadd.html#numpy.polyadd"},{"name":"cupy.polyfit","description":"Returns the least squares fit of polynomial of degree deg to the data y sampled at x.","signature":"cupy.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.polyfit.html#cupy.polyfit","numpy":"numpy.polyfit()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.polyfit.html#numpy.polyfit"},{"name":"cupy.polymul","description":"Computes the product of two polynomials.","signature":"cupy.polymul(a1, a2)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.polymul.html#cupy.polymul","numpy":"numpy.polymul()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.polymul.html#numpy.polymul"},{"name":"cupy.polynomial.polynomial.polycompanion","description":"Computes the companion matrix of c.","signature":"cupy.polynomial.polynomial.polycompanion(c)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.polynomial.polynomial.polycompanion.html#cupy.polynomial.polynomial.polycompanion","numpy":"numpy.polynomial.polynomial.polycompanion()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polycompanion.html#numpy.polynomial.polynomial.polycompanion"},{"name":"cupy.polynomial.polynomial.polyvander","description":"Computes the Vandermonde matrix of given degree.","signature":"cupy.polynomial.polynomial.polyvander(x, deg)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.polynomial.polynomial.polyvander.html#cupy.polynomial.polynomial.polyvander","numpy":"numpy.polynomial.polynomial.polyvander()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polyvander.html#numpy.polynomial.polynomial.polyvander"},{"name":"cupy.polynomial.polyutils.as_series","description":"Returns argument as a list of 1-d arrays.","signature":"cupy.polynomial.polyutils.as_series(alist, trim=True)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.polynomial.polyutils.as_series.html#cupy.polynomial.polyutils.as_series","numpy":"numpy.polynomial.polyutils.as_series()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polyutils.as_series.html#numpy.polynomial.polyutils.as_series"},{"name":"cupy.polynomial.polyutils.trimcoef","description":"Removes small trailing coefficients from a polynomial.","signature":"cupy.polynomial.polyutils.trimcoef(c, tol=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.polynomial.polyutils.trimcoef.html#cupy.polynomial.polyutils.trimcoef","numpy":"numpy.polynomial.polyutils.trimcoef()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polyutils.trimcoef.html#numpy.polynomial.polyutils.trimcoef"},{"name":"cupy.polynomial.polyutils.trimseq","description":"Removes small polynomial series coefficients.","signature":"cupy.polynomial.polyutils.trimseq(seq)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.polynomial.polyutils.trimseq.html#cupy.polynomial.polyutils.trimseq","numpy":"numpy.polynomial.polyutils.trimseq()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polyutils.trimseq.html#numpy.polynomial.polyutils.trimseq"},{"name":"cupy.polysub","description":"Computes the difference of two polynomials.","signature":"cupy.polysub(a1, a2)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.polysub.html#cupy.polysub","numpy":"numpy.polysub()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.polysub.html#numpy.polysub"},{"name":"cupy.polyval","description":"Evaluates a polynomial at specific values.","signature":"cupy.polyval(p, x)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.polyval.html#cupy.polyval","numpy":"numpy.polyval()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.polyval.html#numpy.polyval"},{"name":"cupy.power = <ufunc 'cupy_power'>","description":"Computes x1 ** x2 elementwise.","signature":"cupy.power = <ufunc 'cupy_power'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.power.html#cupy.power","numpy":"numpy.power","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.power.html#numpy.power"},{"name":"cupy.prod","description":"Returns the product of an array along given axes.","signature":"cupy.prod(a, axis=None, dtype=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.prod.html#cupy.prod","numpy":"numpy.prod()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.prod.html#numpy.prod"},{"name":"cupy.prof.time_range","description":"A context manager to describe the enclosed block as a nested range","signature":"cupy.prof.time_range(message, color_id=None, argb_color=None, sync=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.prof.time_range.html#cupy.prof.time_range","numpy":"","numpy_url":""},{"name":"cupy.ptp","description":"Returns the range of values (maximum - minimum) along an axis.","signature":"cupy.ptp(a, axis=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.ptp.html#cupy.ptp","numpy":"","numpy_url":""},{"name":"cupy.put","description":"Replaces specified elements of an array with given values.","signature":"cupy.put(a, ind, v, mode='wrap')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.put.html#cupy.put","numpy":"numpy.put()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.put.html#numpy.put"},{"name":"cupy.putmask","description":"Changes elements of an array inplace, based on a conditional mask and input values.","signature":"cupy.putmask(a, mask, values)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.putmask.html#cupy.putmask","numpy":"numpy.putmask()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.putmask.html#numpy.putmask"},{"name":"cupy.quantile","description":"Computes the q-th quantile of the data along the specified axis.","signature":"cupy.quantile(a, q, axis=None, out=None, interpolation='linear', keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.quantile.html#cupy.quantile","numpy":"numpy.quantile()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.quantile.html#numpy.quantile"},{"name":"cupy.rad2deg = <ufunc 'cupy_rad2deg'>","description":"Converts angles from radians to degrees elementwise.","signature":"cupy.rad2deg = <ufunc 'cupy_rad2deg'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.rad2deg.html#cupy.rad2deg","numpy":"numpy.rad2deg","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.rad2deg.html#numpy.rad2deg"},{"name":"cupy.radians = <ufunc 'cupy_deg2rad'>","description":"Converts angles from degrees to radians elementwise.","signature":"cupy.radians = <ufunc 'cupy_deg2rad'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.radians.html#cupy.radians","numpy":"numpy.radians","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.radians.html#numpy.radians"},{"name":"cupy.random.beta","description":"Beta distribution.","signature":"cupy.random.beta(a, b, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.beta.html#cupy.random.beta","numpy":"numpy.random.beta()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.beta.html#numpy.random.beta"},{"name":"cupy.random.binomial","description":"Binomial distribution.","signature":"cupy.random.binomial(n, p, size=None, dtype=<class 'int'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.binomial.html#cupy.random.binomial","numpy":"numpy.random.binomial()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.binomial.html#numpy.random.binomial"},{"name":"cupy.random.bytes","description":"Returns random bytes.","signature":"cupy.random.bytes(length)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.bytes.html#cupy.random.bytes","numpy":"","numpy_url":""},{"name":"cupy.random.chisquare","description":"Chi-square distribution.","signature":"cupy.random.chisquare(df, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.chisquare.html#cupy.random.chisquare","numpy":"numpy.random.chisquare()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.chisquare.html#numpy.random.chisquare"},{"name":"cupy.random.choice","description":"Returns an array of random values from a given 1-D array.","signature":"cupy.random.choice(a, size=None, replace=True, p=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.choice.html#cupy.random.choice","numpy":"","numpy_url":""},{"name":"cupy.random.default_rng","description":"Construct a new Generator with the default BitGenerator (XORWOW).","signature":"cupy.random.default_rng(seed=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.default_rng.html#cupy.random.default_rng","numpy":"","numpy_url":""},{"name":"cupy.random.dirichlet","description":"Dirichlet distribution.","signature":"cupy.random.dirichlet(alpha, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.dirichlet.html#cupy.random.dirichlet","numpy":"numpy.random.dirichlet()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.dirichlet.html#numpy.random.dirichlet"},{"name":"cupy.random.exponential","description":"Exponential distribution.","signature":"cupy.random.exponential(scale, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.exponential.html#cupy.random.exponential","numpy":"numpy.random.exponential()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.exponential.html#numpy.random.exponential"},{"name":"cupy.random.f","description":"F distribution.","signature":"cupy.random.f(dfnum, dfden, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.f.html#cupy.random.f","numpy":"numpy.random.f()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.f.html#numpy.random.f"},{"name":"cupy.random.gamma","description":"Gamma distribution.","signature":"cupy.random.gamma(shape, scale=1.0, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.gamma.html#cupy.random.gamma","numpy":"numpy.random.gamma()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.gamma.html#numpy.random.gamma"},{"name":"cupy.random.geometric","description":"Geometric distribution.","signature":"cupy.random.geometric(p, size=None, dtype=<class 'int'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.geometric.html#cupy.random.geometric","numpy":"numpy.random.geometric()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.geometric.html#numpy.random.geometric"},{"name":"cupy.random.get_random_state","description":"Gets the state of the random number generator for the current device.","signature":"cupy.random.get_random_state()","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.get_random_state.html#cupy.random.get_random_state","numpy":"","numpy_url":""},{"name":"cupy.random.gumbel","description":"Returns an array of samples drawn from a Gumbel distribution.","signature":"cupy.random.gumbel(loc=0.0, scale=1.0, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.gumbel.html#cupy.random.gumbel","numpy":"numpy.random.gumbel()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.gumbel.html#numpy.random.gumbel"},{"name":"cupy.random.hypergeometric","description":"hypergeometric distribution.","signature":"cupy.random.hypergeometric(ngood, nbad, nsample, size=None, dtype=<class 'int'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.hypergeometric.html#cupy.random.hypergeometric","numpy":"numpy.random.hypergeometric()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.hypergeometric.html#numpy.random.hypergeometric"},{"name":"cupy.random.laplace","description":"Laplace distribution.","signature":"cupy.random.laplace(loc=0.0, scale=1.0, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.laplace.html#cupy.random.laplace","numpy":"numpy.random.laplace()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.laplace.html#numpy.random.laplace"},{"name":"cupy.random.logistic","description":"Logistic distribution.","signature":"cupy.random.logistic(loc=0.0, scale=1.0, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.logistic.html#cupy.random.logistic","numpy":"numpy.random.logistic()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.logistic.html#numpy.random.logistic"},{"name":"cupy.random.lognormal","description":"Returns an array of samples drawn from a log normal distribution.","signature":"cupy.random.lognormal(mean=0.0, sigma=1.0, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.lognormal.html#cupy.random.lognormal","numpy":"numpy.random.lognormal()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.lognormal.html#numpy.random.lognormal"},{"name":"cupy.random.logseries","description":"Log series distribution.","signature":"cupy.random.logseries(p, size=None, dtype=<class 'int'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.logseries.html#cupy.random.logseries","numpy":"numpy.random.logseries()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.logseries.html#numpy.random.logseries"},{"name":"cupy.random.multinomial","description":"Returns an array from multinomial distribution.","signature":"cupy.random.multinomial(n, pvals, size=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.multinomial.html#cupy.random.multinomial","numpy":"","numpy_url":""},{"name":"cupy.random.multivariate_normal","description":"Multivariate normal distribution.","signature":"cupy.random.multivariate_normal(mean, cov, size=None, check_valid='ignore', tol=1e-08, method='cholesky', dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.multivariate_normal.html#cupy.random.multivariate_normal","numpy":"numpy.random.multivariate_normal()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.multivariate_normal.html#numpy.random.multivariate_normal"},{"name":"cupy.random.negative_binomial","description":"Negative binomial distribution.","signature":"cupy.random.negative_binomial(n, p, size=None, dtype=<class 'int'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.negative_binomial.html#cupy.random.negative_binomial","numpy":"numpy.random.negative_binomial()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.negative_binomial.html#numpy.random.negative_binomial"},{"name":"cupy.random.noncentral_chisquare","description":"Noncentral chisquare distribution.","signature":"cupy.random.noncentral_chisquare(df, nonc, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.noncentral_chisquare.html#cupy.random.noncentral_chisquare","numpy":"numpy.random.noncentral_chisquare()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.noncentral_chisquare.html#numpy.random.noncentral_chisquare"},{"name":"cupy.random.noncentral_f","description":"Noncentral F distribution.","signature":"cupy.random.noncentral_f(dfnum, dfden, nonc, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.noncentral_f.html#cupy.random.noncentral_f","numpy":"numpy.random.noncentral_f()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.noncentral_f.html#numpy.random.noncentral_f"},{"name":"cupy.random.normal","description":"Returns an array of normally distributed samples.","signature":"cupy.random.normal(loc=0.0, scale=1.0, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.normal.html#cupy.random.normal","numpy":"numpy.random.normal()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.normal.html#numpy.random.normal"},{"name":"cupy.random.pareto","description":"Pareto II or Lomax distribution.","signature":"cupy.random.pareto(a, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.pareto.html#cupy.random.pareto","numpy":"numpy.random.pareto()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.pareto.html#numpy.random.pareto"},{"name":"cupy.random.permutation","description":"Returns a permuted range or a permutation of an array.","signature":"cupy.random.permutation(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.permutation.html#cupy.random.permutation","numpy":"","numpy_url":""},{"name":"cupy.random.poisson","description":"Poisson distribution.","signature":"cupy.random.poisson(lam=1.0, size=None, dtype=<class 'int'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.poisson.html#cupy.random.poisson","numpy":"numpy.random.poisson()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.poisson.html#numpy.random.poisson"},{"name":"cupy.random.power","description":"Power distribution.","signature":"cupy.random.power(a, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.power.html#cupy.random.power","numpy":"numpy.random.power()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.power.html#numpy.random.power"},{"name":"cupy.random.rand","description":"Returns an array of uniform random values over the interval [0, 1).","signature":"cupy.random.rand(*size, **kwarg)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.rand.html#cupy.random.rand","numpy":"","numpy_url":""},{"name":"cupy.random.randint","description":"Returns a scalar or an array of integer values over [low, high).","signature":"cupy.random.randint(low, high=None, size=None, dtype='l')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.randint.html#cupy.random.randint","numpy":"","numpy_url":""},{"name":"cupy.random.randn","description":"Returns an array of standard normal random values.","signature":"cupy.random.randn(*size, **kwarg)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.randn.html#cupy.random.randn","numpy":"","numpy_url":""},{"name":"cupy.random.random","description":"Returns an array of random values over the interval [0, 1).","signature":"cupy.random.random(size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.random.html#cupy.random.random","numpy":"","numpy_url":""},{"name":"cupy.random.random_integers","description":"Return a scalar or an array of integer values over [low, high]","signature":"cupy.random.random_integers(low, high=None, size=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.random_integers.html#cupy.random.random_integers","numpy":"","numpy_url":""},{"name":"cupy.random.random_sample","description":"Returns an array of random values over the interval [0, 1).","signature":"cupy.random.random_sample(size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.random_sample.html#cupy.random.random_sample","numpy":"","numpy_url":""},{"name":"cupy.random.ranf","description":"Returns an array of random values over the interval [0, 1).","signature":"cupy.random.ranf(size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.ranf.html#cupy.random.ranf","numpy":"","numpy_url":""},{"name":"cupy.random.rayleigh","description":"Rayleigh distribution.","signature":"cupy.random.rayleigh(scale=1.0, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.rayleigh.html#cupy.random.rayleigh","numpy":"numpy.random.rayleigh()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.rayleigh.html#numpy.random.rayleigh"},{"name":"cupy.random.sample","description":"Returns an array of random values over the interval [0, 1).","signature":"cupy.random.sample(size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.sample.html#cupy.random.sample","numpy":"","numpy_url":""},{"name":"cupy.random.seed","description":"Resets the state of the random number generator with a seed.","signature":"cupy.random.seed(seed=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.seed.html#cupy.random.seed","numpy":"","numpy_url":""},{"name":"cupy.random.set_random_state","description":"Sets the state of the random number generator for the current device.","signature":"cupy.random.set_random_state(rs)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.set_random_state.html#cupy.random.set_random_state","numpy":"","numpy_url":""},{"name":"cupy.random.shuffle","description":"Shuffles an array.","signature":"cupy.random.shuffle(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.shuffle.html#cupy.random.shuffle","numpy":"","numpy_url":""},{"name":"cupy.random.standard_cauchy","description":"Standard cauchy distribution.","signature":"cupy.random.standard_cauchy(size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.standard_cauchy.html#cupy.random.standard_cauchy","numpy":"numpy.random.standard_cauchy()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.standard_cauchy.html#numpy.random.standard_cauchy"},{"name":"cupy.random.standard_exponential","description":"Standard exponential distribution.","signature":"cupy.random.standard_exponential(size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.standard_exponential.html#cupy.random.standard_exponential","numpy":"numpy.random.standard_exponential()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.standard_exponential.html#numpy.random.standard_exponential"},{"name":"cupy.random.standard_gamma","description":"Standard gamma distribution.","signature":"cupy.random.standard_gamma(shape, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.standard_gamma.html#cupy.random.standard_gamma","numpy":"numpy.random.standard_gamma()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.standard_gamma.html#numpy.random.standard_gamma"},{"name":"cupy.random.standard_normal","description":"Returns an array of samples drawn from the standard normal distribution.","signature":"cupy.random.standard_normal(size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.standard_normal.html#cupy.random.standard_normal","numpy":"numpy.random.standard_normal()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.standard_normal.html#numpy.random.standard_normal"},{"name":"cupy.random.standard_t","description":"Standard Student’s t distribution.","signature":"cupy.random.standard_t(df, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.standard_t.html#cupy.random.standard_t","numpy":"numpy.random.standard_t()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.standard_t.html#numpy.random.standard_t"},{"name":"cupy.random.triangular","description":"Triangular distribution.","signature":"cupy.random.triangular(left, mode, right, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.triangular.html#cupy.random.triangular","numpy":"numpy.random.triangular()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.triangular.html#numpy.random.triangular"},{"name":"cupy.random.uniform","description":"Returns an array of uniformly-distributed samples over an interval.","signature":"cupy.random.uniform(low=0.0, high=1.0, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.uniform.html#cupy.random.uniform","numpy":"numpy.random.uniform()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.uniform.html#numpy.random.uniform"},{"name":"cupy.random.vonmises","description":"von Mises distribution.","signature":"cupy.random.vonmises(mu, kappa, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.vonmises.html#cupy.random.vonmises","numpy":"numpy.random.vonmises()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.vonmises.html#numpy.random.vonmises"},{"name":"cupy.random.wald","description":"Wald distribution.","signature":"cupy.random.wald(mean, scale, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.wald.html#cupy.random.wald","numpy":"numpy.random.wald()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.wald.html#numpy.random.wald"},{"name":"cupy.random.weibull","description":"weibull distribution.","signature":"cupy.random.weibull(a, size=None, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.weibull.html#cupy.random.weibull","numpy":"numpy.random.weibull()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.weibull.html#numpy.random.weibull"},{"name":"cupy.random.zipf","description":"Zipf distribution.","signature":"cupy.random.zipf(a, size=None, dtype=<class 'int'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.random.zipf.html#cupy.random.zipf","numpy":"numpy.random.zipf()","numpy_url":"https://numpy.org/doc/stable/reference/random/generated/numpy.random.zipf.html#numpy.random.zipf"},{"name":"cupy.ravel","description":"Returns a flattened array.","signature":"cupy.ravel(a, order='C')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.ravel.html#cupy.ravel","numpy":"numpy.ravel()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.ravel.html#numpy.ravel"},{"name":"cupy.ravel_multi_index","description":"Converts a tuple of index arrays into an array of flat indices, applying boundary modes to the multi-index.","signature":"cupy.ravel_multi_index(multi_index, dims, mode='wrap', order='C')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.ravel_multi_index.html#cupy.ravel_multi_index","numpy":"numpy.ravel_multi_index()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.ravel_multi_index.html#numpy.ravel_multi_index"},{"name":"cupy.real","description":"Returns the real part of the elements of the array.","signature":"cupy.real(val)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.real.html#cupy.real","numpy":"numpy.real()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.real.html#numpy.real"},{"name":"cupy.reciprocal = <ufunc 'cupy_reciprocal'>","description":"Computes 1 / x elementwise.","signature":"cupy.reciprocal = <ufunc 'cupy_reciprocal'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.reciprocal.html#cupy.reciprocal","numpy":"numpy.reciprocal","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.reciprocal.html#numpy.reciprocal"},{"name":"cupy.remainder = <ufunc 'cupy_remainder'>","description":"Computes the remainder of Python division elementwise.","signature":"cupy.remainder = <ufunc 'cupy_remainder'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.remainder.html#cupy.remainder","numpy":"numpy.remainder","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.remainder.html#numpy.remainder"},{"name":"cupy.repeat","description":"Repeat arrays along an axis.","signature":"cupy.repeat(a, repeats, axis=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.repeat.html#cupy.repeat","numpy":"numpy.repeat()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.repeat.html#numpy.repeat"},{"name":"cupy.require","description":"Return an array which satisfies the requirements.","signature":"cupy.require(a, dtype=None, requirements=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.require.html#cupy.require","numpy":"numpy.require()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.require.html#numpy.require"},{"name":"cupy.reshape","description":"Returns an array with new shape and same elements.","signature":"cupy.reshape(a, newshape, order='C')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.reshape.html#cupy.reshape","numpy":"numpy.reshape()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.reshape.html#numpy.reshape"},{"name":"cupy.resize","description":"Return a new array with the specified shape.","signature":"cupy.resize(a, new_shape)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.resize.html#cupy.resize","numpy":"numpy.resize()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.resize.html#numpy.resize"},{"name":"cupy.result_type","description":"Returns the type that results from applying the NumPy type promotion rules to the arguments.","signature":"cupy.result_type(*arrays_and_dtypes)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.result_type.html#cupy.result_type","numpy":"numpy.result_type()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.result_type.html#numpy.result_type"},{"name":"cupy.right_shift = <ufunc 'cupy_right_shift'>","description":"Shifts the bits of each integer element to the right.","signature":"cupy.right_shift = <ufunc 'cupy_right_shift'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.right_shift.html#cupy.right_shift","numpy":"numpy.right_shift","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.right_shift.html#numpy.right_shift"},{"name":"cupy.rint = <ufunc 'cupy_rint'>","description":"Rounds each element of an array to the nearest integer.","signature":"cupy.rint = <ufunc 'cupy_rint'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.rint.html#cupy.rint","numpy":"numpy.rint","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.rint.html#numpy.rint"},{"name":"cupy.roll","description":"Roll array elements along a given axis.","signature":"cupy.roll(a, shift, axis=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.roll.html#cupy.roll","numpy":"numpy.roll()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.roll.html#numpy.roll"},{"name":"cupy.rollaxis","description":"Moves the specified axis backwards to the given place.","signature":"cupy.rollaxis(a, axis, start=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.rollaxis.html#cupy.rollaxis","numpy":"numpy.rollaxis()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.rollaxis.html#numpy.rollaxis"},{"name":"cupy.roots","description":"Computes the roots of a polynomial with given coefficients.","signature":"cupy.roots(p)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.roots.html#cupy.roots","numpy":"numpy.roots()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.roots.html#numpy.roots"},{"name":"cupy.rot90","description":"Rotate an array by 90 degrees in the plane specified by axes.","signature":"cupy.rot90(a, k=1, axes=(0, 1))","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.rot90.html#cupy.rot90","numpy":"numpy.rot90()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.rot90.html#numpy.rot90"},{"name":"cupy.save","description":"Saves an array to a binary file in .npy format.","signature":"cupy.save(file, arr, allow_pickle=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.save.html#cupy.save","numpy":"numpy.save()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.save.html#numpy.save"},{"name":"cupy.savez","description":"Saves one or more arrays into a file in uncompressed .npz format.","signature":"cupy.savez(file, *args, **kwds)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.savez.html#cupy.savez","numpy":"numpy.savez()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.savez.html#numpy.savez"},{"name":"cupy.savez_compressed","description":"Saves one or more arrays into a file in compressed .npz format.","signature":"cupy.savez_compressed(file, *args, **kwds)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.savez_compressed.html#cupy.savez_compressed","numpy":"numpy.savez_compressed()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.savez_compressed.html#numpy.savez_compressed"},{"name":"cupy.searchsorted","description":"Finds indices where elements should be inserted to maintain order.","signature":"cupy.searchsorted(a, v, side='left', sorter=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.searchsorted.html#cupy.searchsorted","numpy":"numpy.searchsorted()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.searchsorted.html#numpy.searchsorted"},{"name":"cupy.select","description":"Return an array drawn from elements in choicelist, depending on conditions.","signature":"cupy.select(condlist, choicelist, default=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.select.html#cupy.select","numpy":"numpy.select()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.select.html#numpy.select"},{"name":"cupy.shape","description":"Returns the shape of an array","signature":"cupy.shape(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.shape.html#cupy.shape","numpy":"","numpy_url":""},{"name":"cupy.show_config","description":"Prints the current runtime configuration to standard output.","signature":"cupy.show_config()","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.show_config.html#cupy.show_config","numpy":"","numpy_url":""},{"name":"cupy.sign = <ufunc 'cupy_sign'>","description":"Elementwise sign function.","signature":"cupy.sign = <ufunc 'cupy_sign'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.sign.html#cupy.sign","numpy":"numpy.sign","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.sign.html#numpy.sign"},{"name":"cupy.signbit = <ufunc 'cupy_signbit'>","description":"Tests elementwise if the sign bit is set (i.e. less than zero).","signature":"cupy.signbit = <ufunc 'cupy_signbit'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.signbit.html#cupy.signbit","numpy":"numpy.signbit","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.signbit.html#numpy.signbit"},{"name":"cupy.sin = <ufunc 'cupy_sin'>","description":"Elementwise sine function.","signature":"cupy.sin = <ufunc 'cupy_sin'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.sin.html#cupy.sin","numpy":"numpy.sin","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.sin.html#numpy.sin"},{"name":"cupy.sinc = <ufunc 'cupy_sinc'>","description":"Elementwise sinc function.","signature":"cupy.sinc = <ufunc 'cupy_sinc'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.sinc.html#cupy.sinc","numpy":"numpy.sinc()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.sinc.html#numpy.sinc"},{"name":"cupy.sinh = <ufunc 'cupy_sinh'>","description":"Elementwise hyperbolic sine function.","signature":"cupy.sinh = <ufunc 'cupy_sinh'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.sinh.html#cupy.sinh","numpy":"numpy.sinh","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.sinh.html#numpy.sinh"},{"name":"cupy.sort","description":"Returns a sorted copy of an array with a stable sorting algorithm.","signature":"cupy.sort(a, axis=- 1)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.sort.html#cupy.sort","numpy":"numpy.sort()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.sort.html#numpy.sort"},{"name":"cupy.sort_complex","description":"Sort a complex array using the real part first, then the imaginary part.","signature":"cupy.sort_complex(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.sort_complex.html#cupy.sort_complex","numpy":"numpy.sort_complex()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.sort_complex.html#numpy.sort_complex"},{"name":"cupy.split","description":"Splits an array into multiple sub arrays along a given axis.","signature":"cupy.split(ary, indices_or_sections, axis=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.split.html#cupy.split","numpy":"numpy.split()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.split.html#numpy.split"},{"name":"cupy.sqrt = <ufunc 'cupy_sqrt'>","description":"Elementwise square root function.","signature":"cupy.sqrt = <ufunc 'cupy_sqrt'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.sqrt.html#cupy.sqrt","numpy":"numpy.sqrt","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.sqrt.html#numpy.sqrt"},{"name":"cupy.square = <ufunc 'cupy_square'>","description":"Elementwise square function.","signature":"cupy.square = <ufunc 'cupy_square'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.square.html#cupy.square","numpy":"numpy.square","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.square.html#numpy.square"},{"name":"cupy.squeeze","description":"Removes size-one axes from the shape of an array.","signature":"cupy.squeeze(a, axis=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.squeeze.html#cupy.squeeze","numpy":"numpy.squeeze()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.squeeze.html#numpy.squeeze"},{"name":"cupy.stack","description":"Stacks arrays along a new axis.","signature":"cupy.stack(tup, axis=0, out=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.stack.html#cupy.stack","numpy":"numpy.stack()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.stack.html#numpy.stack"},{"name":"cupy.std","description":"Returns the standard deviation along an axis.","signature":"cupy.std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.std.html#cupy.std","numpy":"numpy.std()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.std.html#numpy.std"},{"name":"cupy.subtract = <ufunc 'cupy_subtract'>","description":"Subtracts arguments elementwise.","signature":"cupy.subtract = <ufunc 'cupy_subtract'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.subtract.html#cupy.subtract","numpy":"numpy.subtract","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.subtract.html#numpy.subtract"},{"name":"cupy.sum","description":"Returns the sum of an array along given axes.","signature":"cupy.sum(a, axis=None, dtype=None, out=None, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.sum.html#cupy.sum","numpy":"numpy.sum()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.sum.html#numpy.sum"},{"name":"cupy.swapaxes","description":"Swaps the two axes.","signature":"cupy.swapaxes(a, axis1, axis2)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.swapaxes.html#cupy.swapaxes","numpy":"numpy.swapaxes()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.swapaxes.html#numpy.swapaxes"},{"name":"cupy.take","description":"Takes elements of an array at specified indices along an axis.","signature":"cupy.take(a, indices, axis=None, out=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.take.html#cupy.take","numpy":"numpy.take()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.take.html#numpy.take"},{"name":"cupy.take_along_axis","description":"Take values from the input array by matching 1d index and data slices.","signature":"cupy.take_along_axis(a, indices, axis)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.take_along_axis.html#cupy.take_along_axis","numpy":"numpy.take_along_axis()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.take_along_axis.html#numpy.take_along_axis"},{"name":"cupy.tan = <ufunc 'cupy_tan'>","description":"Elementwise tangent function.","signature":"cupy.tan = <ufunc 'cupy_tan'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.tan.html#cupy.tan","numpy":"numpy.tan","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.tan.html#numpy.tan"},{"name":"cupy.tanh = <ufunc 'cupy_tanh'>","description":"Elementwise hyperbolic tangent function.","signature":"cupy.tanh = <ufunc 'cupy_tanh'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.tanh.html#cupy.tanh","numpy":"numpy.tanh","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.tanh.html#numpy.tanh"},{"name":"cupy.tensordot","description":"Returns the tensor dot product of two arrays along specified axes.","signature":"cupy.tensordot(a, b, axes=2)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.tensordot.html#cupy.tensordot","numpy":"numpy.tensordot()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.tensordot.html#numpy.tensordot"},{"name":"cupy.tile","description":"Construct an array by repeating A the number of times given by reps.","signature":"cupy.tile(A, reps)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.tile.html#cupy.tile","numpy":"numpy.tile()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.tile.html#numpy.tile"},{"name":"cupy.trace","description":"Returns the sum along the diagonals of an array.","signature":"cupy.trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.trace.html#cupy.trace","numpy":"numpy.trace()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.trace.html#numpy.trace"},{"name":"cupy.transpose","description":"Permutes the dimensions of an array.","signature":"cupy.transpose(a, axes=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.transpose.html#cupy.transpose","numpy":"numpy.transpose()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.transpose.html#numpy.transpose"},{"name":"cupy.tri","description":"Creates an array with ones at and below the given diagonal.","signature":"cupy.tri(N, M=None, k=0, dtype=<class 'float'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.tri.html#cupy.tri","numpy":"numpy.tri()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.tri.html#numpy.tri"},{"name":"cupy.tril","description":"Returns a lower triangle of an array.","signature":"cupy.tril(m, k=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.tril.html#cupy.tril","numpy":"numpy.tril()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.tril.html#numpy.tril"},{"name":"cupy.trim_zeros","description":"Trim the leading and/or trailing zeros from a 1-D array or sequence.","signature":"cupy.trim_zeros(filt, trim='fb')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.trim_zeros.html#cupy.trim_zeros","numpy":"numpy.trim_zeros()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.trim_zeros.html#numpy.trim_zeros"},{"name":"cupy.triu","description":"Returns an upper triangle of an array.","signature":"cupy.triu(m, k=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.triu.html#cupy.triu","numpy":"numpy.triu()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.triu.html#numpy.triu"},{"name":"cupy.true_divide = <ufunc 'cupy_true_divide'>","description":"Elementwise true division (i.e. division as floating values).","signature":"cupy.true_divide = <ufunc 'cupy_true_divide'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.true_divide.html#cupy.true_divide","numpy":"numpy.true_divide","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.true_divide.html#numpy.true_divide"},{"name":"cupy.trunc = <ufunc 'cupy_trunc'>","description":"Rounds each element of an array towards zero.","signature":"cupy.trunc = <ufunc 'cupy_trunc'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.trunc.html#cupy.trunc","numpy":"numpy.trunc","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.trunc.html#numpy.trunc"},{"name":"cupy.unique","description":"Find the unique elements of an array.","signature":"cupy.unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.unique.html#cupy.unique","numpy":"numpy.unique()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.unique.html#numpy.unique"},{"name":"cupy.unpackbits","description":"Unpacks elements of a uint8 array into a binary-valued output array.","signature":"cupy.unpackbits(myarray)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.unpackbits.html#cupy.unpackbits","numpy":"numpy.unpackbits()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.unpackbits.html#numpy.unpackbits"},{"name":"cupy.unravel_index","description":"Converts array of flat indices into a tuple of coordinate arrays.","signature":"cupy.unravel_index(indices, dims, order='C')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.unravel_index.html#cupy.unravel_index","numpy":"numpy.unravel_index()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.unravel_index.html#numpy.unravel_index"},{"name":"cupy.unwrap","description":"Unwrap by changing deltas between values to 2*pi complement.","signature":"cupy.unwrap(p, discont=3.141592653589793, axis=- 1)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.unwrap.html#cupy.unwrap","numpy":"numpy.unwrap()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.unwrap.html#numpy.unwrap"},{"name":"cupy.var","description":"Returns the variance along an axis.","signature":"cupy.var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.var.html#cupy.var","numpy":"numpy.var()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.var.html#numpy.var"},{"name":"cupy.vdot","description":"Returns the dot product of two vectors.","signature":"cupy.vdot(a, b)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.vdot.html#cupy.vdot","numpy":"numpy.vdot()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.vdot.html#numpy.vdot"},{"name":"cupy.vsplit","description":"Splits an array into multiple sub arrays along the first axis.","signature":"cupy.vsplit(ary, indices_or_sections)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.vsplit.html#cupy.vsplit","numpy":"","numpy_url":""},{"name":"cupy.vstack","description":"Stacks arrays vertically.","signature":"cupy.vstack(tup)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.vstack.html#cupy.vstack","numpy":"","numpy_url":""},{"name":"cupy.where","description":"Return elements, either from x or y, depending on condition.","signature":"cupy.where(condition, x=None, y=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.where.html#cupy.where","numpy":"numpy.where()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.where.html#numpy.where"},{"name":"cupy.who","description":"Print the CuPy arrays in the given dictionary.","signature":"cupy.who(vardict=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.who.html#cupy.who","numpy":"","numpy_url":""},{"name":"cupy.zeros","description":"Returns a new array of given shape and dtype, filled with zeros.","signature":"cupy.zeros(shape, dtype=<class 'float'>, order='C')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.zeros.html#cupy.zeros","numpy":"numpy.zeros()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.zeros.html#numpy.zeros"},{"name":"cupy.zeros_like","description":"Returns an array of zeros with same shape and dtype as a given array.","signature":"cupy.zeros_like(a, dtype=None, order='K', subok=None, shape=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupy.zeros_like.html#cupy.zeros_like","numpy":"numpy.zeros_like()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.zeros_like.html#numpy.zeros_like"},{"name":"cupyx.allow_synchronize","description":"Allows or disallows device synchronization temporarily in the current thread.","signature":"cupyx.allow_synchronize(allow)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.allow_synchronize.html#cupyx.allow_synchronize","numpy":"","numpy_url":""},{"name":"cupyx.empty_like_pinned","description":"Returns a new, uninitialized NumPy array with the same shape and dtype as those of the given array.","signature":"cupyx.empty_like_pinned(a, dtype=None, order='K', subok=None, shape=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.empty_like_pinned.html#cupyx.empty_like_pinned","numpy":"","numpy_url":""},{"name":"cupyx.empty_pinned","description":"Returns a new, uninitialized NumPy array with the given shape and dtype.","signature":"cupyx.empty_pinned(shape, dtype=<class 'float'>, order='C')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.empty_pinned.html#cupyx.empty_pinned","numpy":"","numpy_url":""},{"name":"cupyx.jit.rawkernel","description":"A decorator compiles a Python function into CUDA kernel.","signature":"cupyx.jit.rawkernel(mode='cuda')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.jit.rawkernel.html#cupyx.jit.rawkernel","numpy":"","numpy_url":""},{"name":"cupyx.optimizing.optimize","description":"Context manager that optimizes kernel launch parameters.","signature":"cupyx.optimizing.optimize(*, key=None, path=None, readonly=False, **config_dict)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.optimizing.optimize.html#cupyx.optimizing.optimize","numpy":"","numpy_url":""},{"name":"cupyx.rsqrt = <ufunc 'cupy_rsqrt'>","description":"Returns the reciprocal square root.","signature":"cupyx.rsqrt = <ufunc 'cupy_rsqrt'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.rsqrt.html#cupyx.rsqrt","numpy":"","numpy_url":""},{"name":"cupyx.scatter_add","description":"Adds given values to specified elements of an array.","signature":"cupyx.scatter_add(a, slices, value)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scatter_add.html#cupyx.scatter_add","numpy":"","numpy_url":""},{"name":"cupyx.scatter_max","description":"Stores a maximum value of elements specified by indices to an array.","signature":"cupyx.scatter_max(a, slices, value)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scatter_max.html#cupyx.scatter_max","numpy":"","numpy_url":""},{"name":"cupyx.scatter_min","description":"Stores a minimum value of elements specified by indices to an array.","signature":"cupyx.scatter_min(a, slices, value)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scatter_min.html#cupyx.scatter_min","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fft.fft","description":"Compute the one-dimensional FFT.","signature":"cupyx.scipy.fft.fft(x, n=None, axis=- 1, norm=None, overwrite_x=False, *, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.fft.html#cupyx.scipy.fft.fft","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fft.fft2","description":"Compute the two-dimensional FFT.","signature":"cupyx.scipy.fft.fft2(x, s=None, axes=(- 2, - 1), norm=None, overwrite_x=False, *, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.fft2.html#cupyx.scipy.fft.fft2","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fft.fftfreq","description":"Return the FFT sample frequencies.","signature":"cupyx.scipy.fft.fftfreq(n, d=1.0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.fftfreq.html#cupyx.scipy.fft.fftfreq","numpy":"numpy.fft.fftfreq()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.fftfreq.html#numpy.fft.fftfreq"},{"name":"cupyx.scipy.fft.fftn","description":"Compute the N-dimensional FFT.","signature":"cupyx.scipy.fft.fftn(x, s=None, axes=None, norm=None, overwrite_x=False, *, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.fftn.html#cupyx.scipy.fft.fftn","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fft.fftshift","description":"Shift the zero-frequency component to the center of the spectrum.","signature":"cupyx.scipy.fft.fftshift(x, axes=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.fftshift.html#cupyx.scipy.fft.fftshift","numpy":"numpy.fft.fftshift()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.fftshift.html#numpy.fft.fftshift"},{"name":"cupyx.scipy.fft.hfft","description":"Compute the FFT of a signal that has Hermitian symmetry.","signature":"cupyx.scipy.fft.hfft(x, n=None, axis=- 1, norm=None, overwrite_x=False, *, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.hfft.html#cupyx.scipy.fft.hfft","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fft.ifft","description":"Compute the one-dimensional inverse FFT.","signature":"cupyx.scipy.fft.ifft(x, n=None, axis=- 1, norm=None, overwrite_x=False, *, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.ifft.html#cupyx.scipy.fft.ifft","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fft.ifft2","description":"Compute the two-dimensional inverse FFT.","signature":"cupyx.scipy.fft.ifft2(x, s=None, axes=(- 2, - 1), norm=None, overwrite_x=False, *, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.ifft2.html#cupyx.scipy.fft.ifft2","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fft.ifftn","description":"Compute the N-dimensional inverse FFT.","signature":"cupyx.scipy.fft.ifftn(x, s=None, axes=None, norm=None, overwrite_x=False, *, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.ifftn.html#cupyx.scipy.fft.ifftn","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fft.ifftshift","description":"The inverse of fftshift().","signature":"cupyx.scipy.fft.ifftshift(x, axes=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.ifftshift.html#cupyx.scipy.fft.ifftshift","numpy":"numpy.fft.ifftshift()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.ifftshift.html#numpy.fft.ifftshift"},{"name":"cupyx.scipy.fft.ihfft","description":"Compute the FFT of a signal that has Hermitian symmetry.","signature":"cupyx.scipy.fft.ihfft(x, n=None, axis=- 1, norm=None, overwrite_x=False, *, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.ihfft.html#cupyx.scipy.fft.ihfft","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fft.irfft","description":"Compute the one-dimensional inverse FFT for real input.","signature":"cupyx.scipy.fft.irfft(x, n=None, axis=- 1, norm=None, overwrite_x=False, *, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.irfft.html#cupyx.scipy.fft.irfft","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fft.irfft2","description":"Compute the two-dimensional inverse FFT for real input.","signature":"cupyx.scipy.fft.irfft2(x, s=None, axes=(- 2, - 1), norm=None, overwrite_x=False, *, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.irfft2.html#cupyx.scipy.fft.irfft2","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fft.irfftn","description":"Compute the N-dimensional inverse FFT for real input.","signature":"cupyx.scipy.fft.irfftn(x, s=None, axes=None, norm=None, overwrite_x=False, *, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.irfftn.html#cupyx.scipy.fft.irfftn","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fft.next_fast_len","description":"Find the next fast size to fft.","signature":"cupyx.scipy.fft.next_fast_len(target, real=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.next_fast_len.html#cupyx.scipy.fft.next_fast_len","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fft.rfft","description":"Compute the one-dimensional FFT for real input.","signature":"cupyx.scipy.fft.rfft(x, n=None, axis=- 1, norm=None, overwrite_x=False, *, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.rfft.html#cupyx.scipy.fft.rfft","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fft.rfft2","description":"Compute the two-dimensional FFT for real input.","signature":"cupyx.scipy.fft.rfft2(x, s=None, axes=(- 2, - 1), norm=None, overwrite_x=False, *, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.rfft2.html#cupyx.scipy.fft.rfft2","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fft.rfftfreq","description":"Return the FFT sample frequencies for real input.","signature":"cupyx.scipy.fft.rfftfreq(n, d=1.0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.rfftfreq.html#cupyx.scipy.fft.rfftfreq","numpy":"numpy.fft.rfftfreq()","numpy_url":"https://numpy.org/doc/stable/reference/generated/numpy.fft.rfftfreq.html#numpy.fft.rfftfreq"},{"name":"cupyx.scipy.fft.rfftn","description":"Compute the N-dimensional FFT for real input.","signature":"cupyx.scipy.fft.rfftn(x, s=None, axes=None, norm=None, overwrite_x=False, *, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fft.rfftn.html#cupyx.scipy.fft.rfftn","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fftpack.fft","description":"Compute the one-dimensional FFT.","signature":"cupyx.scipy.fftpack.fft(x, n=None, axis=- 1, overwrite_x=False, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fftpack.fft.html#cupyx.scipy.fftpack.fft","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fftpack.fft2","description":"Compute the two-dimensional FFT.","signature":"cupyx.scipy.fftpack.fft2(x, shape=None, axes=(- 2, - 1), overwrite_x=False, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fftpack.fft2.html#cupyx.scipy.fftpack.fft2","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fftpack.fftn","description":"Compute the N-dimensional FFT.","signature":"cupyx.scipy.fftpack.fftn(x, shape=None, axes=None, overwrite_x=False, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fftpack.fftn.html#cupyx.scipy.fftpack.fftn","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fftpack.get_fft_plan","description":"Generate a CUDA FFT plan for transforming up to three axes.","signature":"cupyx.scipy.fftpack.get_fft_plan(a, shape=None, axes=None, value_type='C2C')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fftpack.get_fft_plan.html#cupyx.scipy.fftpack.get_fft_plan","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fftpack.ifft","description":"Compute the one-dimensional inverse FFT.","signature":"cupyx.scipy.fftpack.ifft(x, n=None, axis=- 1, overwrite_x=False, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fftpack.ifft.html#cupyx.scipy.fftpack.ifft","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fftpack.ifft2","description":"Compute the two-dimensional inverse FFT.","signature":"cupyx.scipy.fftpack.ifft2(x, shape=None, axes=(- 2, - 1), overwrite_x=False, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fftpack.ifft2.html#cupyx.scipy.fftpack.ifft2","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fftpack.ifftn","description":"Compute the N-dimensional inverse FFT.","signature":"cupyx.scipy.fftpack.ifftn(x, shape=None, axes=None, overwrite_x=False, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fftpack.ifftn.html#cupyx.scipy.fftpack.ifftn","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fftpack.irfft","description":"Compute the one-dimensional inverse FFT for real input.","signature":"cupyx.scipy.fftpack.irfft(x, n=None, axis=- 1, overwrite_x=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fftpack.irfft.html#cupyx.scipy.fftpack.irfft","numpy":"","numpy_url":""},{"name":"cupyx.scipy.fftpack.rfft","description":"Compute the one-dimensional FFT for real input.","signature":"cupyx.scipy.fftpack.rfft(x, n=None, axis=- 1, overwrite_x=False, plan=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.fftpack.rfft.html#cupyx.scipy.fftpack.rfft","numpy":"","numpy_url":""},{"name":"cupyx.scipy.get_array_module","description":"Returns the array module for arguments.","signature":"cupyx.scipy.get_array_module(*args)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.get_array_module.html#cupyx.scipy.get_array_module","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.block_diag","description":"Create a block diagonal matrix from provided arrays.","signature":"cupyx.scipy.linalg.block_diag(*arrs)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.block_diag.html#cupyx.scipy.linalg.block_diag","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.circulant","description":"Construct a circulant matrix.","signature":"cupyx.scipy.linalg.circulant(c)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.circulant.html#cupyx.scipy.linalg.circulant","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.companion","description":"Create a companion matrix.","signature":"cupyx.scipy.linalg.companion(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.companion.html#cupyx.scipy.linalg.companion","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.convolution_matrix","description":"Construct a convolution matrix.","signature":"cupyx.scipy.linalg.convolution_matrix(a, n, mode='full')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.convolution_matrix.html#cupyx.scipy.linalg.convolution_matrix","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.dft","description":"Discrete Fourier transform matrix.","signature":"cupyx.scipy.linalg.dft(n, scale=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.dft.html#cupyx.scipy.linalg.dft","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.fiedler","description":"Returns a symmetric Fiedler matrix","signature":"cupyx.scipy.linalg.fiedler(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.fiedler.html#cupyx.scipy.linalg.fiedler","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.fiedler_companion","description":"Returns a Fiedler companion matrix","signature":"cupyx.scipy.linalg.fiedler_companion(a)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.fiedler_companion.html#cupyx.scipy.linalg.fiedler_companion","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.hadamard","description":"Construct an Hadamard matrix.","signature":"cupyx.scipy.linalg.hadamard(n, dtype=<class 'int'>)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.hadamard.html#cupyx.scipy.linalg.hadamard","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.hankel","description":"Construct a Hankel matrix.","signature":"cupyx.scipy.linalg.hankel(c, r=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.hankel.html#cupyx.scipy.linalg.hankel","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.helmert","description":"Create an Helmert matrix of order n.","signature":"cupyx.scipy.linalg.helmert(n, full=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.helmert.html#cupyx.scipy.linalg.helmert","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.hilbert","description":"Create a Hilbert matrix of order n.","signature":"cupyx.scipy.linalg.hilbert(n)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.hilbert.html#cupyx.scipy.linalg.hilbert","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.kron","description":"Kronecker product.","signature":"cupyx.scipy.linalg.kron(a, b)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.kron.html#cupyx.scipy.linalg.kron","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.leslie","description":"Create a Leslie matrix.","signature":"cupyx.scipy.linalg.leslie(f, s)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.leslie.html#cupyx.scipy.linalg.leslie","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.lu","description":"LU decomposition.","signature":"cupyx.scipy.linalg.lu(a, permute_l=False, overwrite_a=False, check_finite=True)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.lu.html#cupyx.scipy.linalg.lu","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.lu_factor","description":"LU decomposition.","signature":"cupyx.scipy.linalg.lu_factor(a, overwrite_a=False, check_finite=True)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.lu_factor.html#cupyx.scipy.linalg.lu_factor","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.lu_solve","description":"Solve an equation system, a * x = b, given the LU factorization of a","signature":"cupyx.scipy.linalg.lu_solve(lu_and_piv, b, trans=0, overwrite_b=False, check_finite=True)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.lu_solve.html#cupyx.scipy.linalg.lu_solve","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.solve_triangular","description":"Solve the equation a x = b for x, assuming a is a triangular matrix.","signature":"cupyx.scipy.linalg.solve_triangular(a, b, trans=0, lower=False, unit_diagonal=False, overwrite_b=False, check_finite=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.solve_triangular.html#cupyx.scipy.linalg.solve_triangular","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.toeplitz","description":"Construct a Toeplitz matrix.","signature":"cupyx.scipy.linalg.toeplitz(c, r=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.toeplitz.html#cupyx.scipy.linalg.toeplitz","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.tri","description":"Construct (N, M) matrix filled with ones at and below the k-th diagonal. The matrix has A[i,j] == 1 for i <= j + k.","signature":"cupyx.scipy.linalg.tri(N, M=None, k=0, dtype=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.tri.html#cupyx.scipy.linalg.tri","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.tril","description":"Make a copy of a matrix with elements above the k-th diagonal zeroed.","signature":"cupyx.scipy.linalg.tril(m, k=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.tril.html#cupyx.scipy.linalg.tril","numpy":"","numpy_url":""},{"name":"cupyx.scipy.linalg.triu","description":"Make a copy of a matrix with elements below the k-th diagonal zeroed.","signature":"cupyx.scipy.linalg.triu(m, k=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.linalg.triu.html#cupyx.scipy.linalg.triu","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.affine_transform","description":"Apply an affine transformation.","signature":"cupyx.scipy.ndimage.affine_transform(input, matrix, offset=0.0, output_shape=None, output=None, order=3, mode='constant', cval=0.0, prefilter=True)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.affine_transform.html#cupyx.scipy.ndimage.affine_transform","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.binary_closing","description":"Multidimensional binary closing with the given structuring element.","signature":"cupyx.scipy.ndimage.binary_closing(input, structure=None, iterations=1, output=None, origin=0, mask=None, border_value=0, brute_force=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.binary_closing.html#cupyx.scipy.ndimage.binary_closing","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.binary_dilation","description":"Multidimensional binary dilation with the given structuring element.","signature":"cupyx.scipy.ndimage.binary_dilation(input, structure=None, iterations=1, mask=None, output=None, border_value=0, origin=0, brute_force=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.binary_dilation.html#cupyx.scipy.ndimage.binary_dilation","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.binary_erosion","description":"Multidimensional binary erosion with a given structuring element.","signature":"cupyx.scipy.ndimage.binary_erosion(input, structure=None, iterations=1, mask=None, output=None, border_value=0, origin=0, brute_force=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.binary_erosion.html#cupyx.scipy.ndimage.binary_erosion","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.binary_fill_holes","description":"Fill the holes in binary objects.","signature":"cupyx.scipy.ndimage.binary_fill_holes(input, structure=None, output=None, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.binary_fill_holes.html#cupyx.scipy.ndimage.binary_fill_holes","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.binary_hit_or_miss","description":"Multidimensional binary hit-or-miss transform.","signature":"cupyx.scipy.ndimage.binary_hit_or_miss(input, structure1=None, structure2=None, output=None, origin1=0, origin2=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.binary_hit_or_miss.html#cupyx.scipy.ndimage.binary_hit_or_miss","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.binary_opening","description":"Multidimensional binary opening with the given structuring element.","signature":"cupyx.scipy.ndimage.binary_opening(input, structure=None, iterations=1, output=None, origin=0, mask=None, border_value=0, brute_force=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.binary_opening.html#cupyx.scipy.ndimage.binary_opening","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.binary_propagation","description":"Multidimensional binary propagation with the given structuring element.","signature":"cupyx.scipy.ndimage.binary_propagation(input, structure=None, mask=None, output=None, border_value=0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.binary_propagation.html#cupyx.scipy.ndimage.binary_propagation","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.black_tophat","description":"Multidimensional black tophat filter.","signature":"cupyx.scipy.ndimage.black_tophat(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.black_tophat.html#cupyx.scipy.ndimage.black_tophat","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.center_of_mass","description":"Calculate the center of mass of the values of an array at labels.","signature":"cupyx.scipy.ndimage.center_of_mass(input, labels=None, index=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.center_of_mass.html#cupyx.scipy.ndimage.center_of_mass","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.convolve","description":"Multi-dimensional convolution.","signature":"cupyx.scipy.ndimage.convolve(input, weights, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.convolve.html#cupyx.scipy.ndimage.convolve","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.convolve1d","description":"One-dimensional convolution.","signature":"cupyx.scipy.ndimage.convolve1d(input, weights, axis=- 1, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.convolve1d.html#cupyx.scipy.ndimage.convolve1d","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.correlate","description":"Multi-dimensional correlate.","signature":"cupyx.scipy.ndimage.correlate(input, weights, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.correlate.html#cupyx.scipy.ndimage.correlate","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.correlate1d","description":"One-dimensional correlate.","signature":"cupyx.scipy.ndimage.correlate1d(input, weights, axis=- 1, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.correlate1d.html#cupyx.scipy.ndimage.correlate1d","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.extrema","description":"Calculate the minimums and maximums of the values of an array at labels, along with their positions.","signature":"cupyx.scipy.ndimage.extrema(input, labels=None, index=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.extrema.html#cupyx.scipy.ndimage.extrema","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.fourier_ellipsoid","description":"Multidimensional ellipsoid Fourier filter.","signature":"cupyx.scipy.ndimage.fourier_ellipsoid(input, size, n=- 1, axis=- 1, output=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.fourier_ellipsoid.html#cupyx.scipy.ndimage.fourier_ellipsoid","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.fourier_gaussian","description":"Multidimensional Gaussian shift filter.","signature":"cupyx.scipy.ndimage.fourier_gaussian(input, sigma, n=- 1, axis=- 1, output=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.fourier_gaussian.html#cupyx.scipy.ndimage.fourier_gaussian","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.fourier_shift","description":"Multidimensional Fourier shift filter.","signature":"cupyx.scipy.ndimage.fourier_shift(input, shift, n=- 1, axis=- 1, output=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.fourier_shift.html#cupyx.scipy.ndimage.fourier_shift","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.fourier_uniform","description":"Multidimensional uniform shift filter.","signature":"cupyx.scipy.ndimage.fourier_uniform(input, size, n=- 1, axis=- 1, output=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.fourier_uniform.html#cupyx.scipy.ndimage.fourier_uniform","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.gaussian_filter","description":"Multi-dimensional Gaussian filter.","signature":"cupyx.scipy.ndimage.gaussian_filter(input, sigma, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.gaussian_filter.html#cupyx.scipy.ndimage.gaussian_filter","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.gaussian_filter1d","description":"One-dimensional Gaussian filter along the given axis.","signature":"cupyx.scipy.ndimage.gaussian_filter1d(input, sigma, axis=- 1, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.gaussian_filter1d.html#cupyx.scipy.ndimage.gaussian_filter1d","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.gaussian_gradient_magnitude","description":"Multi-dimensional gradient magnitude using Gaussian derivatives.","signature":"cupyx.scipy.ndimage.gaussian_gradient_magnitude(input, sigma, output=None, mode='reflect', cval=0.0, **kwargs)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.gaussian_gradient_magnitude.html#cupyx.scipy.ndimage.gaussian_gradient_magnitude","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.gaussian_laplace","description":"Multi-dimensional Laplace filter using Gaussian second derivatives.","signature":"cupyx.scipy.ndimage.gaussian_laplace(input, sigma, output=None, mode='reflect', cval=0.0, **kwargs)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.gaussian_laplace.html#cupyx.scipy.ndimage.gaussian_laplace","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.generate_binary_structure","description":"Generate a binary structure for binary morphological operations.","signature":"cupyx.scipy.ndimage.generate_binary_structure(rank, connectivity)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.generate_binary_structure.html#cupyx.scipy.ndimage.generate_binary_structure","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.generic_filter","description":"Compute a multi-dimensional filter using the provided raw kernel or reduction kernel.","signature":"cupyx.scipy.ndimage.generic_filter(input, function, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.generic_filter.html#cupyx.scipy.ndimage.generic_filter","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.generic_filter1d","description":"Compute a 1D filter along the given axis using the provided raw kernel.","signature":"cupyx.scipy.ndimage.generic_filter1d(input, function, filter_size, axis=- 1, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.generic_filter1d.html#cupyx.scipy.ndimage.generic_filter1d","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.generic_gradient_magnitude","description":"Multi-dimensional gradient magnitude filter using a provided derivative function.","signature":"cupyx.scipy.ndimage.generic_gradient_magnitude(input, derivative, output=None, mode='reflect', cval=0.0, extra_arguments=(), extra_keywords=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.generic_gradient_magnitude.html#cupyx.scipy.ndimage.generic_gradient_magnitude","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.generic_laplace","description":"Multi-dimensional Laplace filter using a provided second derivative function.","signature":"cupyx.scipy.ndimage.generic_laplace(input, derivative2, output=None, mode='reflect', cval=0.0, extra_arguments=(), extra_keywords=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.generic_laplace.html#cupyx.scipy.ndimage.generic_laplace","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.grey_closing","description":"Calculates a multi-dimensional greyscale closing.","signature":"cupyx.scipy.ndimage.grey_closing(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.grey_closing.html#cupyx.scipy.ndimage.grey_closing","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.grey_dilation","description":"Calculates a greyscale dilation.","signature":"cupyx.scipy.ndimage.grey_dilation(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.grey_dilation.html#cupyx.scipy.ndimage.grey_dilation","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.grey_erosion","description":"Calculates a greyscale erosion.","signature":"cupyx.scipy.ndimage.grey_erosion(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.grey_erosion.html#cupyx.scipy.ndimage.grey_erosion","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.grey_opening","description":"Calculates a multi-dimensional greyscale opening.","signature":"cupyx.scipy.ndimage.grey_opening(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.grey_opening.html#cupyx.scipy.ndimage.grey_opening","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.histogram","description":"Calculate the histogram of the values of an array, optionally at labels.","signature":"cupyx.scipy.ndimage.histogram(input, min, max, bins, labels=None, index=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.histogram.html#cupyx.scipy.ndimage.histogram","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.iterate_structure","description":"Iterate a structure by dilating it with itself.","signature":"cupyx.scipy.ndimage.iterate_structure(structure, iterations, origin=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.iterate_structure.html#cupyx.scipy.ndimage.iterate_structure","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.label","description":"Labels features in an array.","signature":"cupyx.scipy.ndimage.label(input, structure=None, output=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.label.html#cupyx.scipy.ndimage.label","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.labeled_comprehension","description":"Array resulting from applying func to each labeled region.","signature":"cupyx.scipy.ndimage.labeled_comprehension(input, labels, index, func, out_dtype, default, pass_positions=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.labeled_comprehension.html#cupyx.scipy.ndimage.labeled_comprehension","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.laplace","description":"Multi-dimensional Laplace filter based on approximate second derivatives.","signature":"cupyx.scipy.ndimage.laplace(input, output=None, mode='reflect', cval=0.0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.laplace.html#cupyx.scipy.ndimage.laplace","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.map_coordinates","description":"Map the input array to new coordinates by interpolation.","signature":"cupyx.scipy.ndimage.map_coordinates(input, coordinates, output=None, order=3, mode='constant', cval=0.0, prefilter=True)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.map_coordinates.html#cupyx.scipy.ndimage.map_coordinates","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.maximum","description":"Calculate the maximum of the values of an array over labeled regions.","signature":"cupyx.scipy.ndimage.maximum(input, labels=None, index=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.maximum.html#cupyx.scipy.ndimage.maximum","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.maximum_filter","description":"Multi-dimensional maximum filter.","signature":"cupyx.scipy.ndimage.maximum_filter(input, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.maximum_filter.html#cupyx.scipy.ndimage.maximum_filter","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.maximum_filter1d","description":"Compute the maximum filter along a single axis.","signature":"cupyx.scipy.ndimage.maximum_filter1d(input, size, axis=- 1, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.maximum_filter1d.html#cupyx.scipy.ndimage.maximum_filter1d","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.maximum_position","description":"Find the positions of the maximums of the values of an array at labels.","signature":"cupyx.scipy.ndimage.maximum_position(input, labels=None, index=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.maximum_position.html#cupyx.scipy.ndimage.maximum_position","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.mean","description":" Calculates the mean of the values of an n-D image array, optionallyat specified sub-regions.  ","signature":"cupyx.scipy.ndimage.mean(input, labels=None, index=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.mean.html#cupyx.scipy.ndimage.mean","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.median","description":"Calculate the median of the values of an array over labeled regions.","signature":"cupyx.scipy.ndimage.median(input, labels=None, index=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.median.html#cupyx.scipy.ndimage.median","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.median_filter","description":"Multi-dimensional median filter.","signature":"cupyx.scipy.ndimage.median_filter(input, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.median_filter.html#cupyx.scipy.ndimage.median_filter","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.minimum","description":"Calculate the minimum of the values of an array over labeled regions.","signature":"cupyx.scipy.ndimage.minimum(input, labels=None, index=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.minimum.html#cupyx.scipy.ndimage.minimum","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.minimum_filter","description":"Multi-dimensional minimum filter.","signature":"cupyx.scipy.ndimage.minimum_filter(input, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.minimum_filter.html#cupyx.scipy.ndimage.minimum_filter","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.minimum_filter1d","description":"Compute the minimum filter along a single axis.","signature":"cupyx.scipy.ndimage.minimum_filter1d(input, size, axis=- 1, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.minimum_filter1d.html#cupyx.scipy.ndimage.minimum_filter1d","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.minimum_position","description":"Find the positions of the minimums of the values of an array at labels.","signature":"cupyx.scipy.ndimage.minimum_position(input, labels=None, index=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.minimum_position.html#cupyx.scipy.ndimage.minimum_position","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.morphological_gradient","description":"Multidimensional morphological gradient.","signature":"cupyx.scipy.ndimage.morphological_gradient(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.morphological_gradient.html#cupyx.scipy.ndimage.morphological_gradient","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.morphological_laplace","description":"Multidimensional morphological laplace.","signature":"cupyx.scipy.ndimage.morphological_laplace(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.morphological_laplace.html#cupyx.scipy.ndimage.morphological_laplace","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.percentile_filter","description":"Multi-dimensional percentile filter.","signature":"cupyx.scipy.ndimage.percentile_filter(input, percentile, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.percentile_filter.html#cupyx.scipy.ndimage.percentile_filter","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.prewitt","description":"Compute a Prewitt filter along the given axis.","signature":"cupyx.scipy.ndimage.prewitt(input, axis=- 1, output=None, mode='reflect', cval=0.0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.prewitt.html#cupyx.scipy.ndimage.prewitt","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.rank_filter","description":"Multi-dimensional rank filter.","signature":"cupyx.scipy.ndimage.rank_filter(input, rank, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.rank_filter.html#cupyx.scipy.ndimage.rank_filter","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.rotate","description":"Rotate an array.","signature":"cupyx.scipy.ndimage.rotate(input, angle, axes=(1, 0), reshape=True, output=None, order=3, mode='constant', cval=0.0, prefilter=True)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.rotate.html#cupyx.scipy.ndimage.rotate","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.shift","description":"Shift an array.","signature":"cupyx.scipy.ndimage.shift(input, shift, output=None, order=3, mode='constant', cval=0.0, prefilter=True)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.shift.html#cupyx.scipy.ndimage.shift","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.sobel","description":"Compute a Sobel filter along the given axis.","signature":"cupyx.scipy.ndimage.sobel(input, axis=- 1, output=None, mode='reflect', cval=0.0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.sobel.html#cupyx.scipy.ndimage.sobel","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.spline_filter","description":"Multidimensional spline filter.","signature":"cupyx.scipy.ndimage.spline_filter(input, order=3, output=<class 'numpy.float64'>, mode='mirror')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.spline_filter.html#cupyx.scipy.ndimage.spline_filter","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.spline_filter1d","description":"Calculate a 1-D spline filter along the given axis.","signature":"cupyx.scipy.ndimage.spline_filter1d(input, order=3, axis=-1, output=<class 'numpy.float64'>, mode='mirror')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.spline_filter1d.html#cupyx.scipy.ndimage.spline_filter1d","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.standard_deviation","description":"Calculates the standard deviation of the values of an n-D image array, optionally at specified sub-regions.","signature":"cupyx.scipy.ndimage.standard_deviation(input, labels=None, index=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.standard_deviation.html#cupyx.scipy.ndimage.standard_deviation","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.sum","description":" Calculates the sum of the values of an n-D image array, optionallyat specified sub-regions.  ","signature":"cupyx.scipy.ndimage.sum(input, labels=None, index=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.sum.html#cupyx.scipy.ndimage.sum","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.uniform_filter","description":"Multi-dimensional uniform filter.","signature":"cupyx.scipy.ndimage.uniform_filter(input, size=3, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.uniform_filter.html#cupyx.scipy.ndimage.uniform_filter","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.uniform_filter1d","description":"One-dimensional uniform filter along the given axis.","signature":"cupyx.scipy.ndimage.uniform_filter1d(input, size, axis=- 1, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.uniform_filter1d.html#cupyx.scipy.ndimage.uniform_filter1d","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.variance","description":"Calculates the variance of the values of an n-D image array, optionally at specified sub-regions.","signature":"cupyx.scipy.ndimage.variance(input, labels=None, index=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.variance.html#cupyx.scipy.ndimage.variance","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.white_tophat","description":"Multidimensional white tophat filter.","signature":"cupyx.scipy.ndimage.white_tophat(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.white_tophat.html#cupyx.scipy.ndimage.white_tophat","numpy":"","numpy_url":""},{"name":"cupyx.scipy.ndimage.zoom","description":"Zoom an array.","signature":"cupyx.scipy.ndimage.zoom(input, zoom, output=None, order=3, mode='constant', cval=0.0, prefilter=True, *, grid_mode=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.ndimage.zoom.html#cupyx.scipy.ndimage.zoom","numpy":"","numpy_url":""},{"name":"cupyx.scipy.signal.choose_conv_method","description":"Find the fastest convolution/correlation method.","signature":"cupyx.scipy.signal.choose_conv_method(in1, in2, mode='full')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.signal.choose_conv_method.html#cupyx.scipy.signal.choose_conv_method","numpy":"","numpy_url":""},{"name":"cupyx.scipy.signal.convolve","description":"Convolve two N-dimensional arrays.","signature":"cupyx.scipy.signal.convolve(in1, in2, mode='full', method='auto')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.signal.convolve.html#cupyx.scipy.signal.convolve","numpy":"","numpy_url":""},{"name":"cupyx.scipy.signal.convolve2d","description":"Convolve two 2-dimensional arrays.","signature":"cupyx.scipy.signal.convolve2d(in1, in2, mode='full', boundary='fill', fillvalue=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.signal.convolve2d.html#cupyx.scipy.signal.convolve2d","numpy":"","numpy_url":""},{"name":"cupyx.scipy.signal.correlate","description":"Cross-correlate two N-dimensional arrays.","signature":"cupyx.scipy.signal.correlate(in1, in2, mode='full', method='auto')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.signal.correlate.html#cupyx.scipy.signal.correlate","numpy":"","numpy_url":""},{"name":"cupyx.scipy.signal.correlate2d","description":"Cross-correlate two 2-dimensional arrays.","signature":"cupyx.scipy.signal.correlate2d(in1, in2, mode='full', boundary='fill', fillvalue=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.signal.correlate2d.html#cupyx.scipy.signal.correlate2d","numpy":"","numpy_url":""},{"name":"cupyx.scipy.signal.fftconvolve","description":"Convolve two N-dimensional arrays using FFT.","signature":"cupyx.scipy.signal.fftconvolve(in1, in2, mode='full', axes=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.signal.fftconvolve.html#cupyx.scipy.signal.fftconvolve","numpy":"","numpy_url":""},{"name":"cupyx.scipy.signal.medfilt","description":"Perform a median filter on an N-dimensional array.","signature":"cupyx.scipy.signal.medfilt(volume, kernel_size=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.signal.medfilt.html#cupyx.scipy.signal.medfilt","numpy":"","numpy_url":""},{"name":"cupyx.scipy.signal.medfilt2d","description":"Median filter a 2-dimensional array.","signature":"cupyx.scipy.signal.medfilt2d(input, kernel_size=3)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.signal.medfilt2d.html#cupyx.scipy.signal.medfilt2d","numpy":"","numpy_url":""},{"name":"cupyx.scipy.signal.oaconvolve","description":"Convolve two N-dimensional arrays using the overlap-add method.","signature":"cupyx.scipy.signal.oaconvolve(in1, in2, mode='full', axes=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.signal.oaconvolve.html#cupyx.scipy.signal.oaconvolve","numpy":"","numpy_url":""},{"name":"cupyx.scipy.signal.order_filter","description":"Perform an order filter on an N-D array.","signature":"cupyx.scipy.signal.order_filter(a, domain, rank)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.signal.order_filter.html#cupyx.scipy.signal.order_filter","numpy":"","numpy_url":""},{"name":"cupyx.scipy.signal.wiener","description":"Perform a Wiener filter on an N-dimensional array.","signature":"cupyx.scipy.signal.wiener(im, mysize=None, noise=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.signal.wiener.html#cupyx.scipy.signal.wiener","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.bmat","description":"Builds a sparse matrix from sparse sub-blocks","signature":"cupyx.scipy.sparse.bmat(blocks, format=None, dtype=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.bmat.html#cupyx.scipy.sparse.bmat","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.diags","description":"Construct a sparse matrix from diagonals.","signature":"cupyx.scipy.sparse.diags(diagonals, offsets=0, shape=None, format=None, dtype=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.diags.html#cupyx.scipy.sparse.diags","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.eye","description":"Creates a sparse matrix with ones on diagonal.","signature":"cupyx.scipy.sparse.eye(m, n=None, k=0, dtype='d', format=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.eye.html#cupyx.scipy.sparse.eye","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.find","description":"Returns the indices and values of the nonzero elements of a matrix","signature":"cupyx.scipy.sparse.find(A)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.find.html#cupyx.scipy.sparse.find","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.hstack","description":"Stacks sparse matrices horizontally (column wise)","signature":"cupyx.scipy.sparse.hstack(blocks, format=None, dtype=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.hstack.html#cupyx.scipy.sparse.hstack","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.identity","description":"Creates an identity matrix in sparse format.","signature":"cupyx.scipy.sparse.identity(n, dtype='d', format=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.identity.html#cupyx.scipy.sparse.identity","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.issparse","description":"Checks if a given matrix is a sparse matrix.","signature":"cupyx.scipy.sparse.issparse(x)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.issparse.html#cupyx.scipy.sparse.issparse","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.isspmatrix","description":"Checks if a given matrix is a sparse matrix.","signature":"cupyx.scipy.sparse.isspmatrix(x)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.isspmatrix.html#cupyx.scipy.sparse.isspmatrix","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.isspmatrix_coo","description":"Checks if a given matrix is of COO format.","signature":"cupyx.scipy.sparse.isspmatrix_coo(x)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.isspmatrix_coo.html#cupyx.scipy.sparse.isspmatrix_coo","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.isspmatrix_csc","description":"Checks if a given matrix is of CSC format.","signature":"cupyx.scipy.sparse.isspmatrix_csc(x)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.isspmatrix_csc.html#cupyx.scipy.sparse.isspmatrix_csc","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.isspmatrix_csr","description":"Checks if a given matrix is of CSR format.","signature":"cupyx.scipy.sparse.isspmatrix_csr(x)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.isspmatrix_csr.html#cupyx.scipy.sparse.isspmatrix_csr","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.isspmatrix_dia","description":"Checks if a given matrix is of DIA format.","signature":"cupyx.scipy.sparse.isspmatrix_dia(x)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.isspmatrix_dia.html#cupyx.scipy.sparse.isspmatrix_dia","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.kron","description":"Kronecker product of sparse matrices A and B.","signature":"cupyx.scipy.sparse.kron(A, B, format=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.kron.html#cupyx.scipy.sparse.kron","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.linalg.aslinearoperator","description":"Return A as a LinearOperator.","signature":"cupyx.scipy.sparse.linalg.aslinearoperator(A)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.linalg.aslinearoperator.html#cupyx.scipy.sparse.linalg.aslinearoperator","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.linalg.cg","description":"Uses Conjugate Gradient iteration to solve Ax = b.","signature":"cupyx.scipy.sparse.linalg.cg(A, b, x0=None, tol=1e-05, maxiter=None, M=None, callback=None, atol=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.linalg.cg.html#cupyx.scipy.sparse.linalg.cg","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.linalg.eigsh","description":"Finds k eigenvalues and eigenvectors of the real symmetric matrix.","signature":"cupyx.scipy.sparse.linalg.eigsh(a, k=6, *, which='LM', ncv=None, maxiter=None, tol=0, return_eigenvectors=True)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.linalg.eigsh.html#cupyx.scipy.sparse.linalg.eigsh","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.linalg.factorized","description":"Return a function for solving a sparse linear system, with A pre-factorized.","signature":"cupyx.scipy.sparse.linalg.factorized(A)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.linalg.factorized.html#cupyx.scipy.sparse.linalg.factorized","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.linalg.gmres","description":"Uses Generalized Minimal RESidual iteration to solve Ax = b.","signature":"cupyx.scipy.sparse.linalg.gmres(A, b, x0=None, tol=1e-05, restart=None, maxiter=None, M=None, callback=None, atol=None, callback_type=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.linalg.gmres.html#cupyx.scipy.sparse.linalg.gmres","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.linalg.lobpcg","description":"Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG)","signature":"cupyx.scipy.sparse.linalg.lobpcg(A, X, B=None, M=None, Y=None, tol=None, maxiter=None, largest=True, verbosityLevel=0, retLambdaHistory=False, retResidualNormsHistory=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.linalg.lobpcg.html#cupyx.scipy.sparse.linalg.lobpcg","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.linalg.lsqr","description":"Solves linear system with QR decomposition.","signature":"cupyx.scipy.sparse.linalg.lsqr(A, b)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.linalg.lsqr.html#cupyx.scipy.sparse.linalg.lsqr","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.linalg.norm","description":"Norm of a cupy.scipy.spmatrix","signature":"cupyx.scipy.sparse.linalg.norm(x, ord=None, axis=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.linalg.norm.html#cupyx.scipy.sparse.linalg.norm","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.linalg.spilu","description":"Computes the incomplete LU decomposition of a sparse square matrix.","signature":"cupyx.scipy.sparse.linalg.spilu(A, drop_tol=None, fill_factor=None, drop_rule=None, permc_spec=None, diag_pivot_thresh=None, relax=None, panel_size=None, options={})","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.linalg.spilu.html#cupyx.scipy.sparse.linalg.spilu","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.linalg.splu","description":"Computes the LU decomposition of a sparse square matrix.","signature":"cupyx.scipy.sparse.linalg.splu(A, permc_spec=None, diag_pivot_thresh=None, relax=None, panel_size=None, options={})","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.linalg.splu.html#cupyx.scipy.sparse.linalg.splu","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.linalg.spsolve","description":"Solves a sparse linear system A x = b","signature":"cupyx.scipy.sparse.linalg.spsolve(A, b)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.linalg.spsolve.html#cupyx.scipy.sparse.linalg.spsolve","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.linalg.spsolve_triangular","description":"Solves a sparse triangular system A x = b.","signature":"cupyx.scipy.sparse.linalg.spsolve_triangular(A, b, lower=True, overwrite_A=False, overwrite_b=False, unit_diagonal=False)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.linalg.spsolve_triangular.html#cupyx.scipy.sparse.linalg.spsolve_triangular","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.linalg.svds","description":"Finds the largest k singular values/vectors for a sparse matrix.","signature":"cupyx.scipy.sparse.linalg.svds(a, k=6, *, ncv=None, tol=0, which='LM', maxiter=None, return_singular_vectors=True)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.linalg.svds.html#cupyx.scipy.sparse.linalg.svds","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.rand","description":"Generates a random sparse matrix.","signature":"cupyx.scipy.sparse.rand(m, n, density=0.01, format='coo', dtype=None, random_state=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.rand.html#cupyx.scipy.sparse.rand","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.random","description":"Generates a random sparse matrix.","signature":"cupyx.scipy.sparse.random(m, n, density=0.01, format='coo', dtype=None, random_state=None, data_rvs=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.random.html#cupyx.scipy.sparse.random","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.spdiags","description":"Creates a sparse matrix from diagonals.","signature":"cupyx.scipy.sparse.spdiags(data, diags, m, n, format=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.spdiags.html#cupyx.scipy.sparse.spdiags","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.tril","description":"Returns the lower triangular portion of a matrix in sparse format","signature":"cupyx.scipy.sparse.tril(A, k=0, format=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.tril.html#cupyx.scipy.sparse.tril","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.triu","description":"Returns the upper triangular portion of a matrix in sparse format","signature":"cupyx.scipy.sparse.triu(A, k=0, format=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.triu.html#cupyx.scipy.sparse.triu","numpy":"","numpy_url":""},{"name":"cupyx.scipy.sparse.vstack","description":"Stacks sparse matrices vertically (row wise)","signature":"cupyx.scipy.sparse.vstack(blocks, format=None, dtype=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.vstack.html#cupyx.scipy.sparse.vstack","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.digamma = <ufunc 'cupyx_scipy_digamma'>","description":"The digamma function.","signature":"cupyx.scipy.special.digamma = <ufunc 'cupyx_scipy_digamma'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.digamma.html#cupyx.scipy.special.digamma","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.entr = <ufunc 'cupyx_scipy_entr'>","description":"Elementwise function for computing entropy.","signature":"cupyx.scipy.special.entr = <ufunc 'cupyx_scipy_entr'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.entr.html#cupyx.scipy.special.entr","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.erf = <ufunc 'cupyx_scipy_erf'>","description":"Error function.","signature":"cupyx.scipy.special.erf = <ufunc 'cupyx_scipy_erf'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.erf.html#cupyx.scipy.special.erf","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.erfc = <ufunc 'cupyx_scipy_erfc'>","description":"Complementary error function.","signature":"cupyx.scipy.special.erfc = <ufunc 'cupyx_scipy_erfc'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.erfc.html#cupyx.scipy.special.erfc","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.erfcinv = <ufunc 'cupyx_scipy_erfcinv'>","description":"Inverse function of complementary error function.","signature":"cupyx.scipy.special.erfcinv = <ufunc 'cupyx_scipy_erfcinv'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.erfcinv.html#cupyx.scipy.special.erfcinv","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.erfcx = <ufunc 'cupyx_scipy_erfcx'>","description":"Scaled complementary error function.","signature":"cupyx.scipy.special.erfcx = <ufunc 'cupyx_scipy_erfcx'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.erfcx.html#cupyx.scipy.special.erfcx","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.erfinv = <ufunc 'cupyx_scipy_erfinv'>","description":"Inverse function of error function.","signature":"cupyx.scipy.special.erfinv = <ufunc 'cupyx_scipy_erfinv'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.erfinv.html#cupyx.scipy.special.erfinv","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.gamma = <ufunc 'cupyx_scipy_gamma'>","description":"Gamma function.","signature":"cupyx.scipy.special.gamma = <ufunc 'cupyx_scipy_gamma'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.gamma.html#cupyx.scipy.special.gamma","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.gammaln = <ufunc 'cupyx_scipy_gammaln'>","description":"Logarithm of the absolute value of the Gamma function.","signature":"cupyx.scipy.special.gammaln = <ufunc 'cupyx_scipy_gammaln'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.gammaln.html#cupyx.scipy.special.gammaln","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.huber = <ufunc 'cupyx_scipy_huber'>","description":"Elementwise function for computing the Huber loss.","signature":"cupyx.scipy.special.huber = <ufunc 'cupyx_scipy_huber'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.huber.html#cupyx.scipy.special.huber","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.i0 = <ufunc 'cupyx_scipy_i0'>","description":"Modified Bessel function of order 0.","signature":"cupyx.scipy.special.i0 = <ufunc 'cupyx_scipy_i0'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.i0.html#cupyx.scipy.special.i0","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.i1 = <ufunc 'cupyx_scipy_i1'>","description":"Modified Bessel function of order 1.","signature":"cupyx.scipy.special.i1 = <ufunc 'cupyx_scipy_i1'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.i1.html#cupyx.scipy.special.i1","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.j0 = <ufunc 'cupyx_scipy_j0'>","description":"Bessel function of the first kind of order 0.","signature":"cupyx.scipy.special.j0 = <ufunc 'cupyx_scipy_j0'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.j0.html#cupyx.scipy.special.j0","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.j1 = <ufunc 'cupyx_scipy_j1'>","description":"Bessel function of the first kind of order 1.","signature":"cupyx.scipy.special.j1 = <ufunc 'cupyx_scipy_j1'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.j1.html#cupyx.scipy.special.j1","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.kl_div = <ufunc 'cupyx_scipy_kl_div'>","description":"Elementwise function for computing Kullback-Leibler divergence.","signature":"cupyx.scipy.special.kl_div = <ufunc 'cupyx_scipy_kl_div'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.kl_div.html#cupyx.scipy.special.kl_div","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.ndtr = <ufunc 'cupyx_scipy_ndtr'>","description":"Cumulative distribution function of normal distribution.","signature":"cupyx.scipy.special.ndtr = <ufunc 'cupyx_scipy_ndtr'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.ndtr.html#cupyx.scipy.special.ndtr","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.polygamma","description":"Polygamma function n.","signature":"cupyx.scipy.special.polygamma(n, x)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.polygamma.html#cupyx.scipy.special.polygamma","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.pseudo_huber = <ufunc 'cupyx_scipy_pseudo_huber'>","description":"Elementwise function for computing the Pseudo-Huber loss.","signature":"cupyx.scipy.special.pseudo_huber = <ufunc 'cupyx_scipy_pseudo_huber'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.pseudo_huber.html#cupyx.scipy.special.pseudo_huber","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.rel_entr = <ufunc 'cupyx_scipy_rel_entr'>","description":"Elementwise function for computing relative entropy.","signature":"cupyx.scipy.special.rel_entr = <ufunc 'cupyx_scipy_rel_entr'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.rel_entr.html#cupyx.scipy.special.rel_entr","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.y0 = <ufunc 'cupyx_scipy_y0'>","description":"Bessel function of the second kind of order 0.","signature":"cupyx.scipy.special.y0 = <ufunc 'cupyx_scipy_y0'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.y0.html#cupyx.scipy.special.y0","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.y1 = <ufunc 'cupyx_scipy_y1'>","description":"Bessel function of the second kind of order 1.","signature":"cupyx.scipy.special.y1 = <ufunc 'cupyx_scipy_y1'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.y1.html#cupyx.scipy.special.y1","numpy":"","numpy_url":""},{"name":"cupyx.scipy.special.zeta = <ufunc 'cupyx_scipy_zeta'>","description":"Hurwitz zeta function.","signature":"cupyx.scipy.special.zeta = <ufunc 'cupyx_scipy_zeta'>","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.special.zeta.html#cupyx.scipy.special.zeta","numpy":"","numpy_url":""},{"name":"cupyx.scipy.stats.entropy","description":"Calculate the entropy of a distribution for given probability values.","signature":"cupyx.scipy.stats.entropy(pk, qk=None, base=None, axis=0)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.stats.entropy.html#cupyx.scipy.stats.entropy","numpy":"","numpy_url":""},{"name":"cupyx.time.repeat","description":"Timing utility for measuring time spent by both CPU and GPU.","signature":"cupyx.time.repeat(func, args=(), kwargs={}, n_repeat=10000, *, name=None, n_warmup=10, max_duration=inf, devices=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.time.repeat.html#cupyx.time.repeat","numpy":"","numpy_url":""},{"name":"cupyx.zeros_like_pinned","description":"Returns a new, zero-initialized NumPy array with the same shape and dtype as those of the given array.","signature":"cupyx.zeros_like_pinned(a, dtype=None, order='K', subok=None, shape=None)","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.zeros_like_pinned.html#cupyx.zeros_like_pinned","numpy":"","numpy_url":""},{"name":"cupyx.zeros_pinned","description":"Returns a new, zero-initialized NumPy array with the given shape and dtype.","signature":"cupyx.zeros_pinned(shape, dtype=<class 'float'>, order='C')","url":"https://docs.cupy.dev/en/stable/reference/generated/cupyx.zeros_pinned.html#cupyx.zeros_pinned","numpy":"","numpy_url":""}]
